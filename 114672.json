{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","commits":[{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.copyChars(key);\n    int prefixLength = scratch.length();\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch.get(), arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRefBuilder spare = new CharsRefBuilder();\n    if (exactFirst && arc.isFinal()) {\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRefBuilder suffix = new BytesRefBuilder();\n    for (Result<Long> completion : completions) {\n      scratch.setLength(prefixLength);\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":["bede0ec3497c48e70d55196c5065d97a4bc1db3d","6ecc52400551de6a7d8daf646be839487911627c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.copyChars(key);\n    int prefixLength = scratch.length();\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch.get(), arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRefBuilder spare = new CharsRefBuilder();\n    if (exactFirst && arc.isFinal()) {\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput())));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRefBuilder suffix = new BytesRefBuilder();\n    for (Result<Long> completion : completions) {\n      scratch.setLength(prefixLength);\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.copyChars(key);\n    int prefixLength = scratch.length();\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch.get(), arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRefBuilder spare = new CharsRefBuilder();\n    if (exactFirst && arc.isFinal()) {\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRefBuilder suffix = new BytesRefBuilder();\n    for (Result<Long> completion : completions) {\n      scratch.setLength(prefixLength);\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.copyChars(key);\n    int prefixLength = scratch.length();\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch.get(), arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRefBuilder spare = new CharsRefBuilder();\n    if (exactFirst && arc.isFinal()) {\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput())));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRefBuilder suffix = new BytesRefBuilder();\n    for (Result<Long> completion : completions) {\n      scratch.setLength(prefixLength);\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.copyChars(key);\n    int prefixLength = scratch.length();\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch.get(), arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRefBuilder spare = new CharsRefBuilder();\n    if (exactFirst && arc.isFinal()) {\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRefBuilder suffix = new BytesRefBuilder();\n    for (Result<Long> completion : completions) {\n      scratch.setLength(prefixLength);\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.copyUTF8Bytes(scratch.get());\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}