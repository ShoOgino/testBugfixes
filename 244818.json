{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6879595a977d0ae175ab5547cd7f69ea8b886fca","date":1311012222,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      if( \"gack_i\".equals( f.name() ) ) {\n        System.out.println( f );\n      }\n      \n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( Fieldable f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["1509f151d7692d84fae414b2b799ac06ba60fcb4","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6879595a977d0ae175ab5547cd7f69ea8b886fca"],"6879595a977d0ae175ab5547cd7f69ea8b886fca":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["6879595a977d0ae175ab5547cd7f69ea8b886fca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"6879595a977d0ae175ab5547cd7f69ea8b886fca":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}