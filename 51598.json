{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, null, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, null, needsFreqs);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, null, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, null, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int flags;\n        switch (random.nextInt(4)) {\n          case 0: flags = 0; break;\n          case 1: flags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: flags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: flags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, flags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, null, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, null, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int flags;\n        switch (random.nextInt(4)) {\n          case 0: flags = 0; break;\n          case 1: flags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: flags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: flags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, flags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, null, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, null, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, null, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, null, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}