{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"330274305237bd6f93e7ee021669f797394127b1","date":1489510162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = arr.length-1; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","sourceOld":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02cc739d6621fdfc3991bde01ae8ef5cbdb46925","date":1489651910,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = arr.length-1; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","sourceOld":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = arr.length-1; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","sourceOld":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","sourceNew":null,"sourceOld":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = arr.length-1; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldSort(String,String,String[]).mjava","sourceNew":null,"sourceOld":"  private void doTestPointFieldSort(String field, String dvField, String[] arr) throws Exception {\n    assert arr != null && arr.length == 10;\n    for (int i = arr.length-1; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, String.valueOf(arr[i]), field, String.valueOf(arr[i])));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", dvField + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"can not sort on a PointField without doc values: \" + field, \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", field + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    //TODO: sort missing\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["330274305237bd6f93e7ee021669f797394127b1"],"ab68488225b6a6c357dda72ed11dedca9914a192":["46dc9ac8b3e748407baaef82453138ff3974480c","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"330274305237bd6f93e7ee021669f797394127b1":["46dc9ac8b3e748407baaef82453138ff3974480c"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["46dc9ac8b3e748407baaef82453138ff3974480c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["ab68488225b6a6c357dda72ed11dedca9914a192","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","330274305237bd6f93e7ee021669f797394127b1","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"330274305237bd6f93e7ee021669f797394127b1":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}