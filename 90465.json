{"path":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"0caf86b778fe22b63626ba65f24f7b69c5c5b384","date":1432213473,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n    this.units = rptFieldType.units;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n    this.units = rptFieldType.units;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n    this.units = rptFieldType.units;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23aec8f6a0b5a11d050d784a13871261bef7c925","date":1465332514,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    Map<String, String> origArgs = new HashMap<>(args); // clone so we can feed it to an aggregated field type\n    super.init(schema, origArgs);\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    Map<String, String> origArgs = new HashMap<>(args); // clone so we can feed it to an aggregated field type\n    super.init(schema, origArgs);\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    // Do NOT call super.init(); instead we delegate to an RPT field. Admittedly this is error prone.\n\n    //TODO Move this check to a call from AbstractSpatialFieldType.createFields() so the type can declare\n    // if it supports multi-valued or not. It's insufficient here; we can't see if you set multiValued on the field.\n    if (isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not capable of multiValued: \" + getTypeName());\n    }\n\n    // Choose a better default distErrPct if not configured\n    if (args.containsKey(SpatialArgsParser.DIST_ERR_PCT) == false) {\n      args.put(SpatialArgsParser.DIST_ERR_PCT, DEFAULT_DIST_ERR_PCT);\n    }\n\n    rptFieldType = new SpatialRecursivePrefixTreeFieldType();\n    rptFieldType.setTypeName(getTypeName());\n    rptFieldType.properties = properties;\n    rptFieldType.init(schema, args);\n    rptFieldType.argsParser = argsParser = newSpatialArgsParser();\n    this.ctx = rptFieldType.ctx;\n    this.distanceUnits = rptFieldType.distanceUnits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23aec8f6a0b5a11d050d784a13871261bef7c925":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0caf86b778fe22b63626ba65f24f7b69c5c5b384","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","23aec8f6a0b5a11d050d784a13871261bef7c925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23aec8f6a0b5a11d050d784a13871261bef7c925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["23aec8f6a0b5a11d050d784a13871261bef7c925","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}