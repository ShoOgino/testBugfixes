{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","date":1298208351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a32e313633383bfadd3bbf8b933611c6a07c7c","date":1303945298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","sourceOld":"  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49c9cd7b6155a692974306c2f859c8b1ddb874e0","date":1307117530,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n      //nocommit randomiz the IOContext here?\n     d.copy(impl, file, file, IOContext.DEFAULT);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e248526ae3a33286a678d7833da022fd95695f2d","date":1309450587,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file, newIOContext(r));\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n      //nocommit randomiz the IOContext here?\n     d.copy(impl, file, file, IOContext.DEFAULT);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file, newIOContext(r));\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file, newIOContext(r));\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file);\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectory(Random,Directory).mjava","sourceNew":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file, newIOContext(r));\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance, using the specified random\n   * with contents copied from the provided directory. See \n   * {@link #newDirectory()} for more information.\n   */\n  public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IOException {\n    Directory impl = newDirectoryImpl(r, TEST_DIRECTORY);\n    for (String file : d.listAll()) {\n     d.copy(impl, file, file, newIOContext(r));\n    }\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(r, impl);\n    stores.put(dir, Thread.currentThread().getStackTrace());\n    dir.setThrottling(TEST_THROTTLING);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["f1bdbf92da222965b46c0a942c3857ba56e5c638","49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e248526ae3a33286a678d7833da022fd95695f2d":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["49c9cd7b6155a692974306c2f859c8b1ddb874e0","e248526ae3a33286a678d7833da022fd95695f2d"],"49c9cd7b6155a692974306c2f859c8b1ddb874e0":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["e248526ae3a33286a678d7833da022fd95695f2d"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","1e7c99bd45fa88a3d93a03fdd773053bef72268e","49c9cd7b6155a692974306c2f859c8b1ddb874e0","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e248526ae3a33286a678d7833da022fd95695f2d":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"49c9cd7b6155a692974306c2f859c8b1ddb874e0":["c715a0f99152be7566591f323c6c5a25725a1bcb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","1e7c99bd45fa88a3d93a03fdd773053bef72268e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["70a32e313633383bfadd3bbf8b933611c6a07c7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70a32e313633383bfadd3bbf8b933611c6a07c7c","c715a0f99152be7566591f323c6c5a25725a1bcb","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}