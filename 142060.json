{"path":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws ParseException {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseArg().mjava","sourceNew":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","sourceOld":"  public String parseArg() throws SyntaxError {\n    argWasQuoted = false;\n\n    sp.eatws();\n    char ch = sp.peek();\n    String val = null;\n    switch (ch) {\n      case ')': return null;\n      case '$':\n        sp.pos++;\n        String param = sp.getId();\n        val = getParam(param);\n        break;\n      case '\\'':\n      case '\"':\n        val = sp.getQuotedString();\n        argWasQuoted = true;\n        break;\n      default:\n        // read unquoted literal ended by whitespace ',' or ')'\n        // there is no escaping.\n        int valStart = sp.pos;\n        for (;;) {\n          if (sp.pos >= sp.end) {\n            throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + sp.val +\"'\");\n          }\n          char c = sp.val.charAt(sp.pos);\n          if (c==')' || c==',' || Character.isWhitespace(c)) {\n            val = sp.val.substring(valStart, sp.pos);\n            break;\n          }\n          sp.pos++;\n        }\n    }\n\n    sp.eatws();\n    consumeArgumentDelimiter();\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}