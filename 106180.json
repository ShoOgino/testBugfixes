{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}