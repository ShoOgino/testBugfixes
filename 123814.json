{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":["45274255319f6ca70f11b8a07a5fc00cb00cde57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits.value=\" + all.totalHits.value);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits.value) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45274255319f6ca70f11b8a07a5fc00cb00cde57","date":1546418230,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores;\n    final TopDocsCollector allCollector;\n    if (sort == null) {\n      allCollector = TopScoreDocCollector.create(maxDoc, null, Integer.MAX_VALUE);\n      doScores = false;\n    } else if (sort == Sort.RELEVANCE) {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = true;\n    } else {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = random().nextBoolean();\n    }\n    searcher.search(query, allCollector);\n    all = allCollector.topDocs();\n    if (doScores) {\n      TopFieldCollector.populateScores(all.scoreDocs, searcher, query);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits.value=\" + all.totalHits.value);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits.value) {\n      TopDocs paged;\n      final TopDocsCollector pagedCollector;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        pagedCollector = TopScoreDocCollector.create(pageSize, lastBottom, Integer.MAX_VALUE);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        } else {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        }\n      }\n      searcher.search(query, pagedCollector);\n      paged = pagedCollector.topDocs();\n      if (doScores) {\n        TopFieldCollector.populateScores(paged.scoreDocs, searcher, query);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits.value=\" + all.totalHits.value);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits.value) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","f718186415bc5417a3367c952c64c8534053c350","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores;\n    final TopDocsCollector<?> allCollector;\n    if (sort == null) {\n      allCollector = TopScoreDocCollector.create(maxDoc, null, Integer.MAX_VALUE);\n      doScores = false;\n    } else if (sort == Sort.RELEVANCE) {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = true;\n    } else {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = random().nextBoolean();\n    }\n    searcher.search(query, allCollector);\n    all = allCollector.topDocs();\n    if (doScores) {\n      TopFieldCollector.populateScores(all.scoreDocs, searcher, query);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits.value=\" + all.totalHits.value);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits.value) {\n      TopDocs paged;\n      final TopDocsCollector<?> pagedCollector;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        pagedCollector = TopScoreDocCollector.create(pageSize, lastBottom, Integer.MAX_VALUE);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        } else {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        }\n      }\n      searcher.search(query, pagedCollector);\n      paged = pagedCollector.topDocs();\n      if (doScores) {\n        TopFieldCollector.populateScores(paged.scoreDocs, searcher, query);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doScores;\n    final TopDocsCollector allCollector;\n    if (sort == null) {\n      allCollector = TopScoreDocCollector.create(maxDoc, null, Integer.MAX_VALUE);\n      doScores = false;\n    } else if (sort == Sort.RELEVANCE) {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = true;\n    } else {\n      allCollector = TopFieldCollector.create(sort, maxDoc, Integer.MAX_VALUE);\n      doScores = random().nextBoolean();\n    }\n    searcher.search(query, allCollector);\n    all = allCollector.topDocs();\n    if (doScores) {\n      TopFieldCollector.populateScores(all.scoreDocs, searcher, query);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits.value=\" + all.totalHits.value);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits.value) {\n      TopDocs paged;\n      final TopDocsCollector pagedCollector;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        pagedCollector = TopScoreDocCollector.create(pageSize, lastBottom, Integer.MAX_VALUE);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        } else {\n          pagedCollector = TopFieldCollector.create(sort, pageSize, (FieldDoc) lastBottom, Integer.MAX_VALUE);\n        }\n      }\n      searcher.search(query, pagedCollector);\n      paged = pagedCollector.topDocs();\n      if (doScores) {\n        TopFieldCollector.populateScores(paged.scoreDocs, searcher, query);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"45274255319f6ca70f11b8a07a5fc00cb00cde57":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["45274255319f6ca70f11b8a07a5fc00cb00cde57"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"45274255319f6ca70f11b8a07a5fc00cb00cde57":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["45274255319f6ca70f11b8a07a5fc00cb00cde57"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}