{"path":"src/java/org/apache/lucene/analysis/CharTokenizer#incrementTokenOld().mjava","commits":[{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharTokenizer#incrementTokenOld().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The <= 3.0 version of incrementToken. This is a backwards compat implementation used\n   * if a version <= 3.0 is provided to the ctor. \n   * @deprecated remove in 4.0\n   */\n  @Deprecated\n  private boolean incrementTokenOld() throws IOException {\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    final char[] oldIoBuffer = ioBuffer.getBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(oldIoBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = oldIoBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementTokenOld().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharTokenizer#incrementTokenOld().mjava","sourceNew":"  /**\n   * The <= 3.0 version of incrementToken. This is a backwards compat implementation used\n   * if a version <= 3.0 is provided to the ctor. \n   * @deprecated remove in 4.0\n   */\n  @Deprecated\n  private boolean incrementTokenOld() throws IOException {\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    final char[] oldIoBuffer = ioBuffer.getBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(oldIoBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = oldIoBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }  \n\n","sourceOld":"  /**\n   * The <= 3.0 version of incrementToken. This is a backwards compat implementation used\n   * if a version <= 3.0 is provided to the ctor. \n   * @deprecated remove in 4.0\n   */\n  @Deprecated\n  private boolean incrementTokenOld() throws IOException {\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    final char[] oldIoBuffer = ioBuffer.getBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(oldIoBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = oldIoBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["966b079690131e434b39530d82cc413f5aff4cd5"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["966b079690131e434b39530d82cc413f5aff4cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}