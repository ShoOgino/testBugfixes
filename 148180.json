{"path":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","commits":[{"id":"3ee067e27d1cce6d2d5d64280007410c2e1a38d8","date":1001438945,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Do some substitutions for the term to reduce overstemming:\n\t *\n\t * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n\t *   \"�\" is substituted by \"ss\"\n\t * - Substitute an second char of an pair of equal characters with\n\t *   an asterisk: ?? -> ?*\n\t * - Substitute some common character combinations with a token:\n\t *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n\t *\n\t * @return  The term with all needed substitutions.\n\t */\n\tprivate StringBuffer substitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk.\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that enough characters at left for search.\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token.\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b027969b494a02d6f7a03a43537cc6935afce2a","date":1008019104,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"\t/**\n\t * Do some substitutions for the term to reduce overstemming:\n\t *\n\t * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n\t *   \"�\" is substituted by \"ss\"\n\t * - Substitute a second char of an pair of equal characters with\n\t *   an asterisk: ?? -> ?*\n\t * - Substitute some common character combinations with a token:\n\t *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n\t *\n\t * @return  The term with all needed substitutions.\n\t */\n\tprivate StringBuffer substitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that at least one character is left left side from the current one\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","sourceOld":"\t/**\n\t * Do some substitutions for the term to reduce overstemming:\n\t *\n\t * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n\t *   \"�\" is substituted by \"ss\"\n\t * - Substitute an second char of an pair of equal characters with\n\t *   an asterisk: ?? -> ?*\n\t * - Substitute some common character combinations with a token:\n\t *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n\t *\n\t * @return  The term with all needed substitutions.\n\t */\n\tprivate StringBuffer substitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk.\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that enough characters at left for search.\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token.\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3","date":1013649547,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of an pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     *\n     * @return  The term with all needed substitutions.\n     */\n    private StringBuffer substitute( StringBuffer buffer ) {\n\tsubstCount = 0;\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    // Replace the second char of a pair of the equal characters with an asterisk\n\t    if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\tbuffer.setCharAt( c, '*' );\n\t    }\n\t    // Substitute Umlauts.\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'a' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'o' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'u' );\n\t    }\n\t    // Take care that at least one character is left left side from the current one\n\t    if ( c < buffer.length() - 1 ) {\n\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t    buffer.setCharAt( c, 's' );\n\t\t    buffer.insert( c + 1, 's' );\n\t\t    substCount++;\n\t\t}\n\t\t// Masking several common character combinations with an token\n\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '$' );\n\t\t    buffer.delete( c + 1, c + 3 );\n\t\t    substCount =+ 2;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '�' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t    buffer.setCharAt( c, '%' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t    buffer.setCharAt( c, '&' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t    buffer.setCharAt( c, '#' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t    buffer.setCharAt( c, '!' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t    }\n\t}\n\treturn buffer;\n    }\n\n","sourceOld":"\t/**\n\t * Do some substitutions for the term to reduce overstemming:\n\t *\n\t * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n\t *   \"�\" is substituted by \"ss\"\n\t * - Substitute a second char of an pair of equal characters with\n\t *   an asterisk: ?? -> ?*\n\t * - Substitute some common character combinations with a token:\n\t *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n\t *\n\t * @return  The term with all needed substitutions.\n\t */\n\tprivate StringBuffer substitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that at least one character is left left side from the current one\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e","date":1027293369,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer ) {\n\t\tsubstCount = 0;\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that at least one character is left left side from the current one\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of an pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     *\n     * @return  The term with all needed substitutions.\n     */\n    private StringBuffer substitute( StringBuffer buffer ) {\n\tsubstCount = 0;\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    // Replace the second char of a pair of the equal characters with an asterisk\n\t    if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\tbuffer.setCharAt( c, '*' );\n\t    }\n\t    // Substitute Umlauts.\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'a' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'o' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'u' );\n\t    }\n\t    // Take care that at least one character is left left side from the current one\n\t    if ( c < buffer.length() - 1 ) {\n\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t    buffer.setCharAt( c, 's' );\n\t\t    buffer.insert( c + 1, 's' );\n\t\t    substCount++;\n\t\t}\n\t\t// Masking several common character combinations with an token\n\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '$' );\n\t\t    buffer.delete( c + 1, c + 3 );\n\t\t    substCount =+ 2;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '�' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t    buffer.setCharAt( c, '%' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t    buffer.setCharAt( c, '&' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t    buffer.setCharAt( c, '#' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t    buffer.setCharAt( c, '!' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t    }\n\t}\n\treturn buffer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n\tsubstCount = 0;\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    // Replace the second char of a pair of the equal characters with an asterisk\n\t    if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\tbuffer.setCharAt( c, '*' );\n\t    }\n\t    // Substitute Umlauts.\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'a' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'o' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'u' );\n\t    }\n\t    // Take care that at least one character is left left side from the current one\n\t    if ( c < buffer.length() - 1 ) {\n\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t    buffer.setCharAt( c, 's' );\n\t\t    buffer.insert( c + 1, 's' );\n\t\t    substCount++;\n\t\t}\n\t\t// Masking several common character combinations with an token\n\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n\t\t    buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n\t\t{\n\t\t    buffer.setCharAt( c, '$' );\n\t\t    buffer.delete( c + 1, c + 3 );\n\t\t    substCount =+ 2;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '�' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t    buffer.setCharAt( c, '%' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t    buffer.setCharAt( c, '&' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t    buffer.setCharAt( c, '#' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t    buffer.setCharAt( c, '!' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t    }\n\t}\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer ) {\n\t\tsubstCount = 0;\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\t// Replace the second char of a pair of the equal characters with an asterisk\n\t\t\tif ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\t\t\tbuffer.setCharAt( c, '*' );\n\t\t\t}\n\t\t\t// Substitute Umlauts.\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'a' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'o' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'u' );\n\t\t\t}\n\t\t\t// Take care that at least one character is left left side from the current one\n\t\t\tif ( c < buffer.length() - 1 ) {\n\t\t\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\t\tbuffer.insert( c + 1, 's' );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\t// Masking several common character combinations with an token\n\t\t\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '$' );\n\t\t\t\t\tbuffer.delete( c + 1, c + 3 );\n\t\t\t\t\tsubstCount =+ 2;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '�' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '%' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '&' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '#' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t\t\t\tbuffer.setCharAt( c, '!' );\n\t\t\t\t\tbuffer.deleteCharAt( c + 1 );\n\t\t\t\t\tsubstCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d195ac4f5f0fd16249e88707973706feb1214df0","date":1080662088,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          if ( buffer.charAt( c ) == '�' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n          }\n          // Masking several common character combinations with an token\n          else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '�' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n\tsubstCount = 0;\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    // Replace the second char of a pair of the equal characters with an asterisk\n\t    if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n\t\tbuffer.setCharAt( c, '*' );\n\t    }\n\t    // Substitute Umlauts.\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'a' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'o' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'u' );\n\t    }\n\t    // Take care that at least one character is left left side from the current one\n\t    if ( c < buffer.length() - 1 ) {\n\t\tif ( buffer.charAt( c ) == '�' ) {\n\t\t    buffer.setCharAt( c, 's' );\n\t\t    buffer.insert( c + 1, 's' );\n\t\t    substCount++;\n\t\t}\n\t\t// Masking several common character combinations with an token\n\t\telse if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n\t\t    buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n\t\t{\n\t\t    buffer.setCharAt( c, '$' );\n\t\t    buffer.delete( c + 1, c + 3 );\n\t\t    substCount =+ 2;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n\t\t    buffer.setCharAt( c, '�' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n\t\t    buffer.setCharAt( c, '%' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n\t\t    buffer.setCharAt( c, '&' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n\t\t    buffer.setCharAt( c, '#' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t\telse if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n\t\t    buffer.setCharAt( c, '!' );\n\t\t    buffer.deleteCharAt( c + 1 );\n\t\t    substCount++;\n\t\t}\n\t    }\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba81b33140312dc953ef8b8217e92c7de3da201d","date":1085948660,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n          }\n          // Masking several common character combinations with an token\n          else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: ��� -> aou,\n     *   \"�\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/�/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          if ( buffer.charAt( c ) == '�' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n          }\n          // Masking several common character combinations with an token\n          else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '�' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"103485adf8723b25b03f7f3619ed5371590e1980","date":1092164567,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n          }\n          // Masking several common character combinations with an token\n          else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":null,"sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["103485adf8723b25b03f7f3619ed5371590e1980"],"d195ac4f5f0fd16249e88707973706feb1214df0":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba81b33140312dc953ef8b8217e92c7de3da201d":["d195ac4f5f0fd16249e88707973706feb1214df0"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"103485adf8723b25b03f7f3619ed5371590e1980":["ba81b33140312dc953ef8b8217e92c7de3da201d"]},"commit2Childs":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"d195ac4f5f0fd16249e88707973706feb1214df0":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["d195ac4f5f0fd16249e88707973706feb1214df0"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"ba81b33140312dc953ef8b8217e92c7de3da201d":["103485adf8723b25b03f7f3619ed5371590e1980"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"103485adf8723b25b03f7f3619ed5371590e1980":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}