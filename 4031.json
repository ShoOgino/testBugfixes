{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#readSegmentInfo(Directory,DataInput,BytesRef).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#readSegmentInfo(Directory,DataInput,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#readSegmentInfo(Directory,DataInput,BytesRef).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory directory, DataInput input, BytesRef scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NAME);\n    final String name = readString(SI_NAME.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_CODEC);\n    final Codec codec = Codec.forName(readString(SI_CODEC.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_VERSION);\n    final String version = readString(SI_VERSION.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n    final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELCOUNT);\n    final int delCount = Integer.parseInt(readString(SI_DELCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASPROX);\n    final int hasProx = readTernary(SI_HASPROX.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASVECTORS);\n    final int hasVectors = readTernary(SI_HASVECTORS.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n    final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSOFFSET);\n    final int dsOffset = Integer.parseInt(readString(SI_DSOFFSET.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSSEGMENT);\n    final String dsSegment = readString(SI_DSSEGMENT.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSCOMPOUND);\n    final boolean dsCompoundFile = Boolean.parseBoolean(readString(SI_DSCOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELGEN);\n    final long delGen = Long.parseLong(readString(SI_DELGEN.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_NORMGEN);\n    final int numNormGen = Integer.parseInt(readString(SI_NUM_NORMGEN.length, scratch));\n    final Map<Integer,Long> normGen;\n    if (numNormGen == 0) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer,Long>();\n      for (int i = 0; i < numNormGen; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_KEY);\n        int key = Integer.parseInt(readString(SI_NORMGEN_KEY.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_VALUE);\n        long value = Long.parseLong(readString(SI_NORMGEN_VALUE.length, scratch));\n        normGen.put(key, value);\n      }\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n    int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n    Map<String,String> diagnostics = new HashMap<String,String>();\n\n    for (int i = 0; i < numDiag; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n      String key = readString(SI_DIAG_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n      String value = readString(SI_DIAG_VALUE.length, scratch);\n      diagnostics.put(key, value);\n    }\n    \n    return new SegmentInfo(directory, version, name, docCount, delGen, dsOffset,\n        dsSegment, dsCompoundFile, normGen, isCompoundFile,\n        delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory directory, DataInput input, BytesRef scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NAME);\n    final String name = readString(SI_NAME.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_CODEC);\n    final Codec codec = Codec.forName(readString(SI_CODEC.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_VERSION);\n    final String version = readString(SI_VERSION.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n    final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELCOUNT);\n    final int delCount = Integer.parseInt(readString(SI_DELCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASPROX);\n    final int hasProx = readTernary(SI_HASPROX.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASVECTORS);\n    final int hasVectors = readTernary(SI_HASVECTORS.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n    final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSOFFSET);\n    final int dsOffset = Integer.parseInt(readString(SI_DSOFFSET.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSSEGMENT);\n    final String dsSegment = readString(SI_DSSEGMENT.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSCOMPOUND);\n    final boolean dsCompoundFile = Boolean.parseBoolean(readString(SI_DSCOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELGEN);\n    final long delGen = Long.parseLong(readString(SI_DELGEN.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_NORMGEN);\n    final int numNormGen = Integer.parseInt(readString(SI_NUM_NORMGEN.length, scratch));\n    final Map<Integer,Long> normGen;\n    if (numNormGen == 0) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer,Long>();\n      for (int i = 0; i < numNormGen; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_KEY);\n        int key = Integer.parseInt(readString(SI_NORMGEN_KEY.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_VALUE);\n        long value = Long.parseLong(readString(SI_NORMGEN_VALUE.length, scratch));\n        normGen.put(key, value);\n      }\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n    int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n    Map<String,String> diagnostics = new HashMap<String,String>();\n\n    for (int i = 0; i < numDiag; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n      String key = readString(SI_DIAG_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n      String value = readString(SI_DIAG_VALUE.length, scratch);\n      diagnostics.put(key, value);\n    }\n    \n    return new SegmentInfo(directory, version, name, docCount, delGen, dsOffset,\n        dsSegment, dsCompoundFile, normGen, isCompoundFile,\n        delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#readSegmentInfo(Directory,DataInput,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#readSegmentInfo(Directory,DataInput,BytesRef).mjava","sourceNew":"  public SegmentInfo readSegmentInfo(Directory directory, DataInput input, BytesRef scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NAME);\n    final String name = readString(SI_NAME.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_CODEC);\n    final Codec codec = Codec.forName(readString(SI_CODEC.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_VERSION);\n    final String version = readString(SI_VERSION.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n    final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELCOUNT);\n    final int delCount = Integer.parseInt(readString(SI_DELCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASPROX);\n    final int hasProx = readTernary(SI_HASPROX.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASVECTORS);\n    final int hasVectors = readTernary(SI_HASVECTORS.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n    final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSOFFSET);\n    final int dsOffset = Integer.parseInt(readString(SI_DSOFFSET.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSSEGMENT);\n    final String dsSegment = readString(SI_DSSEGMENT.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSCOMPOUND);\n    final boolean dsCompoundFile = Boolean.parseBoolean(readString(SI_DSCOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELGEN);\n    final long delGen = Long.parseLong(readString(SI_DELGEN.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_NORMGEN);\n    final int numNormGen = Integer.parseInt(readString(SI_NUM_NORMGEN.length, scratch));\n    final Map<Integer,Long> normGen;\n    if (numNormGen == 0) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer,Long>();\n      for (int i = 0; i < numNormGen; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_KEY);\n        int key = Integer.parseInt(readString(SI_NORMGEN_KEY.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_VALUE);\n        long value = Long.parseLong(readString(SI_NORMGEN_VALUE.length, scratch));\n        normGen.put(key, value);\n      }\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n    int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n    Map<String,String> diagnostics = new HashMap<String,String>();\n\n    for (int i = 0; i < numDiag; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n      String key = readString(SI_DIAG_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n      String value = readString(SI_DIAG_VALUE.length, scratch);\n      diagnostics.put(key, value);\n    }\n    \n    return new SegmentInfo(directory, version, name, docCount, delGen, dsOffset,\n        dsSegment, dsCompoundFile, normGen, isCompoundFile,\n        delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  public SegmentInfo readSegmentInfo(Directory directory, DataInput input, BytesRef scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NAME);\n    final String name = readString(SI_NAME.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_CODEC);\n    final Codec codec = Codec.forName(readString(SI_CODEC.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_VERSION);\n    final String version = readString(SI_VERSION.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n    final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELCOUNT);\n    final int delCount = Integer.parseInt(readString(SI_DELCOUNT.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASPROX);\n    final int hasProx = readTernary(SI_HASPROX.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_HASVECTORS);\n    final int hasVectors = readTernary(SI_HASVECTORS.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n    final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSOFFSET);\n    final int dsOffset = Integer.parseInt(readString(SI_DSOFFSET.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSSEGMENT);\n    final String dsSegment = readString(SI_DSSEGMENT.length, scratch);\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DSCOMPOUND);\n    final boolean dsCompoundFile = Boolean.parseBoolean(readString(SI_DSCOMPOUND.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_DELGEN);\n    final long delGen = Long.parseLong(readString(SI_DELGEN.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_NORMGEN);\n    final int numNormGen = Integer.parseInt(readString(SI_NUM_NORMGEN.length, scratch));\n    final Map<Integer,Long> normGen;\n    if (numNormGen == 0) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer,Long>();\n      for (int i = 0; i < numNormGen; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_KEY);\n        int key = Integer.parseInt(readString(SI_NORMGEN_KEY.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_NORMGEN_VALUE);\n        long value = Long.parseLong(readString(SI_NORMGEN_VALUE.length, scratch));\n        normGen.put(key, value);\n      }\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n    int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n    Map<String,String> diagnostics = new HashMap<String,String>();\n\n    for (int i = 0; i < numDiag; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n      String key = readString(SI_DIAG_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n      String value = readString(SI_DIAG_VALUE.length, scratch);\n      diagnostics.put(key, value);\n    }\n    \n    return new SegmentInfo(directory, version, name, docCount, delGen, dsOffset,\n        dsSegment, dsCompoundFile, normGen, isCompoundFile,\n        delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}