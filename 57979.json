{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstBulkScorer#score(LeafCollector,int,int).mjava","commits":[{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstBulkScorer#score(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstBulkScorer#score(LeafCollector,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, int min, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      if (scorer.docID() < min) {\n        scorer.advance(min);\n      }\n      while (true) {\n        final int scorerDoc = scorer.docID();\n        if (scorerDoc < maxDoc) {\n          if (filterBits.get(scorerDoc)) {\n            collector.collect(scorerDoc);\n          }\n          scorer.nextDoc();\n        } else {\n          break;\n        }\n      }\n\n      return scorer.docID();\n    }\n\n","sourceOld":"    @Override\n    public boolean score(LeafCollector collector, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      while (true) {\n        final int scorerDoc = scorer.docID();\n        if (scorerDoc < maxDoc) {\n          if (filterBits.get(scorerDoc)) {\n            collector.collect(scorerDoc);\n          }\n          scorer.nextDoc();\n        } else {\n          break;\n        }\n      }\n\n      return scorer.docID() != Scorer.NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int score(LeafCollector collector, int min, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      if (scorer.docID() < min) {\n        scorer.advance(min);\n      }\n      while (true) {\n        final int scorerDoc = scorer.docID();\n        if (scorerDoc < maxDoc) {\n          if (filterBits.get(scorerDoc)) {\n            collector.collect(scorerDoc);\n          }\n          scorer.nextDoc();\n        } else {\n          break;\n        }\n      }\n\n      return scorer.docID();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}