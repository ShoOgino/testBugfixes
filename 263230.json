{"path":"lucene/core/src/test/org/apache/lucene/util/compress/LZ4TestCase#doTestWithDictionary(byte[],LZ4.HashTable).mjava","commits":[{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/compress/LZ4TestCase#doTestWithDictionary(byte[],LZ4.HashTable).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestWithDictionary(byte[] data, LZ4.HashTable hashTable) throws IOException {\n    ByteBuffersDataOutput copy = new ByteBuffersDataOutput();\n    int dictOff = TestUtil.nextInt(random(), 0, 10);\n    copy.writeBytes(new byte[dictOff]);\n\n    // Create a dictionary from substrings of the input to compress\n    int dictLen = 0;\n    for (int i = TestUtil.nextInt(random(), 0, data.length); i < data.length && dictLen < LZ4.MAX_DISTANCE; ) {\n      int l = Math.min(data.length - i, TestUtil.nextInt(random(), 1, 32));\n      l = Math.min(l, LZ4.MAX_DISTANCE - dictLen);\n      copy.writeBytes(data, i, l);\n      dictLen += l;\n      i += l;\n      i += TestUtil.nextInt(random(), 1, 32);\n    }\n\n    copy.writeBytes(data);\n    copy.writeBytes(new byte[random().nextInt(10)]);\n\n    byte[] copyBytes = copy.toArrayCopy();\n    doTestWithDictionary(copyBytes, dictOff, dictLen, data.length, hashTable);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}