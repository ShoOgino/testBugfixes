{"path":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","sourceNew":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c84aedcfa68275a8218f47c728d71c04303ca6e","date":1466407290,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6c84aedcfa68275a8218f47c728d71c04303ca6e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c84aedcfa68275a8218f47c728d71c04303ca6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","6c84aedcfa68275a8218f47c728d71c04303ca6e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6c84aedcfa68275a8218f47c728d71c04303ca6e":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}