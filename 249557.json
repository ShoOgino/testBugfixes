{"path":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getIndexAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77e6111c8c695bcab271a048bf5aae6b05cf415b","date":1450974359,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */ // package access for testing\n  NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getIndexAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getIndexAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */ // package access for testing\n  @SuppressWarnings({\"rawtypes\"})\n  NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getIndexAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */ // package access for testing\n  NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getIndexAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}