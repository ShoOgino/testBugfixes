{"path":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","commits":[{"id":"bb537081ae8ce706dd40a122f57a9e7b8a112be8","date":1411065946,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ParamSet#matchPath(String,String).mjava","sourceNew":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return true;\n\n  }\n\n","sourceOld":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"451cffdb3c3e47d721152b8e904170684a1a9236","date":1420611049,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","sourceNew":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return false;\n\n  }\n\n","sourceOld":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83d1a1404af8fe0baf81f103d3cfc385a84f9484","date":1420640671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","sourceNew":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return true;\n\n  }\n\n","sourceOld":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8f1c7d555822b7f2e60c1ceca657be1ed1b271","date":1420652461,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","sourceNew":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    int i = 0;\n    for (;i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n    return \"*\".equals(ps) || \"**\".equals(ps);\n\n  }\n\n","sourceOld":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    for (int i = 0; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#matchPath(String,String).mjava","sourceNew":"  private static boolean matchPath(String path, String name) {\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    int i = 0;\n    for (; i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size() > i ? pathSplit.get(i) : null;\n      if (ps == null) return false;\n      if (s.equals(ps)) continue;\n      if (\"*\".equals(ps) && nameSplit.size() == i + 1) return true;\n      if (\"**\".equals(ps)) return true;\n      return false;\n    }\n    String ps = pathSplit.size() > i ? pathSplit.get(i) : null;\n    return \"*\".equals(ps) || \"**\".equals(ps);\n\n  }\n\n","sourceOld":"  private static boolean matchPath(String path, String name){\n    List<String> pathSplit = StrUtils.splitSmart(path, '/');\n    List<String> nameSplit = StrUtils.splitSmart(name, '/');\n    int i = 0;\n    for (;i < nameSplit.size(); i++) {\n      String s = nameSplit.get(i);\n      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n      if(ps == null) return false;\n      if(s.equals(ps)) continue;\n      if(\"*\".equals(ps) && nameSplit.size()==i+1) return true;\n      if(\"**\".equals(ps)) return true;\n      return false;\n    }\n    String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;\n    return \"*\".equals(ps) || \"**\".equals(ps);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e8f1c7d555822b7f2e60c1ceca657be1ed1b271":["83d1a1404af8fe0baf81f103d3cfc385a84f9484"],"83d1a1404af8fe0baf81f103d3cfc385a84f9484":["451cffdb3c3e47d721152b8e904170684a1a9236"],"2330174b38007b9942205a2679db9ddffe35af89":["4e8f1c7d555822b7f2e60c1ceca657be1ed1b271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"451cffdb3c3e47d721152b8e904170684a1a9236":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2330174b38007b9942205a2679db9ddffe35af89"]},"commit2Childs":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["451cffdb3c3e47d721152b8e904170684a1a9236"],"4e8f1c7d555822b7f2e60c1ceca657be1ed1b271":["2330174b38007b9942205a2679db9ddffe35af89"],"83d1a1404af8fe0baf81f103d3cfc385a84f9484":["4e8f1c7d555822b7f2e60c1ceca657be1ed1b271"],"2330174b38007b9942205a2679db9ddffe35af89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"451cffdb3c3e47d721152b8e904170684a1a9236":["83d1a1404af8fe0baf81f103d3cfc385a84f9484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}