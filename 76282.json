{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversin} method.\n     */\n    @Override\n    protected boolean postFilter(final double lon, final double lat) {\n      return (SloppyMath.haversin(distanceQuery.centerLat, centerLon, lat, lon) * 1000.0 <= distanceQuery.radiusMeters);\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversin} method.\n     */\n    @Override\n    protected boolean postFilter(final double lon, final double lat) {\n      return (SloppyMath.haversin(distanceQuery.centerLat, centerLon, lat, lon) * 1000.0 <= distanceQuery.radiusMeters);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lon, final double lat) {\n      return SloppyMath.haversinMeters(distanceQuery.centerLat, centerLon, lat, lon) <= distanceQuery.radiusMeters;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversin} method.\n     */\n    @Override\n    protected boolean postFilter(final double lon, final double lat) {\n      return (SloppyMath.haversin(distanceQuery.centerLat, centerLon, lat, lon) * 1000.0 <= distanceQuery.radiusMeters);\n    }\n\n","bugFix":["7a02003eb48495b52b8483703e1b6b48c099ec7d","62cc423073d23f01208c6cf85844dedd80011121"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      return SloppyMath.haversinMeters(distanceQuery.centerLat, centerLon, lat, lon) <= distanceQuery.radiusMeters;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lon, final double lat) {\n      return SloppyMath.haversinMeters(distanceQuery.centerLat, centerLon, lat, lon) <= distanceQuery.radiusMeters;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cebcc2128763561399e79a5415bfdfe8a7a5b1","date":1458683229,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 > maxPartialDistance) {\n        return false;\n      }\n\n      // fully confirm with part 2:\n      return SloppyMath.haversinMeters(h1) <= distanceQuery.radiusMeters;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      return SloppyMath.haversinMeters(distanceQuery.centerLat, centerLon, lat, lon) <= distanceQuery.radiusMeters;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a62e86d7b9cc6dec3c09f771166aa2393fd95c99","date":1466437108,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 <= distanceQuery.sortKey) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 > maxPartialDistance) {\n        return false;\n      }\n\n      // fully confirm with part 2:\n      return SloppyMath.haversinMeters(h1) <= distanceQuery.radiusMeters;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 <= distanceQuery.sortKey) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 > maxPartialDistance) {\n        return false;\n      }\n\n      // fully confirm with part 2:\n      return SloppyMath.haversinMeters(h1) <= distanceQuery.radiusMeters;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 <= distanceQuery.sortKey) {\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 > maxPartialDistance) {\n        return false;\n      }\n\n      // fully confirm with part 2:\n      return SloppyMath.haversinMeters(h1) <= distanceQuery.radiusMeters;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc53adde67e2fa905526fcf1e14e3c9e1e64821","date":1486416055,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.GeoPointRadiusCellComparator#postFilter(double,double).mjava","sourceNew":null,"sourceOld":"    /**\n     * The two-phase query approach. The parent {@link GeoPointTermsEnum} class matches\n     * encoded terms that fall within the minimum bounding box of the point-radius circle. Those documents that pass\n     * the initial bounding box filter are then post filter compared to the provided distance using the\n     * {@link org.apache.lucene.util.SloppyMath#haversinMeters(double, double, double, double)} method.\n     */\n    @Override\n    protected boolean postFilter(final double lat, final double lon) {\n      // check bbox\n      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n        return false;\n      }\n\n      // first check the partial distance, if its more than that, it can't be <= radiusMeters\n      double h1 = SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, lat, lon);\n      if (h1 <= distanceQuery.sortKey) {\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dc53adde67e2fa905526fcf1e14e3c9e1e64821":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["32cebcc2128763561399e79a5415bfdfe8a7a5b1"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["32cebcc2128763561399e79a5415bfdfe8a7a5b1","a62e86d7b9cc6dec3c09f771166aa2393fd95c99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32cebcc2128763561399e79a5415bfdfe8a7a5b1":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["32cebcc2128763561399e79a5415bfdfe8a7a5b1","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc53adde67e2fa905526fcf1e14e3c9e1e64821"]},"commit2Childs":{"7dc53adde67e2fa905526fcf1e14e3c9e1e64821":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["7dc53adde67e2fa905526fcf1e14e3c9e1e64821","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["32cebcc2128763561399e79a5415bfdfe8a7a5b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"32cebcc2128763561399e79a5415bfdfe8a7a5b1":["a62e86d7b9cc6dec3c09f771166aa2393fd95c99","6aaba221b22442bdf0ef28770c25fe259dfb3f55","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}