{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfo).mjava","sourceNew":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the compound file format.\n   */\n  public abstract boolean useCompoundFile(SegmentInfos segments, SegmentInfoPerCommit newSegment) throws IOException;\n\n","sourceOld":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the compound file format.\n   */\n  public abstract boolean useCompoundFile(SegmentInfos segments, SegmentInfo newSegment) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfo).mjava","sourceNew":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the compound file format.\n   */\n  public abstract boolean useCompoundFile(SegmentInfos segments, SegmentInfoPerCommit newSegment) throws IOException;\n\n","sourceOld":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the compound file format.\n   */\n  public abstract boolean useCompoundFile(SegmentInfos segments, SegmentInfo newSegment) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","sourceNew":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the\n   * compound file format. The default implementation returns <code>true</code>\n   * iff the size of the given mergedInfo is less or equal to\n   * {@link #getMaxCFSSegmentSizeMB()} and the size is less or equal to the\n   * TotalIndexSize * {@link #getNoCFSRatio()} otherwise <code>false</code>.\n   */\n  public boolean useCompoundFile(SegmentInfos infos, SegmentInfoPerCommit mergedInfo) throws IOException {\n    if (getNoCFSRatio() == 0.0) {\n      return false;\n    }\n    long mergedInfoSize = size(mergedInfo);\n    if (mergedInfoSize > maxCFSSegmentSize) {\n      return false;\n    }\n    if (getNoCFSRatio() >= 1.0) {\n      return true;\n    }\n    long totalSize = 0;\n    for (SegmentInfoPerCommit info : infos) {\n      totalSize += size(info);\n    }\n    return mergedInfoSize <= getNoCFSRatio() * totalSize;\n  }\n\n","sourceOld":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the compound file format.\n   */\n  public abstract boolean useCompoundFile(SegmentInfos segments, SegmentInfoPerCommit newSegment) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#useCompoundFile(SegmentInfos,SegmentInfoPerCommit).mjava","sourceNew":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the\n   * compound file format. The default implementation returns <code>true</code>\n   * iff the size of the given mergedInfo is less or equal to\n   * {@link #getMaxCFSSegmentSizeMB()} and the size is less or equal to the\n   * TotalIndexSize * {@link #getNoCFSRatio()} otherwise <code>false</code>.\n   */\n  public boolean useCompoundFile(SegmentInfos infos, SegmentCommitInfo mergedInfo) throws IOException {\n    if (getNoCFSRatio() == 0.0) {\n      return false;\n    }\n    long mergedInfoSize = size(mergedInfo);\n    if (mergedInfoSize > maxCFSSegmentSize) {\n      return false;\n    }\n    if (getNoCFSRatio() >= 1.0) {\n      return true;\n    }\n    long totalSize = 0;\n    for (SegmentCommitInfo info : infos) {\n      totalSize += size(info);\n    }\n    return mergedInfoSize <= getNoCFSRatio() * totalSize;\n  }\n\n","sourceOld":"  /**\n   * Returns true if a new segment (regardless of its origin) should use the\n   * compound file format. The default implementation returns <code>true</code>\n   * iff the size of the given mergedInfo is less or equal to\n   * {@link #getMaxCFSSegmentSizeMB()} and the size is less or equal to the\n   * TotalIndexSize * {@link #getNoCFSRatio()} otherwise <code>false</code>.\n   */\n  public boolean useCompoundFile(SegmentInfos infos, SegmentInfoPerCommit mergedInfo) throws IOException {\n    if (getNoCFSRatio() == 0.0) {\n      return false;\n    }\n    long mergedInfoSize = size(mergedInfo);\n    if (mergedInfoSize > maxCFSSegmentSize) {\n      return false;\n    }\n    if (getNoCFSRatio() >= 1.0) {\n      return true;\n    }\n    long totalSize = 0;\n    for (SegmentInfoPerCommit info : infos) {\n      totalSize += size(info);\n    }\n    return mergedInfoSize <= getNoCFSRatio() * totalSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}