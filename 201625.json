{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","commits":[{"id":"c3e328a6f2b163170d23e06008798fb82c27af8b","date":1206825093,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    Token token;\n    while ((token = ts.next()) != null) {\n      String termText =  new String(token.termBuffer(), 0, token.termLength());\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      String termText =  nextToken.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    Token token;\n    while ((token = ts.next()) != null) {\n      String termText =  new String(token.termBuffer(), 0, token.termLength());\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      String termText =  nextToken.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"test sentence\"));\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      String termText =  nextToken.term();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["c3e328a6f2b163170d23e06008798fb82c27af8b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"c3e328a6f2b163170d23e06008798fb82c27af8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3e328a6f2b163170d23e06008798fb82c27af8b"],"c3e328a6f2b163170d23e06008798fb82c27af8b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}