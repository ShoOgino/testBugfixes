{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  /**\n   * Do not call this after finish\n   */\n  @Override\n  public void add(long v) throws IOException {\n    assert v <= PackedInts.maxValue(bitsPerValue) : \"v=\" + v\n            + \" maxValue=\" + PackedInts.maxValue(bitsPerValue);\n    assert v >= 0;\n    //System.out.println(\"    packedw add v=\" + v + \" pendingBitPos=\" + pendingBitPos);\n\n    // TODO\n    if (pendingBitPos >= bitsPerValue) {\n      // not split\n\n      // write-once, so we can |= w/o first masking to 0s\n      pending |= v << (pendingBitPos - bitsPerValue);\n      if (pendingBitPos == bitsPerValue) {\n        // flush\n        out.writeLong(pending);\n        pending = 0;\n        pendingBitPos = 64;\n      } else {\n        pendingBitPos -= bitsPerValue;\n      }\n\n    } else {\n      // split\n\n      // write top pendingBitPos bits of value into bottom bits of pending\n      pending |= (v >> (bitsPerValue - pendingBitPos)) & masks[pendingBitPos - 1];\n      //System.out.println(\"      part1 (v >> \" + (bitsPerValue - pendingBitPos) + \") & \" + masks[pendingBitPos-1]);\n\n      // flush\n      out.writeLong(pending);\n\n      // write bottom (bitsPerValue - pendingBitPos) bits of value into top bits of pending\n      pendingBitPos = 64 - bitsPerValue + pendingBitPos;\n      //System.out.println(\"      part2 v << \" + pendingBitPos);\n      pending = (v << pendingBitPos);\n    }\n    written++;\n  }\n\n","sourceOld":"  /**\n   * Do not call this after finish\n   */\n  @Override\n  public void add(long v) throws IOException {\n    assert v <= PackedInts.maxValue(bitsPerValue) : \"v=\" + v\n            + \" maxValue=\" + PackedInts.maxValue(bitsPerValue);\n    assert v >= 0;\n    //System.out.println(\"    packedw add v=\" + v + \" pendingBitPos=\" + pendingBitPos);\n\n    // TODO\n    if (pendingBitPos >= bitsPerValue) {\n      // not split\n\n      // write-once, so we can |= w/o first masking to 0s\n      pending |= v << (pendingBitPos - bitsPerValue);\n      if (pendingBitPos == bitsPerValue) {\n        // flush\n        out.writeLong(pending);\n        pending = 0;\n        pendingBitPos = 64;\n      } else {\n        pendingBitPos -= bitsPerValue;\n      }\n\n    } else {\n      // split\n\n      // write top pendingBitPos bits of value into bottom bits of pending\n      pending |= (v >> (bitsPerValue - pendingBitPos)) & masks[pendingBitPos - 1];\n      //System.out.println(\"      part1 (v >> \" + (bitsPerValue - pendingBitPos) + \") & \" + masks[pendingBitPos-1]);\n\n      // flush\n      out.writeLong(pending);\n\n      // write bottom (bitsPerValue - pendingBitPos) bits of value into top bits of pending\n      pendingBitPos = 64 - bitsPerValue + pendingBitPos;\n      //System.out.println(\"      part2 v << \" + pendingBitPos);\n      pending = (v << pendingBitPos);\n    }\n    written++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush(nextValues.length);\n      off = 0;\n    }\n    ++written;\n  }\n\n","sourceOld":"  /**\n   * Do not call this after finish\n   */\n  @Override\n  public void add(long v) throws IOException {\n    assert v <= PackedInts.maxValue(bitsPerValue) : \"v=\" + v\n            + \" maxValue=\" + PackedInts.maxValue(bitsPerValue);\n    assert v >= 0;\n    //System.out.println(\"    packedw add v=\" + v + \" pendingBitPos=\" + pendingBitPos);\n\n    // TODO\n    if (pendingBitPos >= bitsPerValue) {\n      // not split\n\n      // write-once, so we can |= w/o first masking to 0s\n      pending |= v << (pendingBitPos - bitsPerValue);\n      if (pendingBitPos == bitsPerValue) {\n        // flush\n        out.writeLong(pending);\n        pending = 0;\n        pendingBitPos = 64;\n      } else {\n        pendingBitPos -= bitsPerValue;\n      }\n\n    } else {\n      // split\n\n      // write top pendingBitPos bits of value into bottom bits of pending\n      pending |= (v >> (bitsPerValue - pendingBitPos)) & masks[pendingBitPos - 1];\n      //System.out.println(\"      part1 (v >> \" + (bitsPerValue - pendingBitPos) + \") & \" + masks[pendingBitPos-1]);\n\n      // flush\n      out.writeLong(pending);\n\n      // write bottom (bitsPerValue - pendingBitPos) bits of value into top bits of pending\n      pendingBitPos = 64 - bitsPerValue + pendingBitPos;\n      //System.out.println(\"      part2 v << \" + pendingBitPos);\n      pending = (v << pendingBitPos);\n    }\n    written++;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush(nextValues.length);\n      off = 0;\n    }\n    ++written;\n  }\n\n","sourceOld":"  /**\n   * Do not call this after finish\n   */\n  @Override\n  public void add(long v) throws IOException {\n    assert v <= PackedInts.maxValue(bitsPerValue) : \"v=\" + v\n            + \" maxValue=\" + PackedInts.maxValue(bitsPerValue);\n    assert v >= 0;\n    //System.out.println(\"    packedw add v=\" + v + \" pendingBitPos=\" + pendingBitPos);\n\n    // TODO\n    if (pendingBitPos >= bitsPerValue) {\n      // not split\n\n      // write-once, so we can |= w/o first masking to 0s\n      pending |= v << (pendingBitPos - bitsPerValue);\n      if (pendingBitPos == bitsPerValue) {\n        // flush\n        out.writeLong(pending);\n        pending = 0;\n        pendingBitPos = 64;\n      } else {\n        pendingBitPos -= bitsPerValue;\n      }\n\n    } else {\n      // split\n\n      // write top pendingBitPos bits of value into bottom bits of pending\n      pending |= (v >> (bitsPerValue - pendingBitPos)) & masks[pendingBitPos - 1];\n      //System.out.println(\"      part1 (v >> \" + (bitsPerValue - pendingBitPos) + \") & \" + masks[pendingBitPos-1]);\n\n      // flush\n      out.writeLong(pending);\n\n      // write bottom (bitsPerValue - pendingBitPos) bits of value into top bits of pending\n      pendingBitPos = 64 - bitsPerValue + pendingBitPos;\n      //System.out.println(\"      part2 v << \" + pendingBitPos);\n      pending = (v << pendingBitPos);\n    }\n    written++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues.put(v);\n    if (nextValues.remaining() == 0) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush(nextValues.length);\n      off = 0;\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues.put(v);\n    if (nextValues.remaining() == 0) {\n      flush();\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush(nextValues.length);\n      off = 0;\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush(nextValues.length);\n      off = 0;\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba27b134db38b60f575128ec10533fc1e9705055","date":1353077039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert bitsPerValue == 64 || (v >= 0 && v <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert bitsPerValue == 64 || (v >= 0 && v <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert v >= 0 && v <= PackedInts.maxValue(bitsPerValue);\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","bugFix":["55110eb60c5105294fc2ae7912d82b750865aa58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert bitsPerValue == 64 || (v >= 0 && v <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter#add(long).mjava","sourceNew":"  @Override\n  public void add(long v) throws IOException {\n    assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","sourceOld":"  @Override\n  public void add(long v) throws IOException {\n    assert bitsPerValue == 64 || (v >= 0 && v <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;\n    assert !finished;\n    if (valueCount != -1 && written >= valueCount) {\n      throw new EOFException(\"Writing past end of stream\");\n    }\n    nextValues[off++] = v;\n    if (off == nextValues.length) {\n      flush();\n    }\n    ++written;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"ba27b134db38b60f575128ec10533fc1e9705055":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"55110eb60c5105294fc2ae7912d82b750865aa58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","0e3359210474c12c0b79e6400450313e3d7ef2bb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["d4d69c535930b5cce125cff868d40f6373dc27d4","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["f8615860cb50aefb8eebca1d1b3893dbe21cf126","ba27b134db38b60f575128ec10533fc1e9705055"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["035130b0c342f404c027af8c8870587c3741cb1e"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"ba27b134db38b60f575128ec10533fc1e9705055":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","ba27b134db38b60f575128ec10533fc1e9705055","d4d69c535930b5cce125cff868d40f6373dc27d4"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"035130b0c342f404c027af8c8870587c3741cb1e":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}