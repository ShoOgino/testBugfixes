{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addPatched(FieldInfo,Iterable[Number],int,NormMap).mjava","commits":[{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addPatched(FieldInfo,Iterable[Number],int,NormMap).mjava","pathOld":"/dev/null","sourceNew":"  // encodes only uncommon values in a sparse bitset\n  // access is constant time, and the common case is predictable\n  // exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are > 2 values)\n  private void addPatched(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    final long decodeTable[] = uniqueValues.getDecodeTable();\n    int commonCount = uniqueValues.maxFreq();\n    final long commonValue = decodeTable[uniqueValues.maxOrd()];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(PATCHED);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, commonValue);\n    \n    // write exceptions: only two cases make sense\n    // bpv = 1 (folded into sparse bitset already)\n    // bpv > 1 (add indirect exception table)\n    meta.writeVInt(field.number);\n    if (uniqueValues.size == 2) {\n      // special case: implicit in bitset\n      int otherOrd = uniqueValues.maxOrd() == 0 ? 1 : 0;\n      addConstant(decodeTable[otherOrd]);\n    } else {\n      // exception table\n      addIndirect(field, values, count, uniqueValues);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addPatched(FieldInfo,Iterable[Number],int,NormMap).mjava","pathOld":"/dev/null","sourceNew":"  // encodes only uncommon values in a sparse bitset\n  // access is constant time, and the common case is predictable\n  // exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are > 2 values)\n  private void addPatched(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    final long decodeTable[] = uniqueValues.getDecodeTable();\n    int commonCount = uniqueValues.maxFreq();\n    final long commonValue = decodeTable[uniqueValues.maxOrd()];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(PATCHED);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, commonValue);\n    \n    // write exceptions: only two cases make sense\n    // bpv = 1 (folded into sparse bitset already)\n    // bpv > 1 (add indirect exception table)\n    meta.writeVInt(field.number);\n    if (uniqueValues.size == 2) {\n      // special case: implicit in bitset\n      int otherOrd = uniqueValues.maxOrd() == 0 ? 1 : 0;\n      addConstant(decodeTable[otherOrd]);\n    } else {\n      // exception table\n      addIndirect(field, values, count, uniqueValues);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addPatchedBitset(FieldInfo,Iterable[Number],int,NormMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addPatched(FieldInfo,Iterable[Number],int,NormMap).mjava","sourceNew":"  // encodes only uncommon values in a sparse bitset\n  // access is constant time, and the common case is predictable\n  // exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are > 2 values)\n  private void addPatchedBitset(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    int commonCount = uniqueValues.freqs[0];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(PATCHED_BITSET);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, uniqueValues, 0);\n    \n    // write exceptions: only two cases make sense\n    // bpv = 1 (folded into sparse bitset already)\n    // bpv > 1 (add indirect exception table)\n    meta.writeVInt(field.number);\n    if (uniqueValues.size == 2) {\n      // special case: implicit in bitset\n      addConstant(uniqueValues.values[1]);\n    } else {\n      // exception table\n      addIndirect(field, values, count, uniqueValues, 0);\n    }\n  }\n\n","sourceOld":"  // encodes only uncommon values in a sparse bitset\n  // access is constant time, and the common case is predictable\n  // exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are > 2 values)\n  private void addPatched(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    final long decodeTable[] = uniqueValues.getDecodeTable();\n    int commonCount = uniqueValues.maxFreq();\n    final long commonValue = decodeTable[uniqueValues.maxOrd()];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(PATCHED);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, commonValue);\n    \n    // write exceptions: only two cases make sense\n    // bpv = 1 (folded into sparse bitset already)\n    // bpv > 1 (add indirect exception table)\n    meta.writeVInt(field.number);\n    if (uniqueValues.size == 2) {\n      // special case: implicit in bitset\n      int otherOrd = uniqueValues.maxOrd() == 0 ? 1 : 0;\n      addConstant(decodeTable[otherOrd]);\n    } else {\n      // exception table\n      addIndirect(field, values, count, uniqueValues);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c3fae32338d82a0710e1756793faba13dcb598b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15c57be968dbcac6fd3f87af0bd26a8f023e069","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0c3fae32338d82a0710e1756793faba13dcb598b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0c3fae32338d82a0710e1756793faba13dcb598b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}