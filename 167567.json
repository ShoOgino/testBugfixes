{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random.nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random.nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random.nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random.nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random.nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random.nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random.nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random.nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["8f50ea9dfa58003c5d50d910905b09f933083da4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random.nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random.nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newField(\"body\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    final int numThreads = TEST_NIGHTLY ? 5 : 2;\n    final int numSearches = TEST_NIGHTLY ? atLeast(2000) : atLeast(500);\n    final int numDocs = TEST_NIGHTLY ? atLeast(10000) : atLeast(200);\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              for (; totSearch < numSearches & !failed.get(); totSearch++) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(numThreads + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final long startTime = System.currentTimeMillis();\n\n    // TODO: replace w/ the @nightly test data; make this\n    // into an optional @nightly stress test\n    final Document doc = new Document();\n    final Field body = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(body);\n    final StringBuilder sb = new StringBuilder();\n    for(int docCount=0;docCount<NUM_DOCS;docCount++) {\n      final int numTerms = random().nextInt(10);\n      for(int termCount=0;termCount<numTerms;termCount++) {\n        sb.append(random().nextBoolean() ? \"aaa\" : \"bbb\");\n        sb.append(' ');\n      }\n      body.setStringValue(sb.toString());\n      w.addDocument(doc);\n      sb.delete(0, sb.length());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final long endTime = System.currentTimeMillis();\n    if (VERBOSE) System.out.println(\"BUILD took \" + (endTime-startTime));\n\n    final IndexSearcher s = newSearcher(r);\n\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicLong netSearch = new AtomicLong();\n\n    Thread[] threads = new Thread[NUM_SEARCH_THREADS];\n    for (int threadID = 0; threadID < NUM_SEARCH_THREADS; threadID++) {\n      threads[threadID] = new Thread() {\n        TotalHitCountCollector col = new TotalHitCountCollector();\n          @Override\n          public void run() {\n            try {\n              long totHits = 0;\n              long totSearch = 0;\n              long stopAt = System.currentTimeMillis() + RUN_TIME_MSEC;\n              while(System.currentTimeMillis() < stopAt && !failed.get()) {\n                s.search(new TermQuery(new Term(\"body\", \"aaa\")), col);\n                totHits += col.getTotalHits();\n                s.search(new TermQuery(new Term(\"body\", \"bbb\")), col);\n                totHits += col.getTotalHits();\n                totSearch++;\n              }\n              assertTrue(totSearch > 0 && totHits > 0);\n              netSearch.addAndGet(totSearch);\n            } catch (Exception exc) {\n              failed.set(true);\n              throw new RuntimeException(exc);\n            }\n          }\n        };\n      threads[threadID].setDaemon(true);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + \" threads did \" + netSearch.get() + \" searches\");\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}