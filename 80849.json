{"path":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"/dev/null","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>)doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields!=null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft==null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          val = useFieldObjects ? ft.toObject(f) : ft.toExternal(f);\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["754182f2def7aee06292f7daf04ebaceb970e931","03cb693488e836f3e46f447cbe746d114b1f6965","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03cb693488e836f3e46f447cbe746d114b1f6965","date":1226903649,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>)doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields!=null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft==null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            val = useFieldObjects ? ft.toObject(f) : ft.toExternal(f);\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \"+solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>)doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields!=null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft==null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          val = useFieldObjects ? ft.toObject(f) : ft.toExternal(f);\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":["754182f2def7aee06292f7daf04ebaceb970e931","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"754182f2def7aee06292f7daf04ebaceb970e931","date":1229276256,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>)doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields!=null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft==null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            val = useFieldObjects ? ft.toObject(f) : ft.toExternal(f);\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \"+solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132","03cb693488e836f3e46f447cbe746d114b1f6965"],"bugIntro":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85ca87358a22f3cf2fb4beb5247112bdf0ccac79","date":1259145276,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        FieldType ft = schema.getFieldTypeNoEx(fieldName);\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        solrDoc.addField(fieldName, val);\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n        String fieldName = f.name();\n        if (returnFields != null && !returnFields.contains(fieldName)) continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.binaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["85ca87358a22f3cf2fb4beb5247112bdf0ccac79"],"754182f2def7aee06292f7daf04ebaceb970e931":["03cb693488e836f3e46f447cbe746d114b1f6965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85ca87358a22f3cf2fb4beb5247112bdf0ccac79":["754182f2def7aee06292f7daf04ebaceb970e931"],"03cb693488e836f3e46f447cbe746d114b1f6965":["da0acfe5ceed804451d76c8f887855b3d060e132"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["03cb693488e836f3e46f447cbe746d114b1f6965"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"754182f2def7aee06292f7daf04ebaceb970e931":["85ca87358a22f3cf2fb4beb5247112bdf0ccac79"],"85ca87358a22f3cf2fb4beb5247112bdf0ccac79":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"03cb693488e836f3e46f447cbe746d114b1f6965":["754182f2def7aee06292f7daf04ebaceb970e931"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}