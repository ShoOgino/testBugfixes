{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","commits":[{"id":"10e189d8bfedacdd349fb0522782430967a57c10","date":1503662313,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    while (type == COMPLEX_POLYGON){\n      //We need to implement equals method\n      type = randomShapeType();\n    }\n\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4a0d40236508a9efc66c32d870fbf90ba0434","date":1503670045,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    while (type == COMPLEX_POLYGON){\n      //We need to implement equals method\n      type = randomShapeType();\n    }\n\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30ef78b2464af82222c21a3e4bf42476f483f567","date":1504104038,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc17dc53660d8859b336b5110d741adaf68686f6","date":1505134847,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape.toString(), shape, shapeCopy);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest#testRandomShapeCodec().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape.toString(), shape, shapeCopy);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void testRandomShapeCodec() throws IOException{\n    PlanetModel planetModel = randomPlanetModel();\n    int type = randomShapeType();\n    GeoShape shape = randomGeoShape(type, planetModel);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    SerializableObject.writeObject(outputStream, shape);\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n    SerializableObject shapeCopy = SerializableObject.readObject(planetModel, inputStream);\n    assertEquals(shape, shapeCopy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cc17dc53660d8859b336b5110d741adaf68686f6"],"10e189d8bfedacdd349fb0522782430967a57c10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30ef78b2464af82222c21a3e4bf42476f483f567"],"30ef78b2464af82222c21a3e4bf42476f483f567":["3bd4a0d40236508a9efc66c32d870fbf90ba0434"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc17dc53660d8859b336b5110d741adaf68686f6":["30ef78b2464af82222c21a3e4bf42476f483f567"],"3bd4a0d40236508a9efc66c32d870fbf90ba0434":["10e189d8bfedacdd349fb0522782430967a57c10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc17dc53660d8859b336b5110d741adaf68686f6"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"10e189d8bfedacdd349fb0522782430967a57c10":["3bd4a0d40236508a9efc66c32d870fbf90ba0434"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10e189d8bfedacdd349fb0522782430967a57c10","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"30ef78b2464af82222c21a3e4bf42476f483f567":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cc17dc53660d8859b336b5110d741adaf68686f6"],"cc17dc53660d8859b336b5110d741adaf68686f6":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bd4a0d40236508a9efc66c32d870fbf90ba0434":["30ef78b2464af82222c21a3e4bf42476f483f567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}