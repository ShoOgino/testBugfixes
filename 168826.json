{"path":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","commits":[{"id":"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0","date":1228157445,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  This implementation returns the given DocIdSet.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) {\n    return docIdSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a0b8ae4ac997de7adea27f34c380588fa28d646","date":1253188966,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  This implementation returns the given DocIdSet.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) {\n    return docIdSet;\n  }\n\n","bugFix":["cef18fc3088da45bfa252a5c18e2952d7e2f2dc0"],"bugIntro":["015578b2606eda0c576fd95beaea23e52b32da88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["cef18fc3088da45bfa252a5c18e2952d7e2f2dc0"]},"commit2Childs":{"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cef18fc3088da45bfa252a5c18e2952d7e2f2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}