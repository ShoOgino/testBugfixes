{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(int[],int,int).mjava","commits":[{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.setDeterministic(true);\n    State s = new State();\n    a.initial = s;\n    for (int i = offset; i < offset+length; i++) {\n      State s2 = new State();\n      s.addTransition(new Transition(word[i], s2));\n      s = s2;\n    }\n    s.accept = true;\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.setDeterministic(true);\n    State s = new State();\n    a.initial = s;\n    for (int i = offset; i < offset+length; i++) {\n      State s2 = new State();\n      s.addTransition(new Transition(word[i], s2));\n      s = s2;\n    }\n    s.accept = true;\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(int[],int,int).mjava","sourceNew":null,"sourceOld":"  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.setDeterministic(true);\n    State s = new State();\n    a.initial = s;\n    for (int i = offset; i < offset+length; i++) {\n      State s2 = new State();\n      s.addTransition(new Transition(word[i], s2));\n      s = s2;\n    }\n    s.accept = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(int[],int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finishState();\n\n    return a;\n  }\n\n","sourceOld":"  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.setDeterministic(true);\n    State s = new State();\n    a.initial = s;\n    for (int i = offset; i < offset+length; i++) {\n      State s2 = new State();\n      s.addTransition(new Transition(word[i], s2));\n      s = s2;\n    }\n    s.accept = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc41b743423981e7ec17a024ce7e107096e472fe"],"cc41b743423981e7ec17a024ce7e107096e472fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"5c84485629d80d203608e8975a1139de9933cc38":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"cc41b743423981e7ec17a024ce7e107096e472fe":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}