{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,LBHttpSolrServer,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   */\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbServer\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrServer(String) for full description and details on zkHost\n   */\n  public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbServer = lbServer;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   */\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   */\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.lbClient = lbClient;\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.lbClient = lbClient;\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.zkHost = zkHost;\n    this.lbClient = lbClient;\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.lbClient = lbClient;\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.lbClient = lbClient;\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param zkHost\n   *          A zookeeper client endpoint.\n   * @param lbClient\n   *          LBHttpSolrServer instance for requests.\n   * @param updatesToLeaders\n   *          If true, sends updates only to shard leaders.\n   * @see #CloudSolrClient(String) for full description and details on zkHost\n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost, LBHttpSolrClient lbClient, boolean updatesToLeaders) {\n    this.lbClient = lbClient;\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n    this.updatesToLeaders = updatesToLeaders;\n    this.directUpdatesToLeadersOnly = false;\n    shutdownLBHttpSolrServer = false;\n    this.clientIsInternal = false;\n    lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3eaeb36333664e8cb92108ef03f68a7b90beb759","63a1978c6710c767fa084741e3d6424840003a62"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"63a1978c6710c767fa084741e3d6424840003a62":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bafca15d8e408346a67f4282ad1143b88023893b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["3eaeb36333664e8cb92108ef03f68a7b90beb759","63a1978c6710c767fa084741e3d6424840003a62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["291857aeee5ec20518ddce131ac4362c0075ebe1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bafca15d8e408346a67f4282ad1143b88023893b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}