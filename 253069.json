{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/en/TestPorterStemFilter#testPorterStemFilter().mjava","commits":[{"id":"689f35bd9818b47b8d9fe96cf06518228e949ab6","date":1272894884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/en/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/en/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/en/TestPorterStemFilter#testPorterStemFilter().mjava","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}