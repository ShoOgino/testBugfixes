{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","commits":[{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.docValues(field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = r.docValues(field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          slice.docValues = new EmptyDocValues(slice.length, promotedType[0].type());\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7a8d0f96da38c94771f9de417b09a2c0c5b51ecf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.docValues(field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = r.docValues(field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          slice.docValues = new EmptyDocValues(slice.length, promotedType[0].type());\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a8d0f96da38c94771f9de417b09a2c0c5b51ecf","date":1323867092,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.docValues(field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = r.docValues(field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.docValues(field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = r.docValues(field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          slice.docValues = new EmptyDocValues(slice.length, promotedType[0].type());\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    return getDocValues(r, field, DEFAULT_PULLER);\n  }\n\n","sourceOld":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.docValues(field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = r.docValues(field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    return getDocValues(r, field, DEFAULT_PULLER);\n  }\n\n","sourceOld":"  /**\n   * Returns a single {@link DocValues} instance for this field, merging\n   * their values on the fly.\n   * \n   * <p>\n   * <b>NOTE</b>: this is a slow way to access DocValues. It's better to get the\n   * sub-readers (using {@link Gather}) and iterate through them yourself.\n   */\n  public static DocValues getDocValues(IndexReader r, final String field) throws IOException {\n    return getDocValues(r, field, DEFAULT_PULLER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a8d0f96da38c94771f9de417b09a2c0c5b51ecf":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["7a8d0f96da38c94771f9de417b09a2c0c5b51ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cac4d5fa6c305b94f6232a70bda07f096ad0348c"]},"commit2Childs":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"7a8d0f96da38c94771f9de417b09a2c0c5b51ecf":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cac4d5fa6c305b94f6232a70bda07f096ad0348c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7a8d0f96da38c94771f9de417b09a2c0c5b51ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}