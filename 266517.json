{"path":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"d211216c83f01894810543d1c107160a9ae3650b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}