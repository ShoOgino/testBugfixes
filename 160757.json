{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocCount().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void xxxtestDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void xxxtestDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}