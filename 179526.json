{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}