{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"      void add( Query query, IndexReader reader ) throws IOException {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) throws IOException {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) throws IOException {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":["b77dee084743b07be452cf7c07c992a225b11146"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) throws IOException {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n\n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n\n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc","date":1377013503,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n        \n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n\n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n        \n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n\n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"    void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        final Term[] terms = pq.getTerms();\n        final int[] positions = pq.getPositions();\n        new InPlaceMergeSorter() {\n\n          @Override\n          protected void swap(int i, int j) {\n            Term tmpTerm = terms[i];\n            terms[i] = terms[j];\n            terms[j] = tmpTerm;\n\n            int tmpPos = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmpPos;\n          }\n\n          @Override\n          protected int compare(int i, int j) {\n            return positions[i] - positions[j];\n          }\n        }.sort(0, terms.length);\n        \n        addToMap(pq, terms, positions, 0, subMap, pq.getSlop());\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#add(Query,IndexReader).mjava","sourceNew":"    void add( Query query, IndexReader reader ) {\n      float boost = 1f;\n      while (query instanceof BoostQuery) {\n        BoostQuery bq = (BoostQuery) query;\n        query = bq.getQuery();\n        boost = bq.getBoost();\n      }\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), boost );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), boost );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","sourceOld":"      void add( Query query, IndexReader reader ) {\n      if( query instanceof TermQuery ){\n        addTerm( ((TermQuery)query).getTerm(), query.getBoost() );\n      }\n      else if( query instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)query;\n        Term[] terms = pq.getTerms();\n        Map<String, QueryPhraseMap> map = subMap;\n        QueryPhraseMap qpm = null;\n        for( Term term : terms ){\n          qpm = getOrNewMap( map, term.text() );\n          map = qpm.subMap;\n        }\n        qpm.markTerminal( pq.getSlop(), pq.getBoost() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}