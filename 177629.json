{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","sourceNew":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (++count > maxExpansions) {\n        throw new IllegalStateException(\"Automaton [\" + this.pattern + \"] expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","sourceOld":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (++count > maxExpansions) {\n        throw new IllegalStateException(\"Automaton [\" + this.pattern + \"] expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}