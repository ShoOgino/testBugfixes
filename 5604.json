{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle)) {\n      throw new InvalidShapeException(\"A rectangle is the only supported shape (so far), not \"+shape.getClass());//TODO\n    }\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle)) {\n      throw new InvalidShapeException(\"A rectangle is the only supported shape (so far), not \"+shape.getClass());//TODO\n    }\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83dbba2dcd082d1dc6969ee6a37f3a550186b9f2","date":1340851911,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle)) {\n      throw new InvalidShapeException(\"A rectangle is the only supported shape (so far), not \"+shape.getClass());//TODO\n    }\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","5603541bcfd1a31bb2ebe1bbd592536265a1a5eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle)) {\n      throw new InvalidShapeException(\"A rectangle is the only supported shape (so far), not \"+shape.getClass());//TODO\n    }\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["83dbba2dcd082d1dc6969ee6a37f3a550186b9f2"],"83dbba2dcd082d1dc6969ee6a37f3a550186b9f2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83dbba2dcd082d1dc6969ee6a37f3a550186b9f2":["0415a016b37e58a017fed0a91234f733ab359971"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["83dbba2dcd082d1dc6969ee6a37f3a550186b9f2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}