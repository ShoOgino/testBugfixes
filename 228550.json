{"path":"src/java/org/apache/lucene/search/TermScorer#score().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  public float score() throws IOException {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE\t\t\t  // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f314029fc991d70f9c6a7fd0b01f36da98c1c32","date":1091823553,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE\t\t\t  // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","sourceOld":"  public float score() throws IOException {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE\t\t\t  // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88","date":1095875760,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","sourceOld":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE\t\t\t  // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","sourceOld":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * Similarity.decodeNorm(norms[doc]); // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","sourceOld":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","sourceOld":"  public float score() {\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  @Override\n  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","sourceOld":"  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  @Override\n  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[doc]); // normalize for field\n  }\n\n","sourceOld":"  @Override\n  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * SIM_NORM_DECODER[norms[doc] & 0xFF]; // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score().mjava","sourceNew":"  @Override\n  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[doc]); // normalize for field\n  }\n\n","sourceOld":"  @Override\n  public float score() {\n    assert doc != -1;\n    int f = freqs[pointer];\n    float raw =                                   // compute tf(f)*weight\n      f < SCORE_CACHE_SIZE                        // check cache\n      ? scoreCache[f]                             // cache hit\n      : getSimilarity().tf(f)*weightValue;        // cache miss\n\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[doc]); // normalize for field\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"30a558487f2298c2c19ceca9103c1b6865d64708":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["30a558487f2298c2c19ceca9103c1b6865d64708"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"15c469602973ef1a33c9a07367a380d278ffab20":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}