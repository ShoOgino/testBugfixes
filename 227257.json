{"path":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","commits":[{"id":"395739dbd66c14f341e2c5ecd7a437788c683c44","date":1094245942,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped, i.e. preceded by a <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // NOTE: keep this in sync with _ESCAPED_CHAR below!\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6","aab4f145483c030426d905ddf07c3eac83346d22"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d","date":1097573772,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // NOTE: keep this in sync with _ESCAPED_CHAR below!\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped, i.e. preceded by a <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // NOTE: keep this in sync with _ESCAPED_CHAR below!\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6","date":1173325032,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // NOTE: keep this in sync with _ESCAPED_CHAR below!\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["395739dbd66c14f341e2c5ecd7a437788c683c44"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aab4f145483c030426d905ddf07c3eac83346d22","date":1179896078,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["395739dbd66c14f341e2c5ecd7a437788c683c44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that QueryParser\n   * expects to be escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["395739dbd66c14f341e2c5ecd7a437788c683c44"],"395739dbd66c14f341e2c5ecd7a437788c683c44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aab4f145483c030426d905ddf07c3eac83346d22":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["aab4f145483c030426d905ddf07c3eac83346d22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6":["aab4f145483c030426d905ddf07c3eac83346d22"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6"],"395739dbd66c14f341e2c5ecd7a437788c683c44":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["395739dbd66c14f341e2c5ecd7a437788c683c44"],"aab4f145483c030426d905ddf07c3eac83346d22":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}