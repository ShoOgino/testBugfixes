{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#cacheDocSet(Query,DocSet,boolean).mjava","sourceNew":"  /**\n   * Compute and cache the DocSet that matches a query. The normal usage is expected to be cacheDocSet(myQuery,\n   * null,false) meaning that Solr will determine if the Query warrants caching, and if so, will compute the DocSet that\n   * matches the Query and cache it. If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified after this call.\n   *\n   * @param query\n   *          the lucene query that will act as the key\n   * @param optionalAnswer\n   *          the DocSet to be cached - if null, it will be computed.\n   * @param mustCache\n   *          if true, a best effort will be made to cache this entry. if false, heuristics may be used to determine if\n   *          it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache != null) {\n        filterCache.put(query, optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found. If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","sourceOld":"  /**\n   * Compute and cache the DocSet that matches a query.\n   * The normal usage is expected to be cacheDocSet(myQuery, null,false)\n   * meaning that Solr will determine if the Query warrants caching, and\n   * if so, will compute the DocSet that matches the Query and cache it.\n   * If the answer to the query is already cached, nothing further will be done.\n   * <p>\n   * If the optionalAnswer DocSet is provided, it should *not* be modified\n   * after this call.\n   *\n   * @param query           the lucene query that will act as the key\n   * @param optionalAnswer   the DocSet to be cached - if null, it will be computed.\n   * @param mustCache        if true, a best effort will be made to cache this entry.\n   *                         if false, heuristics may be used to determine if it should be cached.\n   */\n  public void cacheDocSet(Query query, DocSet optionalAnswer, boolean mustCache) throws IOException {\n    // Even if the cache is null, still compute the DocSet as it may serve to warm the Lucene\n    // or OS disk cache.\n    if (optionalAnswer != null) {\n      if (filterCache!=null) {\n        filterCache.put(query,optionalAnswer);\n      }\n      return;\n    }\n\n    // Throw away the result, relying on the fact that getDocSet\n    // will currently always cache what it found.  If getDocSet() starts\n    // using heuristics about what to cache, and mustCache==true, (or if we\n    // want this method to start using heuristics too) then\n    // this needs to change.\n    getDocSet(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}