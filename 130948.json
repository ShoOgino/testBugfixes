{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","sourceNew":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, 0, centerLon);\n    }\n    return GeoDistanceUtils.haversin(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","sourceOld":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, 0, centerLon);\n    }\n    return GeoDistanceUtils.haversin(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","sourceNew":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, 0, centerLon);\n    }\n    return GeoDistanceUtils.haversin(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","sourceOld":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, 0, centerLon);\n    }\n    return GeoDistanceUtils.haversin(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","sourceNew":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, 0, centerLon);\n    }\n    return SloppyMath.haversinMeters(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","sourceOld":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, 0, centerLon);\n    }\n    return GeoDistanceUtils.haversin(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","sourceNew":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLat, final double centerLon) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, 0, centerLon);\n    }\n    return SloppyMath.haversinMeters(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","sourceOld":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLon, final double centerLat) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, 0, centerLon);\n    }\n    return SloppyMath.haversinMeters(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#maxRadialDistanceMeters(double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns the maximum distance/radius (in meters) from the point 'center' before overlapping */\n  public static double maxRadialDistanceMeters(final double centerLat, final double centerLon) {\n    if (Math.abs(centerLat) == GeoUtils.MAX_LAT_INCL) {\n      return SloppyMath.haversinMeters(centerLat, centerLon, 0, centerLon);\n    }\n    return SloppyMath.haversinMeters(centerLat, centerLon, centerLat, (GeoUtils.MAX_LON_INCL + centerLon) % 360);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d6c59bc551f4e523ce6a321280cc6733424fb824":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}