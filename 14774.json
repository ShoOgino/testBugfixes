{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"7dd022425b44cc560e45113a101ea40b06825d86","date":1108825489,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a1d441aebbbc08d78769b753795e0d44163a3a","date":1119995027,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null)\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"654038228db838218b2f5a2a02df4f6ed01ec154","date":1121886703,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    return getFieldQuery(field, queryText, 0);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null)\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985","date":1262018769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    return getFieldQuery(field, queryText, 0);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    return getFieldQuery(field, queryText, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    return getFieldQuery(field, queryText, 0);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    return getFieldQuery(field, queryText, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dd022425b44cc560e45113a101ea40b06825d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"654038228db838218b2f5a2a02df4f6ed01ec154":["c8a1d441aebbbc08d78769b753795e0d44163a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a1d441aebbbc08d78769b753795e0d44163a3a":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["654038228db838218b2f5a2a02df4f6ed01ec154"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["7dd022425b44cc560e45113a101ea40b06825d86"]},"commit2Childs":{"7dd022425b44cc560e45113a101ea40b06825d86":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd022425b44cc560e45113a101ea40b06825d86"],"654038228db838218b2f5a2a02df4f6ed01ec154":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"c8a1d441aebbbc08d78769b753795e0d44163a3a":["654038228db838218b2f5a2a02df4f6ed01ec154"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["c8a1d441aebbbc08d78769b753795e0d44163a3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}