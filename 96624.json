{"path":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final FixedBitSetIterator iter = new FixedBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final FixedBitSetIterator iter = new FixedBitSetIterator(bits, 0L); // cost is not useful here\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final FixedBitSetIterator iter = new FixedBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final BitSetIterator iter = new BitSetIterator(bits, 0L); // cost is not useful here\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final FixedBitSetIterator iter = new FixedBitSetIterator(bits, 0L); // cost is not useful here\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final BitSetIterator iter = new BitSetIterator(bits, 0L); // cost is not useful here\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  @Override\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final BitSetIterator iter = new BitSetIterator(bits, 0L); // cost is not useful here\n      private int pos = iter.nextDoc();\n      @Override\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      @Override\n      public Integer next() {\n        return nextDoc();\n      }\n\n      @Override\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      @Override\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      @Override\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":["21400778a0bf704d187a4848279049f5d90276c8","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["80c55596a764e2d397e982828e75fcac5ce430a0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}