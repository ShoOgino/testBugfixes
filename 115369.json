{"path":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    simProviders = new ArrayList<SimilarityProvider>();\n    simProviders.add(new BasicSimilarityProvider(new DefaultSimilarity()));\n    simProviders.add(new BasicSimilarityProvider(new BM25Similarity()));\n    // TODO: not great that we dup this all with TestSimilarityBase\n    for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {\n      for (AfterEffect afterEffect : TestSimilarityBase.AFTER_EFFECTS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          simProviders.add(new BasicSimilarityProvider(new DFRSimilarity(basicModel, afterEffect, normalization)));\n        }\n      }\n    }\n    for (Distribution distribution : TestSimilarityBase.DISTRIBUTIONS) {\n      for (Lambda lambda : TestSimilarityBase.LAMBDAS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          simProviders.add(new BasicSimilarityProvider(new IBSimilarity(distribution, lambda, normalization)));\n        }\n      }\n    }\n    simProviders.add(new BasicSimilarityProvider(new LMDirichletSimilarity()));\n    simProviders.add(new BasicSimilarityProvider(new LMJelinekMercerSimilarity(0.1f)));\n    simProviders.add(new BasicSimilarityProvider(new LMJelinekMercerSimilarity(0.7f)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    sims = new ArrayList<Similarity>();\n    sims.add(new DefaultSimilarity());\n    sims.add(new BM25Similarity());\n    // TODO: not great that we dup this all with TestSimilarityBase\n    for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {\n      for (AfterEffect afterEffect : TestSimilarityBase.AFTER_EFFECTS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : TestSimilarityBase.DISTRIBUTIONS) {\n      for (Lambda lambda : TestSimilarityBase.LAMBDAS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    simProviders = new ArrayList<SimilarityProvider>();\n    simProviders.add(new BasicSimilarityProvider(new DefaultSimilarity()));\n    simProviders.add(new BasicSimilarityProvider(new BM25Similarity()));\n    // TODO: not great that we dup this all with TestSimilarityBase\n    for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {\n      for (AfterEffect afterEffect : TestSimilarityBase.AFTER_EFFECTS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          simProviders.add(new BasicSimilarityProvider(new DFRSimilarity(basicModel, afterEffect, normalization)));\n        }\n      }\n    }\n    for (Distribution distribution : TestSimilarityBase.DISTRIBUTIONS) {\n      for (Lambda lambda : TestSimilarityBase.LAMBDAS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          simProviders.add(new BasicSimilarityProvider(new IBSimilarity(distribution, lambda, normalization)));\n        }\n      }\n    }\n    simProviders.add(new BasicSimilarityProvider(new LMDirichletSimilarity()));\n    simProviders.add(new BasicSimilarityProvider(new LMJelinekMercerSimilarity(0.1f)));\n    simProviders.add(new BasicSimilarityProvider(new LMJelinekMercerSimilarity(0.7f)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    sims = new ArrayList<Similarity>();\n    sims.add(new DefaultSimilarity());\n    sims.add(new BM25Similarity());\n    // TODO: not great that we dup this all with TestSimilarityBase\n    for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {\n      for (AfterEffect afterEffect : TestSimilarityBase.AFTER_EFFECTS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : TestSimilarityBase.DISTRIBUTIONS) {\n      for (Lambda lambda : TestSimilarityBase.LAMBDAS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    sims = new ArrayList<Similarity>();\n    sims.add(new DefaultSimilarity());\n    sims.add(new BM25Similarity());\n    // TODO: not great that we dup this all with TestSimilarityBase\n    for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {\n      for (AfterEffect afterEffect : TestSimilarityBase.AFTER_EFFECTS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : TestSimilarityBase.DISTRIBUTIONS) {\n      for (Lambda lambda : TestSimilarityBase.LAMBDAS) {\n        for (Normalization normalization : TestSimilarityBase.NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}