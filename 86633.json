{"path":"lucene/facet/src/test/org/apache/lucene/facet/params/CategoryListParamsTest#testIdentityConsistency().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/params/CategoryListParamsTest#testIdentityConsistency().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/CategoryListParamsTest#testIdentityConsistency().mjava","sourceNew":"  /**\n   * Test that CategoryListParams behave correctly when compared against each\n   * other.\n   */\n  @Test\n  public void testIdentityConsistency() {\n    // Test 2 CategoryListParams with the default parameter\n    CategoryListParams clParams1 = new CategoryListParams();\n    CategoryListParams clParams2 = new CategoryListParams();\n    assertEquals(\n        \"2 CategoryListParams with the same default term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same default term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n\n    // Test 2 CategoryListParams with the same specified Term\n    clParams1 = new CategoryListParams(\"test\");\n    clParams2 = new CategoryListParams(\"test\");\n    assertEquals(\n        \"2 CategoryListParams with the same term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n    \n    // Test 2 CategoryListParams with DIFFERENT terms\n    clParams1 = new CategoryListParams(\"test1\");\n    clParams2 = new CategoryListParams(\"test2\");\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT equal each other.\",\n        clParams1.equals(clParams2));\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT have the same hashcode.\",\n        clParams1.hashCode() == clParams2.hashCode());\n  }\n\n","sourceOld":"  /**\n   * Test that CategoryListParams behave correctly when compared against each\n   * other.\n   */\n  @Test\n  public void testIdentityConsistency() {\n    // Test 2 CategoryListParams with the default parameter\n    CategoryListParams clParams1 = new CategoryListParams();\n    CategoryListParams clParams2 = new CategoryListParams();\n    assertEquals(\n        \"2 CategoryListParams with the same default term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same default term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n\n    // Test 2 CategoryListParams with the same specified Term\n    clParams1 = new CategoryListParams(\"test\");\n    clParams2 = new CategoryListParams(\"test\");\n    assertEquals(\n        \"2 CategoryListParams with the same term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n    \n    // Test 2 CategoryListParams with DIFFERENT terms\n    clParams1 = new CategoryListParams(\"test1\");\n    clParams2 = new CategoryListParams(\"test2\");\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT equal each other.\",\n        clParams1.equals(clParams2));\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT have the same hashcode.\",\n        clParams1.hashCode() == clParams2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/CategoryListParamsTest#testIdentityConsistency().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that CategoryListParams behave correctly when compared against each\n   * other.\n   */\n  @Test\n  public void testIdentityConsistency() {\n    // Test 2 CategoryListParams with the default parameter\n    CategoryListParams clParams1 = new CategoryListParams();\n    CategoryListParams clParams2 = new CategoryListParams();\n    assertEquals(\n        \"2 CategoryListParams with the same default term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same default term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n\n    // Test 2 CategoryListParams with the same specified Term\n    clParams1 = new CategoryListParams(\"test\");\n    clParams2 = new CategoryListParams(\"test\");\n    assertEquals(\n        \"2 CategoryListParams with the same term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n    \n    // Test 2 CategoryListParams with DIFFERENT terms\n    clParams1 = new CategoryListParams(\"test1\");\n    clParams2 = new CategoryListParams(\"test2\");\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT equal each other.\",\n        clParams1.equals(clParams2));\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT have the same hashcode.\",\n        clParams1.hashCode() == clParams2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/CategoryListParamsTest#testIdentityConsistency().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that CategoryListParams behave correctly when compared against each\n   * other.\n   */\n  @Test\n  public void testIdentityConsistency() {\n    // Test 2 CategoryListParams with the default parameter\n    CategoryListParams clParams1 = new CategoryListParams();\n    CategoryListParams clParams2 = new CategoryListParams();\n    assertEquals(\n        \"2 CategoryListParams with the same default term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same default term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n\n    // Test 2 CategoryListParams with the same specified Term\n    clParams1 = new CategoryListParams(\"test\");\n    clParams2 = new CategoryListParams(\"test\");\n    assertEquals(\n        \"2 CategoryListParams with the same term should equal each other.\",\n        clParams1, clParams2);\n    assertEquals(\"2 CategoryListParams with the same term should have the same hashcode\",\n        clParams1.hashCode(), clParams2.hashCode());\n    \n    // Test 2 CategoryListParams with DIFFERENT terms\n    clParams1 = new CategoryListParams(\"test1\");\n    clParams2 = new CategoryListParams(\"test2\");\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT equal each other.\",\n        clParams1.equals(clParams2));\n    assertFalse(\n        \"2 CategoryListParams with the different terms should NOT have the same hashcode.\",\n        clParams1.hashCode() == clParams2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}