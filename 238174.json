{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"SpanPayloadCheckQuery(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"SpanPayloadCheckQuery(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}