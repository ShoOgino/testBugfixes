{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(IndexReader.AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader.AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      DocIdSet readerSet = filter.getDocIdSet(context);\n      if (readerSet == null) readerSet=DocIdSet.EMPTY_DOCIDSET;\n      return new JoinScorer(this, readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}