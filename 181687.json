{"path":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}