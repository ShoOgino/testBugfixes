{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if ((ax == bx && ay == by)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, cx, cy);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b203145cb170e8524d267fe0809f50c8431538ca","date":1571203245,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, bx, by, cx, cy);\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, cx, cy, ax, ay);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if ((ax == bx && ay == by)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, cx, cy);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, bx, by, cx, cy);\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, cx, cy, ax, ay);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, bx, by, cx, cy);\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, cx, cy, ax, ay);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b203145cb170e8524d267fe0809f50c8431538ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b203145cb170e8524d267fe0809f50c8431538ca":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b203145cb170e8524d267fe0809f50c8431538ca"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["b203145cb170e8524d267fe0809f50c8431538ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b203145cb170e8524d267fe0809f50c8431538ca":["c568a1e2a5125c2245150eebb030a81baa158b31","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}