{"path":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"/dev/null","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    // OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d","date":1149992318,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    // OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280ae26026909c359d527e517864805ec8982963","date":1149994510,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    // System.out.println(\"b1=\"+b1+\", b2=\"+b2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet a1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet a2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet b1 = getDocSet(a1);\n    DocSet b2 = getDocSet(a2);\n\n    // System.out.println(\"b1=\"+b1+\", b2=\"+b2);\n\n    assertEquals((int)a1.cardinality(), b1.size());\n    assertEquals((int)a2.cardinality(), b2.size());\n\n    checkEqual(a1,b1);\n    checkEqual(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet)a1.clone(); a_and.and(a2);\n    OpenBitSet a_or = (OpenBitSet)a1.clone(); a_or.or(a2);\n    // OpenBitSet a_xor = (OpenBitSet)a1.clone(); a_xor.xor(a2);\n    OpenBitSet a_andn = (OpenBitSet)a1.clone(); a_andn.andNot(a2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"280ae26026909c359d527e517864805ec8982963":["29ea7f1003fb19ce1e61f6d9c237c47c04f0070d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["280ae26026909c359d527e517864805ec8982963"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d":["21400778a0bf704d187a4848279049f5d90276c8"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["29ea7f1003fb19ce1e61f6d9c237c47c04f0070d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"280ae26026909c359d527e517864805ec8982963":["30391436869a41b74d4ba7098c40d955b686a10c"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"29ea7f1003fb19ce1e61f6d9c237c47c04f0070d":["280ae26026909c359d527e517864805ec8982963"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}