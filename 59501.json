{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger.IndexSizeEvent#IndexSizeEvent(String,long,List[Op],Map[String,List[Replica]],Map[String,List[Replica]]).mjava","commits":[{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger.IndexSizeEvent#IndexSizeEvent(String,long,List[Op],Map[String,List[Replica]],Map[String,List[Replica]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger.IndexSizeEvent#IndexSizeEvent(String,long,List[Op],Map[String,List[ReplicaInfo]],Map[String,List[ReplicaInfo]]).mjava","sourceNew":"    public IndexSizeEvent(String source, long eventTime, List<Op> ops, Map<String, List<Replica>> aboveSize,\n                          Map<String, List<Replica>> belowSize) {\n      super(TriggerEventType.INDEXSIZE, source, eventTime, null);\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n      // avoid passing very large amounts of data here - just use replica names\n      TreeMap<String, String> above = new TreeMap<>();\n      aboveSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> above.put(r.getCoreName(), \"docs=\" + r.get(DOCS_SIZE_KEY) + \", bytes=\" + r.get(BYTES_SIZE_KEY))));\n      properties.put(ABOVE_SIZE_KEY, above);\n      TreeMap<String, String> below = new TreeMap<>();\n      belowSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> below.put(r.getCoreName(), \"docs=\" + r.get(DOCS_SIZE_KEY) + \", bytes=\" + r.get(BYTES_SIZE_KEY))));\n      properties.put(BELOW_SIZE_KEY, below);\n    }\n\n","sourceOld":"    public IndexSizeEvent(String source, long eventTime, List<Op> ops, Map<String, List<ReplicaInfo>> aboveSize,\n                          Map<String, List<ReplicaInfo>> belowSize) {\n      super(TriggerEventType.INDEXSIZE, source, eventTime, null);\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n      // avoid passing very large amounts of data here - just use replica names\n      TreeMap<String, String> above = new TreeMap<>();\n      aboveSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> above.put(r.getCore(), \"docs=\" + r.getVariable(DOCS_SIZE_KEY) + \", bytes=\" + r.getVariable(BYTES_SIZE_KEY))));\n      properties.put(ABOVE_SIZE_KEY, above);\n      TreeMap<String, String> below = new TreeMap<>();\n      belowSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> below.put(r.getCore(), \"docs=\" + r.getVariable(DOCS_SIZE_KEY) + \", bytes=\" + r.getVariable(BYTES_SIZE_KEY))));\n      properties.put(BELOW_SIZE_KEY, below);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger.IndexSizeEvent#IndexSizeEvent(String,long,List[Op],Map[String,List[Replica]],Map[String,List[Replica]]).mjava","sourceNew":null,"sourceOld":"    public IndexSizeEvent(String source, long eventTime, List<Op> ops, Map<String, List<Replica>> aboveSize,\n                          Map<String, List<Replica>> belowSize) {\n      super(TriggerEventType.INDEXSIZE, source, eventTime, null);\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n      // avoid passing very large amounts of data here - just use replica names\n      TreeMap<String, String> above = new TreeMap<>();\n      aboveSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> above.put(r.getCoreName(), \"docs=\" + r.get(DOCS_SIZE_KEY) + \", bytes=\" + r.get(BYTES_SIZE_KEY))));\n      properties.put(ABOVE_SIZE_KEY, above);\n      TreeMap<String, String> below = new TreeMap<>();\n      belowSize.forEach((coll, replicas) ->\n          replicas.forEach(r -> below.put(r.getCoreName(), \"docs=\" + r.get(DOCS_SIZE_KEY) + \", bytes=\" + r.get(BYTES_SIZE_KEY))));\n      properties.put(BELOW_SIZE_KEY, below);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}