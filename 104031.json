{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastEndOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastEndOffset:\n            readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaLBuffer);\n            readBlock(payIn, encoded, encodedBuffer, offsetLengthLBuffer);\n            for(int i=0;i<blockSize;i++) {\n              lastEndOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastEndOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      lastEndOffset = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaLBuffer);\n            readBlock(payIn, encoded, encodedBuffer, offsetLengthLBuffer);\n            for(int i=0;i<blockSize;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastEndOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastEndOffset:\n            readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaLBuffer);\n            readBlock(payIn, encoded, encodedBuffer, offsetLengthLBuffer);\n            for(int i=0;i<blockSize;i++) {\n              lastEndOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastEndOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      lastEndOffset = 0;\n    }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          ForUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            ForUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            ForUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            ForUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n            for(int i=0;i<BLOCK_SIZE;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      // nocommit why carefully sum up lastStartOffset above\n      // only to set it to 0 now?\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaLBuffer);\n            readBlock(payIn, encoded, encodedBuffer, offsetLengthLBuffer);\n            for(int i=0;i<blockSize;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n            for(int i=0;i<BLOCK_SIZE;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      // nocommit why carefully sum up lastStartOffset above\n      // only to set it to 0 now?\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          ForUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            ForUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            ForUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            ForUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n            for(int i=0;i<BLOCK_SIZE;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      // nocommit why carefully sum up lastStartOffset above\n      // only to set it to 0 now?\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#skipPositions().mjava","sourceNew":null,"sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            // Must load offset blocks merely to sum\n            // up into lastStartOffset:\n            forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n            for(int i=0;i<BLOCK_SIZE;i++) {\n              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];\n            }\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          if (indexHasOffsets) {\n            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n      payloadLength = 0;\n      // nocommit why carefully sum up lastStartOffset above\n      // only to set it to 0 now?\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}