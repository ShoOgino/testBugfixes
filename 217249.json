{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","commits":[{"id":"e7ef4ab6a073abae174e7995504ac5e3dc402cb6","date":1350790289,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory#create(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","sourceOld":"  @Override\n  public Lookup create(NamedList params, SolrCore core) {\n    // mandatory parameter\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    // optional parameters\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7ef4ab6a073abae174e7995504ac5e3dc402cb6"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["7f2e96099703c24c0c63d27806ba7020626b649b"],"7f2e96099703c24c0c63d27806ba7020626b649b":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d4e0095ef720d1b8e7406847147af69f19af3ab6","7f2e96099703c24c0c63d27806ba7020626b649b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e7ef4ab6a073abae174e7995504ac5e3dc402cb6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"08970e5b8411182a29412c177eff67ec1110095b":["e7ef4ab6a073abae174e7995504ac5e3dc402cb6"]},"commit2Childs":{"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62e52115b56781006682fd92c6938efaf174304d","e7ef4ab6a073abae174e7995504ac5e3dc402cb6"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"7f2e96099703c24c0c63d27806ba7020626b649b":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"e7ef4ab6a073abae174e7995504ac5e3dc402cb6":["62e52115b56781006682fd92c6938efaf174304d","08970e5b8411182a29412c177eff67ec1110095b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"08970e5b8411182a29412c177eff67ec1110095b":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}