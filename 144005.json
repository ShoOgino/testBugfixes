{"path":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDocs(Directory,boolean).mjava","commits":[{"id":"433777d1eaf9998136cd16515dc0e1eb26f5d535","date":1273839120,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDocs(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void populateDocs(Directory dir, boolean multipleCommits)\n      throws IOException {\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    TokenStream payloadTS1 = new PayloadTokenStream(\"p1\");\n    TokenStream payloadTS2 = new PayloadTokenStream(\"p2\");\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"doc\" + i, Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"content\", \"doc content \" + i, Store.NO, Index.ANALYZED));\n      doc.add(new Field(\"p\", payloadTS1));\n      doc.add(new Field(\"p\", payloadTS2));\n      writer.addDocument(doc);\n      if (multipleCommits && (i % 4 == 0)) {\n        writer.commit();\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDocs(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDocs(Directory,boolean).mjava","sourceNew":"  private void populateDocs(Random random, Directory dir, boolean multipleCommits)\n      throws IOException {\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    TokenStream payloadTS1 = new PayloadTokenStream(\"p1\");\n    TokenStream payloadTS2 = new PayloadTokenStream(\"p2\");\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"doc\" + i, Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"content\", \"doc content \" + i, Store.NO, Index.ANALYZED));\n      doc.add(new Field(\"p\", payloadTS1));\n      doc.add(new Field(\"p\", payloadTS2));\n      writer.addDocument(doc);\n      if (multipleCommits && (i % 4 == 0)) {\n        writer.commit();\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void populateDocs(Directory dir, boolean multipleCommits)\n      throws IOException {\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    TokenStream payloadTS1 = new PayloadTokenStream(\"p1\");\n    TokenStream payloadTS2 = new PayloadTokenStream(\"p2\");\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"doc\" + i, Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"content\", \"doc content \" + i, Store.NO, Index.ANALYZED));\n      doc.add(new Field(\"p\", payloadTS1));\n      doc.add(new Field(\"p\", payloadTS2));\n      writer.addDocument(doc);\n      if (multipleCommits && (i % 4 == 0)) {\n        writer.commit();\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#populateDocs(Directory,boolean).mjava","sourceNew":null,"sourceOld":"  private void populateDocs(Directory dir, boolean multipleCommits)\n      throws IOException {\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    TokenStream payloadTS1 = new PayloadTokenStream(\"p1\");\n    TokenStream payloadTS2 = new PayloadTokenStream(\"p2\");\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"doc\" + i, Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"content\", \"doc content \" + i, Store.NO, Index.ANALYZED));\n      doc.add(new Field(\"p\", payloadTS1));\n      doc.add(new Field(\"p\", payloadTS2));\n      writer.addDocument(doc);\n      if (multipleCommits && (i % 4 == 0)) {\n        writer.commit();\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["433777d1eaf9998136cd16515dc0e1eb26f5d535","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}