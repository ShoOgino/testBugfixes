{"path":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#getRandomRange(int,String).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#getRandomRange(int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a random range. It's guaranteed that the first\n   * number will be lower than the second, and both of them\n   * between 0 (inclusive) and <code>max</code> (exclusive).\n   * If the fieldName is \"test_s_dv\" or \"test_ss_dv\" (the\n   * two fields used for Strings), the comparison will be done\n   * alphabetically\n   */\n  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (\"test_s_dv\".equals(fieldName) || \"test_ss_dv\".equals(fieldName)) {\n      Arrays.sort(values, new Comparator<Integer>() {\n\n        @Override\n        public int compare(Integer o1, Integer o2) {\n          return String.valueOf(o1).compareTo(String.valueOf(o2));\n        }\n      });\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#getRandomRange(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#getRandomRange(int,String).mjava","sourceNew":"  /**\n   * Returns a random range. It's guaranteed that the first\n   * number will be lower than the second, and both of them\n   * between 0 (inclusive) and <code>max</code> (exclusive).\n   * If the fieldName is \"test_s_dv\" or \"test_ss_dv\" (the\n   * two fields used for Strings), the comparison will be done\n   * alphabetically\n   */\n  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (\"test_s_dv\".equals(fieldName) || \"test_ss_dv\".equals(fieldName)) {\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Returns a random range. It's guaranteed that the first\n   * number will be lower than the second, and both of them\n   * between 0 (inclusive) and <code>max</code> (exclusive).\n   * If the fieldName is \"test_s_dv\" or \"test_ss_dv\" (the\n   * two fields used for Strings), the comparison will be done\n   * alphabetically\n   */\n  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (\"test_s_dv\".equals(fieldName) || \"test_ss_dv\".equals(fieldName)) {\n      Arrays.sort(values, new Comparator<Integer>() {\n\n        @Override\n        public int compare(Integer o1, Integer o2) {\n          return String.valueOf(o1).compareTo(String.valueOf(o2));\n        }\n      });\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a0c04b71951333291abc7f317109a6a5957bd28":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}