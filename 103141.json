{"path":"solr/src/java/org/apache/solr/schema/LatLonType#addEquatorialBoundary(QParser,SpatialOptions,BooleanQuery,double,double).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#addEquatorialBoundary(QParser,SpatialOptions,BooleanQuery,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add query conditions for boundaries like the equator, poles and meridians\n   *\n   * @param parser\n   * @param options\n   * @param result\n   * @param upperRight\n   * @param lowerLeft\n   */\n  protected void addEquatorialBoundary(QParser parser, SpatialOptions options, BooleanQuery result, double upperRight, double lowerLeft) {\n    SchemaField subSF;\n    Query range;\n    BooleanQuery tmpQ = new BooleanQuery();\n    subSF = subField(options.field, LAT);\n    //southern hemi.\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            String.valueOf(lowerLeft),\n            \"0\", true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //northern hemi\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            \"0\", String.valueOf(upperRight), true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //One or the other must occur\n    result.add(tmpQ, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#addEquatorialBoundary(QParser,SpatialOptions,BooleanQuery,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add query conditions for boundaries like the equator, poles and meridians\n   *\n   * @param parser\n   * @param options\n   * @param result\n   * @param upperRight\n   * @param lowerLeft\n   */\n  protected void addEquatorialBoundary(QParser parser, SpatialOptions options, BooleanQuery result, double upperRight, double lowerLeft) {\n    SchemaField subSF;\n    Query range;\n    BooleanQuery tmpQ = new BooleanQuery();\n    subSF = subField(options.field, LAT);\n    //southern hemi.\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            String.valueOf(lowerLeft),\n            \"0\", true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //northern hemi\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            \"0\", String.valueOf(upperRight), true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //One or the other must occur\n    result.add(tmpQ, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#addEquatorialBoundary(QParser,SpatialOptions,BooleanQuery,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add query conditions for boundaries like the equator, poles and meridians\n   *\n   * @param parser\n   * @param options\n   * @param result\n   * @param upperRight\n   * @param lowerLeft\n   */\n  protected void addEquatorialBoundary(QParser parser, SpatialOptions options, BooleanQuery result, double upperRight, double lowerLeft) {\n    SchemaField subSF;\n    Query range;\n    BooleanQuery tmpQ = new BooleanQuery();\n    subSF = subField(options.field, LAT);\n    //southern hemi.\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            String.valueOf(lowerLeft),\n            \"0\", true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //northern hemi\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            \"0\", String.valueOf(upperRight), true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //One or the other must occur\n    result.add(tmpQ, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#addEquatorialBoundary(QParser,SpatialOptions,BooleanQuery,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add query conditions for boundaries like the equator, poles and meridians\n   *\n   * @param parser\n   * @param options\n   * @param result\n   * @param upperRight\n   * @param lowerLeft\n   */\n  protected void addEquatorialBoundary(QParser parser, SpatialOptions options, BooleanQuery result, double upperRight, double lowerLeft) {\n    SchemaField subSF;\n    Query range;\n    BooleanQuery tmpQ = new BooleanQuery();\n    subSF = subField(options.field, LAT);\n    //southern hemi.\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            String.valueOf(lowerLeft),\n            \"0\", true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //northern hemi\n    range = subSF.getType().getRangeQuery(parser, subSF,\n            \"0\", String.valueOf(upperRight), true, true);\n    tmpQ.add(range, BooleanClause.Occur.SHOULD);\n    //One or the other must occur\n    result.add(tmpQ, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}