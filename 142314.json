{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n\n    reader.addReaderClosedListener(listener);\n\n    reader.close();\n\n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n\n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n\n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.shutdown();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.shutdown();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.shutdown();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.shutdown();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, it's the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, its the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testReaderFinishedListener().mjava","sourceNew":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ClosedListener listener = new IndexReader.ClosedListener() {\n      @Override\n      public void onClose(IndexReader.CacheKey key) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.getReaderCacheHelper().addClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, it's the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.getReaderCacheHelper().addClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2474\n  public void testReaderFinishedListener() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.addDocument(new Document());\n    writer.commit();\n    writer.addDocument(new Document());\n    writer.commit();\n    final DirectoryReader reader = writer.getReader();\n    final int[] closeCount = new int[1];\n    final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {\n      @Override\n      public void onClose(IndexReader reader) {\n        closeCount[0]++;\n      }\n    };\n  \n    reader.addReaderClosedListener(listener);\n  \n    reader.close();\n  \n    // Close the top reader, it's the only one that should be closed\n    assertEquals(1, closeCount[0]);\n    writer.close();\n  \n    DirectoryReader reader2 = DirectoryReader.open(dir);\n    reader2.addReaderClosedListener(listener);\n  \n    closeCount[0] = 0;\n    reader2.close();\n    assertEquals(1, closeCount[0]);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7530de27b87b961b51f01bd1299b7004d46e8823"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"7530de27b87b961b51f01bd1299b7004d46e8823":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d211216c83f01894810543d1c107160a9ae3650b"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}