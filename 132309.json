{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#hasRoom(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#hasRoom(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#hasRoom(int).mjava","sourceNew":"  /**\n   * Sometimes the cache is either unlimited in size, or limited by a very\n   * big size, and in that case when we add a lot of categories it might\n   * make sense to pre-load the cache with all the existing categories.\n   * However, this pre-load does not make sense when the allowed cache\n   * size is small. The hasRoom() method allows to differentiate between\n   * these cases.\n   * <P>  \n   * After hasRoom(n) returned <code>true</code>, the following n put()\n   * should return false (meaning that the cache was not cleared).\n   */\n  public boolean hasRoom(int numberOfEntries);\n\n","sourceOld":"  /**\n   * Sometimes the cache is either unlimited in size, or limited by a very\n   * big size, and in that case when we add a lot of categories it might\n   * make sense to pre-load the cache with all the existing categories.\n   * However, this pre-load does not make sense when the allowed cache\n   * size is small. The hasRoom() method allows to differentiate between\n   * these cases.\n   * <P>  \n   * After hasRoom(n) returned <code>true</code>, the following n put()\n   * should return false (meaning that the cache was not cleared).\n   */\n  public boolean hasRoom(int numberOfEntries);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#hasRoom(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sometimes the cache is either unlimited in size, or limited by a very\n   * big size, and in that case when we add a lot of categories it might\n   * make sense to pre-load the cache with all the existing categories.\n   * However, this pre-load does not make sense when the allowed cache\n   * size is small. The hasRoom() method allows to differentiate between\n   * these cases.\n   * <P>  \n   * After hasRoom(n) returned <code>true</code>, the following n put()\n   * should return false (meaning that the cache was not cleared).\n   */\n  public boolean hasRoom(int numberOfEntries);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}