{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","commits":[{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":1,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getScorer(ShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(ShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == ShapeField.QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == ShapeField.QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["9c226b0eeb8b028f572020f459851a663a2c064e"],"9c226b0eeb8b028f572020f459851a663a2c064e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["9c226b0eeb8b028f572020f459851a663a2c064e","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c226b0eeb8b028f572020f459851a663a2c064e"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"9c226b0eeb8b028f572020f459851a663a2c064e":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}