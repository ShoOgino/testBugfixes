{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  // nocommit don't pass FIS here...\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // nocommit we can assert FIS.hasProx == our hasProx here...\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // nocommit don't consult FieldInfos here... then nuke\n    // fieldInfos arg...\n    // nocommit we can assert FIS.hasProx == our hasProx here...\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  // nocommit don't pass FIS here...\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // nocommit we can assert FIS.hasProx == our hasProx here...\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // TODO: hasProx should (somehow!) become codec private,\n    // but it's tricky because 1) FIS.hasProx is global (it\n    // could be all fields that have prox are written by a\n    // different codec), 2) the field may have had prox in\n    // the past but all docs w/ that field were deleted.\n    // Really we'd need to init prxOut lazily on write, and\n    // then somewhere record that we actually wrote it so we\n    // know whether to open on read:\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // nocommit don't consult FieldInfos here... then nuke\n    // fieldInfos arg...\n    // nocommit we can assert FIS.hasProx == our hasProx here...\n    // this.segment = segmentInfo.name;\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // TODO: hasProx should (somehow!) become codec private,\n    // but it's tricky because 1) FIS.hasProx is global (it\n    // could be all fields that have prox are written by a\n    // different codec), 2) the field may have had prox in\n    // the past but all docs w/ that field were deleted.\n    // Really we'd need to init prxOut lazily on write, and\n    // then somewhere record that we actually wrote it so we\n    // know whether to open on read:\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // TODO: hasProx should (somehow!) become codec private,\n    // but it's tricky because 1) FIS.hasProx is global (it\n    // could be all fields that have prox are written by a\n    // different codec), 2) the field may have had prox in\n    // the past but all docs w/ that field were deleted.\n    // Really we'd need to init prxOut lazily on write, and\n    // then somewhere record that we actually wrote it so we\n    // know whether to open on read:\n    if (fieldInfos.hasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":["dc97c61094c5498702b29cc2e8309beac50c23dc","7b91922b55d15444d554721b352861d028eb8278","fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"bugIntro":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_START);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, Lucene40PostingsWriter.FRQ_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, Lucene40PostingsWriter.PRX_CODEC, Lucene40PostingsWriter.VERSION_START,Lucene40PostingsWriter.VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["4356000e349e38c9fb48034695b7c309abd54557"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","4cc45c615dbb82bf79d5f9550286098367874fbf"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","6616b1fd222bb5a60f7f7856ace312252bc97890"],"519435fc0d6082a1b8081f9492b714f716877437":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"4356000e349e38c9fb48034695b7c309abd54557":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["519435fc0d6082a1b8081f9492b714f716877437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4356000e349e38c9fb48034695b7c309abd54557"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["519435fc0d6082a1b8081f9492b714f716877437"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"4356000e349e38c9fb48034695b7c309abd54557":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"519435fc0d6082a1b8081f9492b714f716877437":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc97c61094c5498702b29cc2e8309beac50c23dc","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["6616b1fd222bb5a60f7f7856ace312252bc97890","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}