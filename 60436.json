{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(1, 2));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(1, 2));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProvider().mjava","sourceNew":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","sourceOld":"  public void testDataProvider() throws IOException, SolrServerException, KeeperException, InterruptedException {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"shard1\", 2)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 2, false, true));\n    DocCollection rulesCollection = getCollectionState(\"policiesTest\");\n\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(rulesCollection.getReplicas().get(0).getNodeName(), Arrays.asList(\n        \"freedisk\",\n        \"cores\",\n        \"heapUsage\",\n        \"sysLoadAvg\"));\n    assertNotNull(val.get(\"freedisk\"));\n    assertNotNull(val.get(\"heapUsage\"));\n    assertNotNull(val.get(\"sysLoadAvg\"));\n    assertTrue(((Number) val.get(\"cores\")).intValue() > 0);\n    assertTrue(\"freedisk value is \" + ((Number) val.get(\"freedisk\")).doubleValue(),  Double.compare(((Number) val.get(\"freedisk\")).doubleValue(), 0.0d) > 0);\n    assertTrue(\"heapUsage value is \" + ((Number) val.get(\"heapUsage\")).doubleValue(), Double.compare(((Number) val.get(\"heapUsage\")).doubleValue(), 0.0d) > 0);\n    if (!Constants.WINDOWS)  {\n      // the system load average metrics is not available on windows platform\n      assertTrue(\"sysLoadAvg value is \" + ((Number) val.get(\"sysLoadAvg\")).doubleValue(), Double.compare(((Number) val.get(\"sysLoadAvg\")).doubleValue(), 0.0d) > 0);\n    }\n    // simulator doesn't have Overseer, so just pick a random node\n    String overseerNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    solrClient.request(CollectionAdminRequest.addRole(overseerNode, \"overseer\"));\n    for (int i = 0; i < 10; i++) {\n      Map<String, Object> data = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.ROLES);\n      if (i >= 9 && data.isEmpty()) {\n        throw new RuntimeException(\"NO overseer node created\");\n      }\n      cluster.getTimeSource().sleep(100);\n    }\n    val = cluster.getNodeStateProvider().getNodeValues(overseerNode, Arrays.asList(\n        \"nodeRole\",\n        \"ip_1\", \"ip_2\", \"ip_3\", \"ip_4\",\n        \"sysprop.java.version\",\n        \"sysprop.java.vendor\"));\n    assertEquals(\"overseer\", val.get(\"nodeRole\"));\n    assertNotNull(val.get(\"ip_1\"));\n    assertNotNull(val.get(\"ip_2\"));\n    assertNotNull(val.get(\"ip_3\"));\n    assertNotNull(val.get(\"ip_4\"));\n    assertNotNull(val.get(\"sysprop.java.version\"));\n    assertNotNull(val.get(\"sysprop.java.vendor\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}