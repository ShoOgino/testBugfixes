{"path":"src/java/org/apache/lucene/index/TermsHash#flush(Map,DocumentsWriter.FlushState).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#flush(Map,DocumentsWriter.FlushState).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#flush(Map,SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map,DocumentsWriter.FlushState).mjava","sourceNew":"  synchronized void flush(Map threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  synchronized void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}