{"path":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","commits":[{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":0,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dff57a5c41a798398714fc237597286cc412949","date":1494789162,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Gets an integer id for a given term and saves the position increment if needed.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    int id = idToTerm.size();\n    idToTerm.put(id, BytesRef.deepCopyOf(term));\n    // stacked token should have the same increment as original token at this position\n    if (isStackedGap) {\n      idToInc.put(id, prevIncr);\n    } else if (incr > 1) {\n      idToInc.put(id, incr);\n    }\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Gets an integer id for a given term and saves the position increment if needed.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    int id = idToTerm.size();\n    idToTerm.put(id, BytesRef.deepCopyOf(term));\n    // stacked token should have the same increment as original token at this position\n    if (isStackedGap) {\n      idToInc.put(id, prevIncr);\n    } else if (incr > 1) {\n      idToInc.put(id, incr);\n    }\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Gets an integer id for a given term.\n   *\n   * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another\n   * position without a gap.  If we have a position gap generate a new id so we can keep track of the position\n   * increment.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    boolean hasGap = incr > 1;\n    Integer id;\n    if (hasGap || isStackedGap) {\n      id = idToTerm.size();\n      idToTerm.put(id, BytesRef.deepCopyOf(term));\n\n      // stacked token should have the same increment as original token at this position\n      if (isStackedGap) {\n        idToInc.put(id, prevIncr);\n      } else {\n        idToInc.put(id, incr);\n      }\n    } else {\n      id = termToID.get(term);\n      if (id == null) {\n        term = BytesRef.deepCopyOf(term);\n        id = idToTerm.size();\n        termToID.put(term, id);\n        idToTerm.put(id, term);\n      }\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1183e4d02ec8307ffca25b9879752bea1822f1","date":1563533185,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getTermID(int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets an integer id for a given term and saves the position increment if needed.\n   */\n  private int getTermID(int incr, int prevIncr, BytesRef term) {\n    assert term != null;\n    boolean isStackedGap = incr == 0 && prevIncr > 1;\n    int id = idToTerm.size();\n    idToTerm.put(id, BytesRef.deepCopyOf(term));\n    // stacked token should have the same increment as original token at this position\n    if (isStackedGap) {\n      idToInc.put(id, prevIncr);\n    } else if (incr > 1) {\n      idToInc.put(id, incr);\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","2dff57a5c41a798398714fc237597286cc412949"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dff57a5c41a798398714fc237597286cc412949":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"2a1183e4d02ec8307ffca25b9879752bea1822f1":["2dff57a5c41a798398714fc237597286cc412949"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1183e4d02ec8307ffca25b9879752bea1822f1"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e52c30617998e1bc2a946cc226f52e9b35162b1e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"2dff57a5c41a798398714fc237597286cc412949":["e9017cf144952056066919f1ebc7897ff9bd71b1","2a1183e4d02ec8307ffca25b9879752bea1822f1"],"2a1183e4d02ec8307ffca25b9879752bea1822f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e9017cf144952056066919f1ebc7897ff9bd71b1","2dff57a5c41a798398714fc237597286cc412949"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}