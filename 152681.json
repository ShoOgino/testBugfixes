{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() {\n    try {\n      // read test cases from external file:\n      File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n      File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n      FileInputStream fis = new FileInputStream(testFile);\n      InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n      BufferedReader breader = new BufferedReader(isr);\n      while(true) {\n        String line = breader.readLine();\n        if (line == null)\n          break;\n        line = line.trim();\n        if (line.startsWith(\"#\") || line.equals(\"\"))\n          continue;    // ignore comments and empty lines\n        String[] parts = line.split(\";\");\n        //System.out.println(parts[0] + \" -- \" + parts[1]);\n        check(parts[0], parts[1]);\n      }\n      breader.close();\n      isr.close();\n      fis.close();\n    } catch (IOException e) {\n       e.printStackTrace();\n       fail();\n    }\n  }\n\n","sourceOld":"  public void testStemming() {\n    try {\n      // read test cases from external file:\n      File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n      File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n      FileInputStream fis = new FileInputStream(testFile);\n      InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n      BufferedReader breader = new BufferedReader(isr);\n      while(true) {\n        String line = breader.readLine();\n        if (line == null)\n          break;\n        line = line.trim();\n        if (line.startsWith(\"#\") || line.equals(\"\"))\n          continue;    // ignore comments and empty lines\n        String[] parts = line.split(\";\");\n        //System.out.println(parts[0] + \" -- \" + parts[1]);\n        check(parts[0], parts[1]);\n      }\n      breader.close();\n      isr.close();\n      fis.close();\n    } catch (IOException e) {\n       e.printStackTrace();\n       fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      check(parts[0], parts[1]);\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","sourceOld":"  public void testStemming() {\n    try {\n      // read test cases from external file:\n      File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n      File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n      FileInputStream fis = new FileInputStream(testFile);\n      InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n      BufferedReader breader = new BufferedReader(isr);\n      while(true) {\n        String line = breader.readLine();\n        if (line == null)\n          break;\n        line = line.trim();\n        if (line.startsWith(\"#\") || line.equals(\"\"))\n          continue;    // ignore comments and empty lines\n        String[] parts = line.split(\";\");\n        //System.out.println(parts[0] + \" -- \" + parts[1]);\n        check(parts[0], parts[1]);\n      }\n      breader.close();\n      isr.close();\n      fis.close();\n    } catch (IOException e) {\n       e.printStackTrace();\n       fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer));\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      check(parts[0], parts[1]);\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","bugFix":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer));\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    File dataDir = new File(System.getProperty(\"dataDir\", \"./bin\"));\n    File testFile = new File(dataDir, \"org/apache/lucene/analysis/de/data.txt\");\n    FileInputStream fis = new FileInputStream(testFile);\n    InputStreamReader isr = new InputStreamReader(fis, \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n    fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d16275d75dfe0b780ed62df4c811d083187c71a":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["c2877c077c0dc229ee9871dc196b2a62442df599"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["c2877c077c0dc229ee9871dc196b2a62442df599"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}