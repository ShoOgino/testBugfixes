{"path":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect(boolean slow) {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    IntroSelector selector = new IntroSelector() {\n\n      Integer pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(actual, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = actual[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(actual[j]);\n      }\n    };\n    if (slow) {\n      selector.slowSelect(from, to, k);\n    } else {\n      selector.select(from, to, k);\n    }\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect(boolean slow) {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    IntroSelector selector = new IntroSelector() {\n\n      Integer pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(actual, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = actual[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(actual[j]);\n      }\n    };\n    if (slow) {\n      selector.slowSelect(from, to, k);\n    } else {\n      selector.select(from, to, k);\n    }\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect(boolean slow) {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    IntroSelector selector = new IntroSelector() {\n\n      Integer pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(actual, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = actual[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(actual[j]);\n      }\n    };\n    if (slow) {\n      selector.slowSelect(from, to, k);\n    } else {\n      selector.select(from, to, k);\n    }\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1350151a7fc1433e7de0bed0bc180ad4d850c7e","date":1572337312,"type":3,"author":"Paul Sanwald","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIntroSelector#doTestSelect(boolean).mjava","sourceNew":"  private void doTestSelect(boolean slow) {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    IntroSelector selector = new IntroSelector() {\n\n      Integer pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(actual, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = actual[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(actual[j]);\n      }\n    };\n    if (slow) {\n      selector.slowSelect(from, to, k);\n    } else {\n      selector.select(from, to, k);\n    }\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSelect(boolean slow) {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    IntroSelector selector = new IntroSelector() {\n\n      Integer pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(actual, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = actual[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(actual[j]);\n      }\n    };\n    if (slow) {\n      selector.slowSelect(from, to, k);\n    } else {\n      selector.select(from, to, k);\n    }\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1350151a7fc1433e7de0bed0bc180ad4d850c7e":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1350151a7fc1433e7de0bed0bc180ad4d850c7e"]},"commit2Childs":{"e1350151a7fc1433e7de0bed0bc180ad4d850c7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["e1350151a7fc1433e7de0bed0bc180ad4d850c7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}