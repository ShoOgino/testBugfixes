{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. In fact when used in a multi-threaded setup the nextRow() method is called from a\n   * synchronized block {@link ThreadedEntityProcessorWrapper#nextRow()}, so this\n   * is taken care of.\n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. In fact when used in a multi-threaded setup the nextRow() method is called from a\n   * synchronized block {@link ThreadedEntityProcessorWrapper#nextRow()}, so this\n   * is taken care of.\n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b84e23a1c994ea309896dd9424563e0092f3607","date":1332774278,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. In fact when used in a multi-threaded setup the nextRow() method is called from a\n   * synchronized block {@link ThreadedEntityProcessorWrapper#nextRow()}, so this\n   * is taken care of.\n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b3fb9a1e20d461ee060be1429f6809289b1a1e5","date":1377688856,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        SolrDocumentList solrDocumentList = doQuery(documentListIterator\n            .getStart() + documentListIterator.getSize());\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n    } else  {\n      SolrDocumentList solrDocumentList = doQuery(0);\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n      return;\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","bugFix":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        SolrDocumentList solrDocumentList = doQuery(documentListIterator\n            .getStart() + documentListIterator.getSize());\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n    } else  {\n      SolrDocumentList solrDocumentList = doQuery(0);\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n      return;\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator == null) {\n      // We could use an AtomicBoolean but there's no need since this method\n      // would require anyway external synchronization\n      if (!initDone) {\n        initDone = true;\n        SolrDocumentList solrDocumentList = doQuery(0);\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n      return;\n    }\n    \n    SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n      SolrDocumentList solrDocumentList = doQuery(documentListIterator\n          .getStart() + documentListIterator.getSize());\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d631465f88a03f4c835b8afad23d09615067b978","date":1483120253,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      Boolean cursor = new Boolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        SolrDocumentList solrDocumentList = doQuery(documentListIterator\n            .getStart() + documentListIterator.getSize());\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n    } else  {\n      SolrDocumentList solrDocumentList = doQuery(0);\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      Boolean cursor = new Boolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  private void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        SolrDocumentList solrDocumentList = doQuery(documentListIterator\n            .getStart() + documentListIterator.getSize());\n        if (solrDocumentList != null) {\n          rowIterator = new SolrDocumentListIterator(solrDocumentList);\n        }\n      }\n    } else  {\n      SolrDocumentList solrDocumentList = doQuery(0);\n      if (solrDocumentList != null) {\n        rowIterator = new SolrDocumentListIterator(solrDocumentList);\n      }\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      boolean cursor = Boolean.parseBoolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      Boolean cursor = new Boolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      boolean cursor = Boolean.parseBoolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      Boolean cursor = new Boolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      boolean cursor = Boolean.parseBoolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      Boolean cursor = new Boolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#buildIterator().mjava","sourceNew":null,"sourceOld":"  /**\n   * The following method changes the rowIterator mutable field. It requires\n   * external synchronization. \n   */\n  protected void buildIterator() {\n    if (rowIterator != null)  {\n      SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;\n      if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {\n        nextPage();\n      }\n    } else {\n      boolean cursor = Boolean.parseBoolean(context\n          .getResolvedEntityAttribute(CursorMarkParams.CURSOR_MARK_PARAM));\n      rowIterator = !cursor ? new SolrDocumentListIterator(new SolrDocumentList())\n          : new SolrDocumentListCursor(new SolrDocumentList(), CursorMarkParams.CURSOR_MARK_START);\n      nextPage();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["d631465f88a03f4c835b8afad23d09615067b978"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4b84e23a1c994ea309896dd9424563e0092f3607","7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["d631465f88a03f4c835b8afad23d09615067b978","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7b3fb9a1e20d461ee060be1429f6809289b1a1e5","d631465f88a03f4c835b8afad23d09615067b978"],"4b84e23a1c994ea309896dd9424563e0092f3607":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"7b3fb9a1e20d461ee060be1429f6809289b1a1e5":["4b84e23a1c994ea309896dd9424563e0092f3607"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d631465f88a03f4c835b8afad23d09615067b978","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d631465f88a03f4c835b8afad23d09615067b978":["7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","4b84e23a1c994ea309896dd9424563e0092f3607"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"4b84e23a1c994ea309896dd9424563e0092f3607":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"7b3fb9a1e20d461ee060be1429f6809289b1a1e5":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f03e4bed5023ec3ef93a771b8888cae991cf448d","d631465f88a03f4c835b8afad23d09615067b978"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"d631465f88a03f4c835b8afad23d09615067b978":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}