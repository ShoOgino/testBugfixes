{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","commits":[{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","pathOld":"/dev/null","sourceNew":"  public void testFixedLengthLiesLiesLies() throws Exception {\n    // Make sure OfflineSorter catches me if I lie about the fixed value length:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Long.BYTES);\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {\n      sorter.sort(out.getName());\n      });\n    assertEquals(\"value length is 4 but is supposed to always be 8\", e.getMessage());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","sourceNew":"  public void testFixedLengthLiesLiesLies() throws Exception {\n    // Make sure OfflineSorter catches me if I lie about the fixed value length:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Long.BYTES, null, 0);\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {\n      sorter.sort(out.getName());\n      });\n    assertEquals(\"value length is 4 but is supposed to always be 8\", e.getMessage());\n    dir.close();\n  }\n\n","sourceOld":"  public void testFixedLengthLiesLiesLies() throws Exception {\n    // Make sure OfflineSorter catches me if I lie about the fixed value length:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Long.BYTES);\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {\n      sorter.sort(out.getName());\n      });\n    assertEquals(\"value length is 4 but is supposed to always be 8\", e.getMessage());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthLiesLiesLies().mjava","sourceNew":"  public void testFixedLengthLiesLiesLies() throws Exception {\n    // Make sure OfflineSorter catches me if I lie about the fixed value length:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Long.BYTES, null, 0);\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {\n      sorter.sort(out.getName());\n      });\n    assertEquals(\"value length is 4 but is supposed to always be 8\", e.getMessage());\n    dir.close();\n  }\n\n","sourceOld":"  public void testFixedLengthLiesLiesLies() throws Exception {\n    // Make sure OfflineSorter catches me if I lie about the fixed value length:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Long.BYTES);\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {\n      sorter.sort(out.getName());\n      });\n    assertEquals(\"value length is 4 but is supposed to always be 8\", e.getMessage());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee52259641568741fbc6ecc51284431e2a36475c","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["ee52259641568741fbc6ecc51284431e2a36475c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee52259641568741fbc6ecc51284431e2a36475c"],"ee52259641568741fbc6ecc51284431e2a36475c":["e9017cf144952056066919f1ebc7897ff9bd71b1","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}