{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"    public void setSpellIndex (Directory spellindex) {\n        this.spellindex=spellindex;\n    }\n\n","sourceOld":"    public void setSpellIndex (Directory spellindex) {\n        this.spellindex=spellindex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  public void setSpellIndex(Directory spellindex) {\n    this.spellindex = spellindex;\n  }\n\n","sourceOld":"    public void setSpellIndex (Directory spellindex) {\n        this.spellindex=spellindex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d6c8635b7359c78703bca99eed29c45ed44ac7f","date":1153471142,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  public void setSpellIndex(Directory spellindex) throws IOException {\n    this.spellindex = spellindex;\n    searcher = new IndexSearcher(this.spellindex);\n  }\n\n","sourceOld":"  public void setSpellIndex(Directory spellindex) {\n    this.spellindex = spellindex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c292217d2a7f861d59267155332967568e371fc1","date":1161990036,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  public void setSpellIndex(Directory spellindex) throws IOException {\n    this.spellindex = spellindex;\n    searcher = new IndexSearcher(this.spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c2dacb7de68407adf10cda93ee1edf49502cc14","date":1172860135,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, null, true,\n              IndexWriter.MaxFieldLength.UNLIMITED);\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * \n   * @param spellIndex\n   * @throws IOException\n   */\n  public void setSpellIndex(Directory spellIndex) throws IOException {\n    this.spellIndex = spellIndex;\n    if (!IndexReader.indexExists(spellIndex)) {\n        IndexWriter writer = new IndexWriter(spellIndex, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.close();\n    }\n    // close the old searcher, if there was one\n    if (searcher != null) {\n      searcher.close();\n    }\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, new IndexWriterConfig(Version.LUCENE_CURRENT));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, null, true,\n              IndexWriter.MaxFieldLength.UNLIMITED);\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, null, true,\n              IndexWriter.MaxFieldLength.UNLIMITED);\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, new IndexWriterConfig(Version.LUCENE_CURRENT));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                new WhitespaceAnalyzer(Version.LUCENE_CURRENT)));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir, null, true,\n              IndexWriter.MaxFieldLength.UNLIMITED);\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                new WhitespaceAnalyzer(Version.LUCENE_CURRENT)));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!IndexReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                new WhitespaceAnalyzer(Version.LUCENE_CURRENT)));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["2c2dacb7de68407adf10cda93ee1edf49502cc14"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2c2dacb7de68407adf10cda93ee1edf49502cc14":["c292217d2a7f861d59267155332967568e371fc1"],"4256bc1b3c94786287ccdfc751230374521843cf":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c292217d2a7f861d59267155332967568e371fc1":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["4256bc1b3c94786287ccdfc751230374521843cf"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["c292217d2a7f861d59267155332967568e371fc1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2c2dacb7de68407adf10cda93ee1edf49502cc14":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4256bc1b3c94786287ccdfc751230374521843cf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c292217d2a7f861d59267155332967568e371fc1":["2c2dacb7de68407adf10cda93ee1edf49502cc14"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"87c966e9308847938a7c905c2e46a56d8df788b8":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}