{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#transferBatchToBufferForOutput(SortQueue,List[LeafReaderContext],ExportBuffers.Buffer).mjava","commits":[{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#transferBatchToBufferForOutput(SortQueue,List[LeafReaderContext],ExportBuffers.Buffer).mjava","pathOld":"/dev/null","sourceNew":"  protected void transferBatchToBufferForOutput(SortQueue queue,\n                                                List<LeafReaderContext> leaves,\n                                                ExportBuffers.Buffer destination) throws IOException {\n    Timer.Context timerContext = transferBatchToBufferTimer.time();\n    try {\n      int outDocsIndex = -1;\n      for (int i = 0; i < queue.maxSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          destination.outDocs[++outDocsIndex].setValues(s);\n          // remove this doc id from the matching bitset, it's been exported\n          sets[s.ord].clear(s.docId);\n          s.reset(); // reuse\n        }\n      }\n      destination.outDocsIndex = outDocsIndex;\n    } catch (Throwable t) {\n      log.error(\"transfer\", t);\n      if (t instanceof InterruptedException) {\n        Thread.currentThread().interrupt();\n      }\n      throw t;\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4447fbdfe6dd65e66f20836c5353483f46b7240f","date":1594133199,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#transferBatchToBufferForOutput(SortQueue,List[LeafReaderContext],ExportBuffers.Buffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#transferBatchToBufferForOutput(SortQueue,List[LeafReaderContext],ExportBuffers.Buffer).mjava","sourceNew":"  private void transferBatchToBufferForOutput(SortQueue queue,\n                                                List<LeafReaderContext> leaves,\n                                                ExportBuffers.Buffer destination) throws IOException {\n    Timer.Context timerContext = transferBatchToBufferTimer.time();\n    try {\n      int outDocsIndex = -1;\n      for (int i = 0; i < queue.maxSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          destination.outDocs[++outDocsIndex].setValues(s);\n          // remove this doc id from the matching bitset, it's been exported\n          sets[s.ord].clear(s.docId);\n          s.reset(); // reuse\n        }\n      }\n      destination.outDocsIndex = outDocsIndex;\n    } catch (Throwable t) {\n      log.error(\"transfer\", t);\n      if (t instanceof InterruptedException) {\n        Thread.currentThread().interrupt();\n      }\n      throw t;\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","sourceOld":"  protected void transferBatchToBufferForOutput(SortQueue queue,\n                                                List<LeafReaderContext> leaves,\n                                                ExportBuffers.Buffer destination) throws IOException {\n    Timer.Context timerContext = transferBatchToBufferTimer.time();\n    try {\n      int outDocsIndex = -1;\n      for (int i = 0; i < queue.maxSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          destination.outDocs[++outDocsIndex].setValues(s);\n          // remove this doc id from the matching bitset, it's been exported\n          sets[s.ord].clear(s.docId);\n          s.reset(); // reuse\n        }\n      }\n      destination.outDocsIndex = outDocsIndex;\n    } catch (Throwable t) {\n      log.error(\"transfer\", t);\n      if (t instanceof InterruptedException) {\n        Thread.currentThread().interrupt();\n      }\n      throw t;\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4447fbdfe6dd65e66f20836c5353483f46b7240f":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4447fbdfe6dd65e66f20836c5353483f46b7240f"]},"commit2Childs":{"4447fbdfe6dd65e66f20836c5353483f46b7240f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["4447fbdfe6dd65e66f20836c5353483f46b7240f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}