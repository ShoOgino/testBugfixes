{"path":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testCorruptOnCloseIsWorking(Directory).mjava","commits":[{"id":"fcea6cce9ade9e5e9c2c9ae2482a924c13c7f7c8","date":1466428664,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testCorruptOnCloseIsWorking(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void testCorruptOnCloseIsWorking(Directory dir) throws Exception {\n\n    dir = new PreventCloseDirectoryWrapper(dir);\n\n    try (MockDirectoryWrapper wrapped = new MockDirectoryWrapper(random(), dir)) {\n\n      // otherwise MDW sometimes randomly leaves the file intact and we'll see false test failures:\n      wrapped.alwaysCorrupt = true;\n\n      // MDW will only try to corrupt things if it sees an index:\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      iw.addDocument(new Document());\n      iw.close();\n      \n      // not sync'd!\n      try (IndexOutput out = wrapped.createOutput(\"foo\", IOContext.DEFAULT)) {\n        for(int i=0;i<100;i++) {\n          out.writeInt(i);\n        }\n      }\n\n      // MDW.close now corrupts our unsync'd file (foo):\n    }\n\n    boolean changed = false;\n    IndexInput in = null;\n    try {\n      in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    } catch (NoSuchFileException | FileNotFoundException fnfe) {\n      // ok\n      changed = true;\n    }\n    if (in != null) {\n      for(int i=0;i<100;i++) {\n        int x;\n        try {\n          x = in.readInt();\n        } catch (EOFException eofe) {\n          changed = true;\n          break;\n        }\n        if (x != i) {\n          changed = true;\n          break;\n        }\n      }\n\n      in.close();\n    }\n\n    assertTrue(\"MockDirectoryWrapper on dir=\" + dir + \" failed to corrupt an unsync'd file\", changed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testCorruptOnCloseIsWorking(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void testCorruptOnCloseIsWorking(Directory dir) throws Exception {\n\n    dir = new PreventCloseDirectoryWrapper(dir);\n\n    try (MockDirectoryWrapper wrapped = new MockDirectoryWrapper(random(), dir)) {\n\n      // otherwise MDW sometimes randomly leaves the file intact and we'll see false test failures:\n      wrapped.alwaysCorrupt = true;\n\n      // MDW will only try to corrupt things if it sees an index:\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      iw.addDocument(new Document());\n      iw.close();\n      \n      // not sync'd!\n      try (IndexOutput out = wrapped.createOutput(\"foo\", IOContext.DEFAULT)) {\n        for(int i=0;i<100;i++) {\n          out.writeInt(i);\n        }\n      }\n\n      // MDW.close now corrupts our unsync'd file (foo):\n    }\n\n    boolean changed = false;\n    IndexInput in = null;\n    try {\n      in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    } catch (NoSuchFileException | FileNotFoundException fnfe) {\n      // ok\n      changed = true;\n    }\n    if (in != null) {\n      for(int i=0;i<100;i++) {\n        int x;\n        try {\n          x = in.readInt();\n        } catch (EOFException eofe) {\n          changed = true;\n          break;\n        }\n        if (x != i) {\n          changed = true;\n          break;\n        }\n      }\n\n      in.close();\n    }\n\n    assertTrue(\"MockDirectoryWrapper on dir=\" + dir + \" failed to corrupt an unsync'd file\", changed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testCorruptOnCloseIsWorking(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void testCorruptOnCloseIsWorking(Directory dir) throws Exception {\n\n    dir = new PreventCloseDirectoryWrapper(dir);\n\n    try (MockDirectoryWrapper wrapped = new MockDirectoryWrapper(random(), dir)) {\n\n      // otherwise MDW sometimes randomly leaves the file intact and we'll see false test failures:\n      wrapped.alwaysCorrupt = true;\n\n      // MDW will only try to corrupt things if it sees an index:\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      iw.addDocument(new Document());\n      iw.close();\n      \n      // not sync'd!\n      try (IndexOutput out = wrapped.createOutput(\"foo\", IOContext.DEFAULT)) {\n        for(int i=0;i<100;i++) {\n          out.writeInt(i);\n        }\n      }\n\n      // MDW.close now corrupts our unsync'd file (foo):\n    }\n\n    boolean changed = false;\n    IndexInput in = null;\n    try {\n      in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    } catch (NoSuchFileException | FileNotFoundException fnfe) {\n      // ok\n      changed = true;\n    }\n    if (in != null) {\n      for(int i=0;i<100;i++) {\n        int x;\n        try {\n          x = in.readInt();\n        } catch (EOFException eofe) {\n          changed = true;\n          break;\n        }\n        if (x != i) {\n          changed = true;\n          break;\n        }\n      }\n\n      in.close();\n    }\n\n    assertTrue(\"MockDirectoryWrapper on dir=\" + dir + \" failed to corrupt an unsync'd file\", changed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcea6cce9ade9e5e9c2c9ae2482a924c13c7f7c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcea6cce9ade9e5e9c2c9ae2482a924c13c7f7c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"fcea6cce9ade9e5e9c2c9ae2482a924c13c7f7c8":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcea6cce9ade9e5e9c2c9ae2482a924c13c7f7c8","6aaba221b22442bdf0ef28770c25fe259dfb3f55","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}