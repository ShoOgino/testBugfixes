{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":null,"sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}