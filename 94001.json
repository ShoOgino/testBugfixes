{"path":"solr/solrj/src/java/org/apache/solr/common/util/RequiredValidator[JsonSchemaValidator]#validate(Object,List[String],Set[String]).mjava","commits":[{"id":"26de7f978abe868807e55377d3e5837c0a7883d3","date":1516908224,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RequiredValidator[JsonSchemaValidator]#validate(Object,List[String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  boolean validate( Object o, List<String> errs, Set<String> requiredProps) {\n    if (o instanceof Map) {\n      Set fnames = ((Map) o).keySet();\n      for (String requiredProp : requiredProps) {\n        if (requiredProp.contains(\".\")) {\n          if (requiredProp.endsWith(\".\")) {\n            errs.add(\"Illegal required attribute name (ends with '.': \" + requiredProp + \").  This is a bug.\");\n            return false;\n          }\n          String subprop = requiredProp.substring(requiredProp.indexOf(\".\") + 1);\n          if (!validate(((Map)o).get(requiredProp), errs, Collections.singleton(subprop))) {\n            return false;\n          }\n        } else {\n          if (!fnames.contains(requiredProp)) {\n            errs.add(\"Missing required attribute '\" + requiredProp + \"' in object \" + Utils.toJSONString(o));\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RequiredValidator[JsonSchemaValidator]#validate(Object,List[String],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/RequiredValidator[JsonSchemaValidator]#validate(Object,List[String],Set[String]).mjava","sourceNew":"  boolean validate( Object o, List<String> errs, Set<String> requiredProps) {\n    if (o instanceof Map) {\n      @SuppressWarnings({\"rawtypes\"})\n      Set fnames = ((Map) o).keySet();\n      for (String requiredProp : requiredProps) {\n        if (requiredProp.contains(\".\")) {\n          if (requiredProp.endsWith(\".\")) {\n            errs.add(\"Illegal required attribute name (ends with '.': \" + requiredProp + \").  This is a bug.\");\n            return false;\n          }\n          String subprop = requiredProp.substring(requiredProp.indexOf(\".\") + 1);\n          if (!validate(((Map)o).get(requiredProp), errs, Collections.singleton(subprop))) {\n            return false;\n          }\n        } else {\n          if (!fnames.contains(requiredProp)) {\n            errs.add(\"Missing required attribute '\" + requiredProp + \"' in object \" + Utils.toJSONString(o));\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean validate( Object o, List<String> errs, Set<String> requiredProps) {\n    if (o instanceof Map) {\n      Set fnames = ((Map) o).keySet();\n      for (String requiredProp : requiredProps) {\n        if (requiredProp.contains(\".\")) {\n          if (requiredProp.endsWith(\".\")) {\n            errs.add(\"Illegal required attribute name (ends with '.': \" + requiredProp + \").  This is a bug.\");\n            return false;\n          }\n          String subprop = requiredProp.substring(requiredProp.indexOf(\".\") + 1);\n          if (!validate(((Map)o).get(requiredProp), errs, Collections.singleton(subprop))) {\n            return false;\n          }\n        } else {\n          if (!fnames.contains(requiredProp)) {\n            errs.add(\"Missing required attribute '\" + requiredProp + \"' in object \" + Utils.toJSONString(o));\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["26de7f978abe868807e55377d3e5837c0a7883d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26de7f978abe868807e55377d3e5837c0a7883d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26de7f978abe868807e55377d3e5837c0a7883d3"],"26de7f978abe868807e55377d3e5837c0a7883d3":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}