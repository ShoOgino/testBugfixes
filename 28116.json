{"path":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,SimpleFacetsCollector).mjava","sourceNew":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  FacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, FacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","sourceOld":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  SimpleFacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, SimpleFacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","sourceNew":"  /** Utility method, to search and also collect all hits\n   *  into the provided {@link FacetsCollector}. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int n, Sort sort, boolean doDocScores, boolean doMaxScore, FacetsCollector fc) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must not be null\");\n    }\n    return (TopFieldDocs) doSearch(searcher, null, q, filter, n, sort, doDocScores, doMaxScore, fc);\n  }\n\n","sourceOld":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  FacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, FacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","sourceNew":"  /** Utility method, to search and also collect all hits\n   *  into the provided {@link Collector}. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int n, Sort sort, boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must not be null\");\n    }\n    return (TopFieldDocs) doSearch(searcher, null, q, filter, n, sort, doDocScores, doMaxScore, fc);\n  }\n\n","sourceOld":"  /** Utility method, to search and also collect all hits\n   *  into the provided {@link FacetsCollector}. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int n, Sort sort, boolean doDocScores, boolean doMaxScore, FacetsCollector fc) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must not be null\");\n    }\n    return (TopFieldDocs) doSearch(searcher, null, q, filter, n, sort, doDocScores, doMaxScore, fc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"fd83550e4b0bdd36e7d9dca9273264100782440b":[],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd83550e4b0bdd36e7d9dca9273264100782440b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}