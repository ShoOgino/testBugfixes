{"path":"backwards/src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}