{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty())\n        return AcceptStatus.END;\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.getFirst().lower) < 0)\n        return AcceptStatus.NO_AND_SEEK;\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    // final-filter boundary ranges by bounding box\n    if (currentRange.boundary) {\n      final long val = NumericUtils.prefixCodedToLong(term);\n      final double lon = GeoUtils.mortonUnhashLon(val);\n      final double lat = GeoUtils.mortonUnhashLat(val);\n      if (!GeoUtils.bboxContains(lon, lat, minLon, minLat, maxLon, maxLat)) {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).lower) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    // final-filter boundary ranges by bounding box\n    if (currentRange.boundary) {\n      final long val = NumericUtils.prefixCodedToLong(term);\n      final double lon = GeoUtils.mortonUnhashLon(val);\n      final double lat = GeoUtils.mortonUnhashLat(val);\n      if (!GeoUtils.bboxContains(lon, lat, minLon, minLat, maxLon, maxLat)) {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty())\n        return AcceptStatus.END;\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.getFirst().lower) < 0)\n        return AcceptStatus.NO_AND_SEEK;\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    // final-filter boundary ranges by bounding box\n    if (currentRange.boundary) {\n      final long val = NumericUtils.prefixCodedToLong(term);\n      final double lon = GeoUtils.mortonUnhashLon(val);\n      final double lat = GeoUtils.mortonUnhashLat(val);\n      if (!GeoUtils.bboxContains(lon, lat, minLon, minLat, maxLon, maxLat)) {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc6e227caf7b84b83df6bb987ca077179f03452f","date":1438419526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).lower) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    if (currentRange.boundary) {\n      return postFilterBoundary(term);\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).lower) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    // final-filter boundary ranges by bounding box\n    if (currentRange.boundary) {\n      final long val = NumericUtils.prefixCodedToLong(term);\n      final double lon = GeoUtils.mortonUnhashLon(val);\n      final double lat = GeoUtils.mortonUnhashLat(val);\n      if (!GeoUtils.bboxContains(lon, lat, minLon, minLat, maxLon, maxLat)) {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.YES;\n  }\n\n","bugFix":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a02003eb48495b52b8483703e1b6b48c099ec7d","date":1438767858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).cell) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).lower) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next lower range bound is less or equal current term\n      nextRange();\n    }\n\n    if (currentRange.boundary) {\n      return postFilterBoundary(term);\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599","date":1441910781,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell.get()) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      rangeBounds.get(0).fillBytesRef(this.nextSubRange);\n      if (term.compareTo(this.nextSubRange.get()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(rangeBounds.get(0).cell) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell.get()) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      rangeBounds.get(0).fillBytesRef(this.nextSubRange);\n      if (term.compareTo(this.nextSubRange.get()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell.get()) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      rangeBounds.get(0).fillBytesRef(this.nextSubRange);\n      if (term.compareTo(this.nextSubRange.get()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(peek()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell.get()) > 0) {\n      if (rangeBounds.isEmpty()) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      rangeBounds.get(0).fillBytesRef(this.nextSubRange);\n      if (term.compareTo(this.nextSubRange.get()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc6e227caf7b84b83df6bb987ca077179f03452f":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599","937923083e4d137932336fc80f3d78758ff698a6"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"fc6e227caf7b84b83df6bb987ca077179f03452f":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}