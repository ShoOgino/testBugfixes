{"path":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,SchemaField> getFields() { return fields; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f80211c8197bb79dae092b6ea66a4a839be2add","date":1149580420,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","sourceNew":"  /**\n   * Provides direct access to the Map containing all explicit\n   * (ie: non-dynamic) fields in the index, keyed on field name.\n   *\n   * <p>\n   * Modifying this Map (or any item in it) will affect the real schema\n   * </p>\n   */\n  public Map<String,SchemaField> getFields() { return fields; }\n\n","sourceOld":"  public Map<String,SchemaField> getFields() { return fields; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a","date":1216417422,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","sourceNew":"  /**\n   * Provides direct access to the Map containing all explicit\n   * (ie: non-dynamic) fields in the index, keyed on field name.\n   *\n   * <p>\n   * Modifying this Map (or any item in it) will affect the real schema\n   * </p>\n   * \n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   */\n  public Map<String,SchemaField> getFields() { return fields; }\n\n","sourceOld":"  /**\n   * Provides direct access to the Map containing all explicit\n   * (ie: non-dynamic) fields in the index, keyed on field name.\n   *\n   * <p>\n   * Modifying this Map (or any item in it) will affect the real schema\n   * </p>\n   */\n  public Map<String,SchemaField> getFields() { return fields; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFields().mjava","sourceNew":"  /**\n   * Provides direct access to the Map containing all explicit\n   * (ie: non-dynamic) fields in the index, keyed on field name.\n   *\n   * <p>\n   * Modifying this Map (or any item in it) will affect the real schema\n   * </p>\n   * \n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   */\n  public Map<String,SchemaField> getFields() { return fields; }\n\n","sourceOld":"  /**\n   * Provides direct access to the Map containing all explicit\n   * (ie: non-dynamic) fields in the index, keyed on field name.\n   *\n   * <p>\n   * Modifying this Map (or any item in it) will affect the real schema\n   * </p>\n   * \n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   */\n  public Map<String,SchemaField> getFields() { return fields; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"ad94625fb8d088209f46650c8097196fec67f00c":["c3f722aaea0c06773a393c2b0d41079ba5cb8b0a"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2f80211c8197bb79dae092b6ea66a4a839be2add":["c3f722aaea0c06773a393c2b0d41079ba5cb8b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}