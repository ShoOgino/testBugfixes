{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7","date":1366210710,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    final IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a82662cae660e76ded4de1e9b451633e523d83e1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a82662cae660e76ded4de1e9b451633e523d83e1"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}