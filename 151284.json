{"path":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#radixSort(int,int,int,int).mjava","commits":[{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#radixSort(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#radixSort(int,int,int).mjava","sourceNew":"  /**\n   * @param k the character number to compare\n   * @param l the level of recursion\n   */\n  private void radixSort(int from, int to, int k, int l) {\n    int[] histogram = histograms[l];\n    if (histogram == null) {\n      histogram = histograms[l] = new int[HISTOGRAM_SIZE];\n    } else {\n      Arrays.fill(histogram, 0);\n    }\n\n    final int commonPrefixLength = computeCommonPrefixLengthAndBuildHistogram(from, to, k, histogram);\n    if (commonPrefixLength > 0) {\n      // if there are no more chars to compare or if all entries fell into the\n      // first bucket (which means strings are shorter than k) then we are done\n      // otherwise recurse\n      if (k + commonPrefixLength < maxLength\n          && histogram[0] < to - from) {\n        radixSort(from, to, k + commonPrefixLength, l);\n      }\n      return;\n    }\n    assert assertHistogram(commonPrefixLength, histogram);\n\n    int[] startOffsets = histogram;\n    int[] endOffsets = this.endOffsets;\n    sumHistogram(histogram, endOffsets);\n    reorder(from, to, startOffsets, endOffsets, k);\n    endOffsets = startOffsets;\n\n    if (k + 1 < maxLength) {\n      // recurse on all but the first bucket since all keys are equals in this\n      // bucket (we already compared all bytes)\n      for (int prev = endOffsets[0], i = 1; i < HISTOGRAM_SIZE; ++i) {\n        int h = endOffsets[i];\n        final int bucketLen = h - prev;\n        if (bucketLen > 1) {\n          sort(from + prev, from + h, k + 1, l + 1);\n        }\n        prev = h;\n      }\n    }\n  }\n\n","sourceOld":"  private void radixSort(int from, int to, int k) {\n    int[] histogram = histograms[k];\n    if (histogram == null) {\n      histogram = histograms[k] = new int[HISTOGRAM_SIZE];\n    } else {\n      Arrays.fill(histogram, 0);\n    }\n\n    buildHistogram(from, to, k, histogram);\n\n    // short-circuit: if all keys have the same byte at offset k, then recurse directly\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      if (histogram[i] == to - from) {\n        // everything is in the same bucket, recurse\n        if (i > 0) {\n          sort(from, to, k + 1);\n        }\n        return;\n      } else if (histogram[i] != 0) {\n        break;\n      }\n    }\n\n    int[] startOffsets = histogram;\n    int[] endOffsets = this.endOffsets;\n    sumHistogram(histogram, endOffsets);\n    reorder(from, to, startOffsets, endOffsets, k);\n    endOffsets = startOffsets;\n\n    if (k + 1 < maxLength) {\n      // recurse on all but the first bucket since all keys are equals in this\n      // bucket (we already compared all bytes)\n      for (int prev = endOffsets[0], i = 1; i < HISTOGRAM_SIZE; ++i) {\n        int h = endOffsets[i];\n        final int bucketLen = h - prev;\n        if (bucketLen > 1) {\n          sort(from + prev, from + h, k + 1);\n        }\n        prev = h;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#radixSort(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param k the character number to compare\n   * @param l the level of recursion\n   */\n  private void radixSort(int from, int to, int k, int l) {\n    int[] histogram = histograms[l];\n    if (histogram == null) {\n      histogram = histograms[l] = new int[HISTOGRAM_SIZE];\n    } else {\n      Arrays.fill(histogram, 0);\n    }\n\n    final int commonPrefixLength = computeCommonPrefixLengthAndBuildHistogram(from, to, k, histogram);\n    if (commonPrefixLength > 0) {\n      // if there are no more chars to compare or if all entries fell into the\n      // first bucket (which means strings are shorter than k) then we are done\n      // otherwise recurse\n      if (k + commonPrefixLength < maxLength\n          && histogram[0] < to - from) {\n        radixSort(from, to, k + commonPrefixLength, l);\n      }\n      return;\n    }\n    assert assertHistogram(commonPrefixLength, histogram);\n\n    int[] startOffsets = histogram;\n    int[] endOffsets = this.endOffsets;\n    sumHistogram(histogram, endOffsets);\n    reorder(from, to, startOffsets, endOffsets, k);\n    endOffsets = startOffsets;\n\n    if (k + 1 < maxLength) {\n      // recurse on all but the first bucket since all keys are equals in this\n      // bucket (we already compared all bytes)\n      for (int prev = endOffsets[0], i = 1; i < HISTOGRAM_SIZE; ++i) {\n        int h = endOffsets[i];\n        final int bucketLen = h - prev;\n        if (bucketLen > 1) {\n          sort(from + prev, from + h, k + 1, l + 1);\n        }\n        prev = h;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#radixSort(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param k the character number to compare\n   * @param l the level of recursion\n   */\n  private void radixSort(int from, int to, int k, int l) {\n    int[] histogram = histograms[l];\n    if (histogram == null) {\n      histogram = histograms[l] = new int[HISTOGRAM_SIZE];\n    } else {\n      Arrays.fill(histogram, 0);\n    }\n\n    final int commonPrefixLength = computeCommonPrefixLengthAndBuildHistogram(from, to, k, histogram);\n    if (commonPrefixLength > 0) {\n      // if there are no more chars to compare or if all entries fell into the\n      // first bucket (which means strings are shorter than k) then we are done\n      // otherwise recurse\n      if (k + commonPrefixLength < maxLength\n          && histogram[0] < to - from) {\n        radixSort(from, to, k + commonPrefixLength, l);\n      }\n      return;\n    }\n    assert assertHistogram(commonPrefixLength, histogram);\n\n    int[] startOffsets = histogram;\n    int[] endOffsets = this.endOffsets;\n    sumHistogram(histogram, endOffsets);\n    reorder(from, to, startOffsets, endOffsets, k);\n    endOffsets = startOffsets;\n\n    if (k + 1 < maxLength) {\n      // recurse on all but the first bucket since all keys are equals in this\n      // bucket (we already compared all bytes)\n      for (int prev = endOffsets[0], i = 1; i < HISTOGRAM_SIZE; ++i) {\n        int h = endOffsets[i];\n        final int bucketLen = h - prev;\n        if (bucketLen > 1) {\n          sort(from + prev, from + h, k + 1, l + 1);\n        }\n        prev = h;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}