{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    for(int iter=0;iter<5;iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    for(int iter=0;iter<5*_TestUtil.getRandomMultiplier();iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    for(int iter=0;iter<5;iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    for(int iter=0;iter<5*_TestUtil.getRandomMultiplier();iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    for(int iter=0;iter<5*_TestUtil.getRandomMultiplier();iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = newDirectory(rnd);\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = newDirectory(rnd);\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56b73889eb1d01f9e6df4acab29810fb701abf0d","date":1284810631,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    rnd = newRandom();\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+rnd.nextInt(500);\n        final Directory d = new MockRAMDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = rnd.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        IndexInput in = d.openInput(\"out.bin\");\n        PackedInts.Reader r = PackedInts.getReader(in);\n        assertEquals(fp, in.getFilePointer());\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r.get(i));\n        }\n        in.close();\n\n        in = d.openInput(\"out.bin\");\n        PackedInts.ReaderIterator r2 = PackedInts.getReaderIterator(in);\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i], r2.next());\n        }\n        assertEquals(fp, in.getFilePointer());\n        in.close();\n        ceil *= 2;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = 5 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", IOContext.DEFAULT);\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", IOContext.DEFAULT);\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", IOContext.DEFAULT);\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\");\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\");\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test reader iterator get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.RandomAccessReaderIterator intsEnum = PackedInts.getRandomAccessReaderIterator(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int ord = random.nextInt(valueCount);\n            long seek = intsEnum.get(ord);\n            assertEquals(msg, seek, values[ord]);\n            if (random.nextBoolean() && ord < valueCount-1) {\n              if (random.nextBoolean()) {\n                assertEquals(msg, values[ord+1], intsEnum.advance(ord+1));\n              } else {\n                assertEquals(msg, values[ord+1], intsEnum.next());\n              }\n            }\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test reader iterator get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.RandomAccessReaderIterator intsEnum = PackedInts.getRandomAccessReaderIterator(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int ord = random.nextInt(valueCount);\n            long seek = intsEnum.get(ord);\n            assertEquals(msg, seek, values[ord]);\n            if (random.nextBoolean() && ord < valueCount-1) {\n              if (random.nextBoolean()) {\n                assertEquals(msg, values[ord+1], intsEnum.advance(ord+1));\n              } else {\n                assertEquals(msg, values[ord+1], intsEnum.next());\n              }\n            }\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["56b73889eb1d01f9e6df4acab29810fb701abf0d","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["56b73889eb1d01f9e6df4acab29810fb701abf0d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["e128967bca58657bc0039d4bfe631e63e81f1977"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","56b73889eb1d01f9e6df4acab29810fb701abf0d"],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["56b73889eb1d01f9e6df4acab29810fb701abf0d","f83af14a2a8131b14d7aee6274c740334e0363d3"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f83af14a2a8131b14d7aee6274c740334e0363d3","b6f9be74ca7baaef11857ad002cad40419979516"],"e128967bca58657bc0039d4bfe631e63e81f1977":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["56b73889eb1d01f9e6df4acab29810fb701abf0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}