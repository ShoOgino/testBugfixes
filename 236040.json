{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#applyCollectionHints(SolrCloudManager,Suggester).mjava","commits":[{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#applyCollectionHints(SolrCloudManager,Suggester).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Applies collection hints for all collections that match the {@link #collectionsPredicate}\n   * and returns the number of collections that matched.\n   * @return number of collections that match the {@link #collectionsPredicate}\n   * @throws IOException if {@link org.apache.solr.client.solrj.impl.ClusterStateProvider} throws IOException\n   */\n  private int applyCollectionHints(SolrCloudManager cloudManager, Suggester s) throws IOException {\n    ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n    Set<String> set = clusterState.getCollectionStates().keySet().stream()\n            .filter(collectionRef -> collectionsPredicate.test(collectionRef))\n            .collect(Collectors.toSet());\n    if (set.size() < clusterState.getCollectionStates().size())  {\n      // apply hints only if a subset of collections are selected\n      set.forEach(c -> s.hint(Suggester.Hint.COLL, c));\n    }\n    return set.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#applyCollectionHints(SolrCloudManager,Suggester).mjava","sourceNew":null,"sourceOld":"  /**\n   * Applies collection hints for all collections that match the {@link #collectionsPredicate}\n   * and returns the number of collections that matched.\n   * @return number of collections that match the {@link #collectionsPredicate}\n   * @throws IOException if {@link org.apache.solr.client.solrj.impl.ClusterStateProvider} throws IOException\n   */\n  private int applyCollectionHints(SolrCloudManager cloudManager, Suggester s) throws IOException {\n    ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n    Set<String> set = clusterState.getCollectionStates().keySet().stream()\n            .filter(collectionRef -> collectionsPredicate.test(collectionRef))\n            .collect(Collectors.toSet());\n    if (set.size() < clusterState.getCollectionStates().size())  {\n      // apply hints only if a subset of collections are selected\n      set.forEach(c -> s.hint(Suggester.Hint.COLL, c));\n    }\n    return set.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}