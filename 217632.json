{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyIndexOrdinals(DirectoryReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyIndexOrdinals(DirectoryReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyIndexOrdinals(DirectoryReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams fip) \n      throws IOException {\n    // verify that the ordinals in the index match the ones in the taxonomy, and vice versa\n    \n    // collect all fields which have DocValues, to assert later that all were\n    // visited i.e. that during migration we didn't add FieldInfos with no\n    // DocValues\n    HashSet<String> docValuesFields = new HashSet<String>();\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      FieldInfos infos = context.reader().getFieldInfos();\n      for (FieldInfo info : infos) {\n        if (info.hasDocValues()) {\n          docValuesFields.add(info.name);\n        }\n      }\n    }\n    \n    // check that all visited ordinals are found in the taxonomy and vice versa\n    boolean[] foundOrdinals = new boolean[taxoReader.getSize()];\n    for (int i = 0; i < foundOrdinals.length; i++) {\n      foundOrdinals[i] = false; // init to be on the safe side\n    }\n    foundOrdinals[0] = true; // ROOT ordinals isn't indexed\n    // mark 'dummy' category ordinal as seen\n    int dummyOrdinal = taxoReader.getOrdinal(new CategoryPath(\"dummy\"));\n    if (dummyOrdinal > 0) {\n      foundOrdinals[dummyOrdinal] = true;\n    }\n    \n    int partitionSize = fip.getPartitionSize();\n    int numPartitions = (int) Math.ceil(taxoReader.getSize() / (double) partitionSize);\n    final IntsRef ordinals = new IntsRef(32);\n    for (String dim : DIMENSIONS) {\n      CategoryListParams clp = fip.getCategoryListParams(new CategoryPath(dim));\n      int partitionOffset = 0;\n      for (int partition = 0; partition < numPartitions; partition++, partitionOffset += partitionSize) {\n        final CategoryListIterator cli = clp.createCategoryListIterator(partition);\n        for (AtomicReaderContext context : indexReader.leaves()) {\n          if (cli.setNextReader(context)) { // not all fields may exist in all segments\n            // remove that field from the list of DocValues fields\n            docValuesFields.remove(clp.field + PartitionsUtils.partitionName(partition));\n            int maxDoc = context.reader().maxDoc();\n            for (int doc = 0; doc < maxDoc; doc++) {\n              cli.getOrdinals(doc, ordinals);\n              for (int j = 0; j < ordinals.length; j++) {\n                // verify that the ordinal is recognized by the taxonomy\n                int ordinal = ordinals.ints[j] + partitionOffset;\n                assertTrue(\"should not have received dummy ordinal (\" + dummyOrdinal + \")\", dummyOrdinal != ordinal);\n                assertNotNull(\"missing category for ordinal \" + ordinal, taxoReader.getPath(ordinal));\n                foundOrdinals[ordinal] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    assertTrue(\"some fields which have docValues were not visited: \" + docValuesFields, docValuesFields.isEmpty());\n    \n    for (int i = 0; i < foundOrdinals.length; i++) {\n      assertTrue(\"ordinal \" + i + \" not visited\", foundOrdinals[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyIndexOrdinals(DirectoryReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyIndexOrdinals(DirectoryReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams fip) \n      throws IOException {\n    // verify that the ordinals in the index match the ones in the taxonomy, and vice versa\n    \n    // collect all fields which have DocValues, to assert later that all were\n    // visited i.e. that during migration we didn't add FieldInfos with no\n    // DocValues\n    HashSet<String> docValuesFields = new HashSet<String>();\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      FieldInfos infos = context.reader().getFieldInfos();\n      for (FieldInfo info : infos) {\n        if (info.hasDocValues()) {\n          docValuesFields.add(info.name);\n        }\n      }\n    }\n    \n    // check that all visited ordinals are found in the taxonomy and vice versa\n    boolean[] foundOrdinals = new boolean[taxoReader.getSize()];\n    for (int i = 0; i < foundOrdinals.length; i++) {\n      foundOrdinals[i] = false; // init to be on the safe side\n    }\n    foundOrdinals[0] = true; // ROOT ordinals isn't indexed\n    // mark 'dummy' category ordinal as seen\n    int dummyOrdinal = taxoReader.getOrdinal(new CategoryPath(\"dummy\"));\n    if (dummyOrdinal > 0) {\n      foundOrdinals[dummyOrdinal] = true;\n    }\n    \n    int partitionSize = fip.getPartitionSize();\n    int numPartitions = (int) Math.ceil(taxoReader.getSize() / (double) partitionSize);\n    final IntsRef ordinals = new IntsRef(32);\n    for (String dim : DIMENSIONS) {\n      CategoryListParams clp = fip.getCategoryListParams(new CategoryPath(dim));\n      int partitionOffset = 0;\n      for (int partition = 0; partition < numPartitions; partition++, partitionOffset += partitionSize) {\n        final CategoryListIterator cli = clp.createCategoryListIterator(partition);\n        for (AtomicReaderContext context : indexReader.leaves()) {\n          if (cli.setNextReader(context)) { // not all fields may exist in all segments\n            // remove that field from the list of DocValues fields\n            docValuesFields.remove(clp.field + PartitionsUtils.partitionName(partition));\n            int maxDoc = context.reader().maxDoc();\n            for (int doc = 0; doc < maxDoc; doc++) {\n              cli.getOrdinals(doc, ordinals);\n              for (int j = 0; j < ordinals.length; j++) {\n                // verify that the ordinal is recognized by the taxonomy\n                int ordinal = ordinals.ints[j] + partitionOffset;\n                assertTrue(\"should not have received dummy ordinal (\" + dummyOrdinal + \")\", dummyOrdinal != ordinal);\n                assertNotNull(\"missing category for ordinal \" + ordinal, taxoReader.getPath(ordinal));\n                foundOrdinals[ordinal] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    assertTrue(\"some fields which have docValues were not visited: \" + docValuesFields, docValuesFields.isEmpty());\n    \n    for (int i = 0; i < foundOrdinals.length; i++) {\n      assertTrue(\"ordinal \" + i + \" not visited\", foundOrdinals[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyIndexOrdinals(DirectoryReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyIndexOrdinals(DirectoryReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  private void verifyIndexOrdinals(DirectoryReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams fip) \n      throws IOException {\n    // verify that the ordinals in the index match the ones in the taxonomy, and vice versa\n    \n    // collect all fields which have DocValues, to assert later that all were\n    // visited i.e. that during migration we didn't add FieldInfos with no\n    // DocValues\n    HashSet<String> docValuesFields = new HashSet<String>();\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      FieldInfos infos = context.reader().getFieldInfos();\n      for (FieldInfo info : infos) {\n        if (info.hasDocValues()) {\n          docValuesFields.add(info.name);\n        }\n      }\n    }\n    \n    // check that all visited ordinals are found in the taxonomy and vice versa\n    boolean[] foundOrdinals = new boolean[taxoReader.getSize()];\n    for (int i = 0; i < foundOrdinals.length; i++) {\n      foundOrdinals[i] = false; // init to be on the safe side\n    }\n    foundOrdinals[0] = true; // ROOT ordinals isn't indexed\n    // mark 'dummy' category ordinal as seen\n    int dummyOrdinal = taxoReader.getOrdinal(new CategoryPath(\"dummy\"));\n    if (dummyOrdinal > 0) {\n      foundOrdinals[dummyOrdinal] = true;\n    }\n    \n    int partitionSize = fip.getPartitionSize();\n    int numPartitions = (int) Math.ceil(taxoReader.getSize() / (double) partitionSize);\n    final IntsRef ordinals = new IntsRef(32);\n    for (String dim : DIMENSIONS) {\n      CategoryListParams clp = fip.getCategoryListParams(new CategoryPath(dim));\n      int partitionOffset = 0;\n      for (int partition = 0; partition < numPartitions; partition++, partitionOffset += partitionSize) {\n        final CategoryListIterator cli = clp.createCategoryListIterator(partition);\n        for (AtomicReaderContext context : indexReader.leaves()) {\n          if (cli.setNextReader(context)) { // not all fields may exist in all segments\n            // remove that field from the list of DocValues fields\n            docValuesFields.remove(clp.field + PartitionsUtils.partitionName(partition));\n            int maxDoc = context.reader().maxDoc();\n            for (int doc = 0; doc < maxDoc; doc++) {\n              cli.getOrdinals(doc, ordinals);\n              for (int j = 0; j < ordinals.length; j++) {\n                // verify that the ordinal is recognized by the taxonomy\n                int ordinal = ordinals.ints[j] + partitionOffset;\n                assertTrue(\"should not have received dummy ordinal (\" + dummyOrdinal + \")\", dummyOrdinal != ordinal);\n                assertNotNull(\"missing category for ordinal \" + ordinal, taxoReader.getPath(ordinal));\n                foundOrdinals[ordinal] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    assertTrue(\"some fields which have docValues were not visited: \" + docValuesFields, docValuesFields.isEmpty());\n    \n    for (int i = 0; i < foundOrdinals.length; i++) {\n      assertTrue(\"ordinal \" + i + \" not visited\", foundOrdinals[i]);\n    }\n  }\n\n","sourceOld":"  private void verifyIndexOrdinals(DirectoryReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams fip) \n      throws IOException {\n    // verify that the ordinals in the index match the ones in the taxonomy, and vice versa\n    \n    // collect all fields which have DocValues, to assert later that all were\n    // visited i.e. that during migration we didn't add FieldInfos with no\n    // DocValues\n    HashSet<String> docValuesFields = new HashSet<String>();\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      FieldInfos infos = context.reader().getFieldInfos();\n      for (FieldInfo info : infos) {\n        if (info.hasDocValues()) {\n          docValuesFields.add(info.name);\n        }\n      }\n    }\n    \n    // check that all visited ordinals are found in the taxonomy and vice versa\n    boolean[] foundOrdinals = new boolean[taxoReader.getSize()];\n    for (int i = 0; i < foundOrdinals.length; i++) {\n      foundOrdinals[i] = false; // init to be on the safe side\n    }\n    foundOrdinals[0] = true; // ROOT ordinals isn't indexed\n    // mark 'dummy' category ordinal as seen\n    int dummyOrdinal = taxoReader.getOrdinal(new CategoryPath(\"dummy\"));\n    if (dummyOrdinal > 0) {\n      foundOrdinals[dummyOrdinal] = true;\n    }\n    \n    int partitionSize = fip.getPartitionSize();\n    int numPartitions = (int) Math.ceil(taxoReader.getSize() / (double) partitionSize);\n    final IntsRef ordinals = new IntsRef(32);\n    for (String dim : DIMENSIONS) {\n      CategoryListParams clp = fip.getCategoryListParams(new CategoryPath(dim));\n      int partitionOffset = 0;\n      for (int partition = 0; partition < numPartitions; partition++, partitionOffset += partitionSize) {\n        final CategoryListIterator cli = clp.createCategoryListIterator(partition);\n        for (AtomicReaderContext context : indexReader.leaves()) {\n          if (cli.setNextReader(context)) { // not all fields may exist in all segments\n            // remove that field from the list of DocValues fields\n            docValuesFields.remove(clp.field + PartitionsUtils.partitionName(partition));\n            int maxDoc = context.reader().maxDoc();\n            for (int doc = 0; doc < maxDoc; doc++) {\n              cli.getOrdinals(doc, ordinals);\n              for (int j = 0; j < ordinals.length; j++) {\n                // verify that the ordinal is recognized by the taxonomy\n                int ordinal = ordinals.ints[j] + partitionOffset;\n                assertTrue(\"should not have received dummy ordinal (\" + dummyOrdinal + \")\", dummyOrdinal != ordinal);\n                assertNotNull(\"missing category for ordinal \" + ordinal, taxoReader.getPath(ordinal));\n                foundOrdinals[ordinal] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    assertTrue(\"some fields which have docValues were not visited: \" + docValuesFields, docValuesFields.isEmpty());\n    \n    for (int i = 0; i < foundOrdinals.length; i++) {\n      assertTrue(\"ordinal \" + i + \" not visited\", foundOrdinals[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}