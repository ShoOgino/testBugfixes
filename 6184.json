{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":2,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","sourceNew":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","sourceNew":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["85eb75e0c0203e44dcf686f35876cf6080f3a671","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}