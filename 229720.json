{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random, 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random);\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Sometimes swap in codec that impls ord():\n    if (random.nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new NumericField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random, 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random.nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random, 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random);\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Sometimes swap in codec that impls ord():\n    if (random.nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new NumericField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random, 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random.nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random, 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random);\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Sometimes swap in codec that impls ord():\n    if (random.nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random, 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random.nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random, 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random);\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Sometimes swap in codec that impls ord():\n    if (random.nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new NumericField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random, 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random.nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random, 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random);\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Sometimes swap in codec that impls ord():\n    if (random.nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random, 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random.nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newField(\"field\", termsArray[ord].utf8ToString(), StringField.TYPE_UNSTORED);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["95ae76773bf2b95987d5f9c8f566ab3738953fb4","da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(IndexReader subR : r.getSequentialSubReaders()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + subR);\n        }\n        verify((AtomicReader) subR, idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.NO));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene40WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dcffe8fc78b093a5f4207f492bbae185740f6a","date":1380887572,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purge(slowR);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = _TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = _TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = _TestUtil.nextInt(random(), 0, 20*RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<String>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<BytesRef>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<Integer>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<Integer>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testRandomWithPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testRandomWithPrefix().mjava","sourceNew":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomWithPrefix() throws Exception {\n    Directory dir = newDirectory();\n\n    final Set<String> prefixes = new HashSet<>();\n    final int numPrefix = TestUtil.nextInt(random(), 2, 7);\n    if (VERBOSE) {\n      System.out.println(\"TEST: use \" + numPrefix + \" prefixes\");\n    }\n    while(prefixes.size() < numPrefix) {\n      prefixes.add(TestUtil.randomRealisticUnicodeString(random()));\n      //prefixes.add(_TestUtil.randomSimpleString(random));\n    }\n    final String[] prefixesArray = prefixes.toArray(new String[prefixes.size()]);\n\n    final int NUM_TERMS = atLeast(20);\n    final Set<BytesRef> terms = new HashSet<>();\n    while(terms.size() < NUM_TERMS) {\n      final String s = prefixesArray[random().nextInt(prefixesArray.length)] + TestUtil.randomRealisticUnicodeString(random());\n      //final String s = prefixesArray[random.nextInt(prefixesArray.length)] + _TestUtil.randomSimpleString(random);\n      if (s.length() > 0) {\n        terms.add(new BytesRef(s));\n      }\n    }\n    final BytesRef[] termsArray = terms.toArray(new BytesRef[terms.size()]);\n    Arrays.sort(termsArray);\n    \n    final int NUM_DOCS = atLeast(100);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Sometimes swap in codec that impls ord():\n    if (random().nextInt(10) == 7) {\n      Codec codec = TestUtil.alwaysPostingsFormat(PostingsFormat.forName(\"Lucene41WithOrds\"));\n      conf.setCodec(codec);\n    }\n    \n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, conf);\n\n    final int[][] idToOrds = new int[NUM_DOCS][];\n    final Set<Integer> ordsForDocSet = new HashSet<>();\n\n    for(int id=0;id<NUM_DOCS;id++) {\n      Document doc = new Document();\n\n      doc.add(new IntField(\"id\", id, Field.Store.YES));\n      \n      final int termCount = TestUtil.nextInt(random(), 0, 20 * RANDOM_MULTIPLIER);\n      while(ordsForDocSet.size() < termCount) {\n        ordsForDocSet.add(random().nextInt(termsArray.length));\n      }\n      final int[] ordsForDoc = new int[termCount];\n      int upto = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: doc id=\" + id);\n      }\n      for(int ord : ordsForDocSet) {\n        ordsForDoc[upto++] = ord;\n        Field field = newStringField(\"field\", termsArray[ord].utf8ToString(), Field.Store.NO);\n        if (VERBOSE) {\n          System.out.println(\"  f=\" + termsArray[ord].utf8ToString());\n        }\n        doc.add(field);\n      }\n      ordsForDocSet.clear();\n      Arrays.sort(ordsForDoc);\n      idToOrds[id] = ordsForDoc;\n      w.addDocument(doc);\n    }\n    \n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + r);\n    }\n    \n    AtomicReader slowR = SlowCompositeReaderWrapper.wrap(r);\n    for(String prefix : prefixesArray) {\n\n      final BytesRef prefixRef = prefix == null ? null : new BytesRef(prefix);\n\n      final int[][] idToOrdsPrefix = new int[NUM_DOCS][];\n      for(int id=0;id<NUM_DOCS;id++) {\n        final int[] docOrds = idToOrds[id];\n        final List<Integer> newOrds = new ArrayList<>();\n        for(int ord : idToOrds[id]) {\n          if (StringHelper.startsWith(termsArray[ord], prefixRef)) {\n            newOrds.add(ord);\n          }\n        }\n        final int[] newOrdsArray = new int[newOrds.size()];\n        int upto = 0;\n        for(int ord : newOrds) {\n          newOrdsArray[upto++] = ord;\n        }\n        idToOrdsPrefix[id] = newOrdsArray;\n      }\n\n      for(AtomicReaderContext ctx : r.leaves()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: sub=\" + ctx.reader());\n        }\n        verify(ctx.reader(), idToOrdsPrefix, termsArray, prefixRef);\n      }\n\n      // Also test top-level reader: its enum does not support\n      // ord, so this forces the OrdWrapper to run:\n      if (VERBOSE) {\n        System.out.println(\"TEST: top reader\");\n      }\n      verify(slowR, idToOrdsPrefix, termsArray, prefixRef);\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(slowR.getCoreCacheKey());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"aba371508186796cc6151d8223a5b4e16d02e26e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","d19974432be9aed28ee7dca73bdf01d139e763a9"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["1d028314cced5858683a1bb4741423d0f934257b","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["1d028314cced5858683a1bb4741423d0f934257b","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["aba371508186796cc6151d8223a5b4e16d02e26e"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["1d028314cced5858683a1bb4741423d0f934257b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d19974432be9aed28ee7dca73bdf01d139e763a9"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["56572ec06f1407c066d6b7399413178b33176cd8","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","1d028314cced5858683a1bb4741423d0f934257b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["d2dcffe8fc78b093a5f4207f492bbae185740f6a","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","56572ec06f1407c066d6b7399413178b33176cd8","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}