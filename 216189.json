{"path":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","commits":[{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie#insert(List[String],Map[String,String],T).mjava","sourceNew":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","sourceOld":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie#insert(List[String],Map[String,String],T).mjava","sourceNew":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","sourceOld":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie#insert(List[String],Map[String,String],T).mjava","sourceNew":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","sourceOld":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie#insert(List[String],Map[String,String],T).mjava","sourceNew":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n    replaceTemplates(parts, replacements);\n    root.insert(parts, o);\n  }\n\n","sourceOld":"  public void insert(List<String> parts, Map<String, String> replacements, T o) {\n    if (parts.isEmpty()) {\n      root.obj = o;\n      return;\n    }\n\n    for (int i = 0; i < parts.size(); i++) {\n      String part = parts.get(i);\n      if (part.charAt(0) == '$') {\n        String replacement = replacements.get(part.substring(1));\n        if (replacement == null) {\n          throw new RuntimeException(part + \" is not provided\");\n        }\n        replacement = replacement.charAt(0) == '/' ? replacement.substring(1) : replacement;\n        parts.set(i, replacement);\n      }\n    }\n\n    root.insert(parts, o);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}