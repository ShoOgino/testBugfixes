{"path":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","commits":[{"id":"f0ccb38525d59e4082f912797fe4d0a7d9bead43","date":1245100309,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/index/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    final MockRAMDirectory ramDir = new MockRAMDirectory(indexDir.getCanonicalPath());\n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedba8c41772c90fab237170d639e910d36f7755","date":1259780364,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n            synchronized (ramDir) {\n              assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f0ccb38525d59e4082f912797fe4d0a7d9bead43","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"bedba8c41772c90fab237170d639e910d36f7755":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"f0ccb38525d59e4082f912797fe4d0a7d9bead43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["f0ccb38525d59e4082f912797fe4d0a7d9bead43"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["bedba8c41772c90fab237170d639e910d36f7755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"bedba8c41772c90fab237170d639e910d36f7755":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"f0ccb38525d59e4082f912797fe4d0a7d9bead43":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["bedba8c41772c90fab237170d639e910d36f7755"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0ccb38525d59e4082f912797fe4d0a7d9bead43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}