{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","commits":[{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a query and compares the results with the data available in the \n   * {@link PivotField} constraint -- this method is not recursive, and doesn't \n   * check anything about the sub-pivots (if any).\n   *\n   * @param pivotName pivot name\n   * @param constraint filters on pivot\n   * @param params base solr parameters\n   */\n  private void assertPivotData(String pivotName, PivotField constraint, SolrParams params) \n    throws SolrServerException {\n    \n    SolrParams p = SolrParams.wrapDefaults(params(\"rows\",\"0\"), params);\n    QueryResponse res = cloudClient.query(p);\n    String msg = pivotName + \": \" + p;\n\n    assertNumFound(msg, constraint.getCount(), res);\n\n    if ( p.getBool(StatsParams.STATS, false) ) {\n      // only check stats if stats expected\n      assertPivotStats(msg, constraint, res);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query and compares the results with the data available in the \n   * {@link PivotField} constraint -- this method is not recursive, and doesn't \n   * check anything about the sub-pivots (if any).\n   *\n   * @param pivotName pivot name\n   * @param constraint filters on pivot\n   * @param params base solr parameters\n   */\n  private void assertPivotData(String pivotName, PivotField constraint, SolrParams params)\n      throws SolrServerException, IOException {\n    \n    SolrParams p = SolrParams.wrapDefaults(params(\"rows\",\"0\"), params);\n    QueryResponse res = cloudClient.query(p);\n    String msg = pivotName + \": \" + p;\n\n    assertNumFound(msg, constraint.getCount(), res);\n\n    if ( p.getBool(StatsParams.STATS, false) ) {\n      // only check stats if stats expected\n      assertPivotStats(msg, constraint, res);\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a query and compares the results with the data available in the \n   * {@link PivotField} constraint -- this method is not recursive, and doesn't \n   * check anything about the sub-pivots (if any).\n   *\n   * @param pivotName pivot name\n   * @param constraint filters on pivot\n   * @param params base solr parameters\n   */\n  private void assertPivotData(String pivotName, PivotField constraint, SolrParams params) \n    throws SolrServerException {\n    \n    SolrParams p = SolrParams.wrapDefaults(params(\"rows\",\"0\"), params);\n    QueryResponse res = cloudClient.query(p);\n    String msg = pivotName + \": \" + p;\n\n    assertNumFound(msg, constraint.getCount(), res);\n\n    if ( p.getBool(StatsParams.STATS, false) ) {\n      // only check stats if stats expected\n      assertPivotStats(msg, constraint, res);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotData(String,PivotField,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query and compares the results with the data available in the \n   * {@link PivotField} constraint -- this method is not recursive, and doesn't \n   * check anything about the sub-pivots (if any).\n   *\n   * @param pivotName pivot name\n   * @param constraint filters on pivot\n   * @param params base solr parameters\n   */\n  private void assertPivotData(String pivotName, PivotField constraint, SolrParams params)\n      throws SolrServerException, IOException {\n    \n    SolrParams p = SolrParams.wrapDefaults(params(\"rows\",\"0\"), params);\n    QueryResponse res = cloudClient.query(p);\n    String msg = pivotName + \": \" + p;\n\n    assertNumFound(msg, constraint.getCount(), res);\n\n    if ( p.getBool(StatsParams.STATS, false) ) {\n      // only check stats if stats expected\n      assertPivotStats(msg, constraint, res);\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a query and compares the results with the data available in the \n   * {@link PivotField} constraint -- this method is not recursive, and doesn't \n   * check anything about the sub-pivots (if any).\n   *\n   * @param pivotName pivot name\n   * @param constraint filters on pivot\n   * @param params base solr parameters\n   */\n  private void assertPivotData(String pivotName, PivotField constraint, SolrParams params) \n    throws SolrServerException {\n    \n    SolrParams p = SolrParams.wrapDefaults(params(\"rows\",\"0\"), params);\n    QueryResponse res = cloudClient.query(p);\n    String msg = pivotName + \": \" + p;\n\n    assertNumFound(msg, constraint.getCount(), res);\n\n    if ( p.getBool(StatsParams.STATS, false) ) {\n      // only check stats if stats expected\n      assertPivotStats(msg, constraint, res);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4c18a95e9168a30be855f5d5e7d61a863186fdc5","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}