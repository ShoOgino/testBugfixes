{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46bf1a48fd33bf34430ade646b7dd67b984be2a8","date":1358725746,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d138de075f63ca3be0fce7c1404cd919229b277","date":1399829699,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        boolean useDv = !multipleFacetsPerDocument && context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(useDv ? \"group_dv\" : \"group\", useDv ? \"facet_dv\" : \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Use DV: \" + useDv);\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        GroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        GroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = atLeast(1);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        GroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: searcher=\" + searcher);\n      }\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: searchIter=\" + searchIter);\n        }\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        GroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 0;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 0;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(Locale.ROOT,\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n        \n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(\"i=\" + i + \": \" + expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d138de075f63ca3be0fce7c1404cd919229b277":["6613659748fe4411a7dcf85266e55db1f95f7315"],"20e94e61fe5291647346b70437617e6b6c370408":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["93dd449115a9247533e44bab47e8429e5dccbc6d","20e94e61fe5291647346b70437617e6b6c370408"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"56572ec06f1407c066d6b7399413178b33176cd8":["6613659748fe4411a7dcf85266e55db1f95f7315","93dd449115a9247533e44bab47e8429e5dccbc6d"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["854f97cd3613b9579fba83755c80b697e2f3993f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["2acf500f78aa12b92e371fd89c719291986b6b90","46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["6613659748fe4411a7dcf85266e55db1f95f7315","1d138de075f63ca3be0fce7c1404cd919229b277"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"854f97cd3613b9579fba83755c80b697e2f3993f":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"1d138de075f63ca3be0fce7c1404cd919229b277":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","71da933d30aea361ccc224d6544c451cbf49916d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1d138de075f63ca3be0fce7c1404cd919229b277","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","854f97cd3613b9579fba83755c80b697e2f3993f"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"854f97cd3613b9579fba83755c80b697e2f3993f":["46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}