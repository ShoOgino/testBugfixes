{"path":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","commits":[{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(Searcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(Searcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(Searcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","sourceNew":null,"sourceOld":"  private void checkHits(Searcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}