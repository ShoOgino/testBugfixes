{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(LeafReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(LeafReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":1,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast, Version version) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, version);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // doSlowChecks is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, doSlowChecks);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"30c8e5574b55d57947e989443dfde611646530ee":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cc018b79379c67835b40b1259cd3dc931df60944"],"9a0e5953a07337cd41bcde610503024c07073b26":["cc018b79379c67835b40b1259cd3dc931df60944"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["0f4464508ee83288c8c4585b533f9faaa93aa314","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0e5953a07337cd41bcde610503024c07073b26"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","507e7decdf00981d09a74632ea30299a4ce6ba72"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","9a0e5953a07337cd41bcde610503024c07073b26"],"30c8e5574b55d57947e989443dfde611646530ee":[],"9a0e5953a07337cd41bcde610503024c07073b26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}