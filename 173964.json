{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","commits":[{"id":"e89c3770b3944888d0ff89f39fe010644f0d1854","date":1171287140,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // read until finding a line that starts with the specified prefix\r\n  private StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\r\n    sb = (sb==null ? new StringBuffer() : sb);\r\n    String sep = \"\";\r\n    while (true) {\r\n      String line = reader.readLine();\r\n      if (line==null) {\r\n        openNextFile();\r\n        continue;\r\n      }\r\n      if (line.startsWith(prefix)) {\r\n        if (collectMatchLine) {\r\n          sb.append(sep+line);\r\n          sep = newline;\r\n        }\r\n        break;\r\n      }\r\n      if (collectAll) {\r\n        sb.append(sep+line);\r\n        sep = newline;\r\n      }\r\n    }\r\n    //System.out.println(\"read: \"+sb);\r\n    return sb;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\r\n  private StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\r\n    sb = (sb==null ? new StringBuffer() : sb);\r\n    String sep = \"\";\r\n    while (true) {\r\n      String line = reader.readLine();\r\n      if (line==null) {\r\n        openNextFile();\r\n        continue;\r\n      }\r\n      if (line.startsWith(prefix)) {\r\n        if (collectMatchLine) {\r\n          sb.append(sep+line);\r\n          sep = newline;\r\n        }\r\n        break;\r\n      }\r\n      if (collectAll) {\r\n        sb.append(sep+line);\r\n        sep = newline;\r\n      }\r\n    }\r\n    //System.out.println(\"read: \"+sb);\r\n    return sb;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eeda7231e55f9169d1f3d85af46d79460dffe08","date":1201723419,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  protected StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e","date":1231760243,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean,String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  protected StringBuffer read(String prefix, StringBuffer sb,\n                              boolean collectMatchLine, boolean collectAll,\n                              String terminatingTag) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n      \n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n    \t  // didn't find the prefix that was asked, but the terminating\n    \t  // tag was found. set the length to 0 to signal no match was\n    \t  // found.\n    \t  sb.setLength(0);\n    \t  break;\n      }\n\t\t\n\n      if (collectAll) {\n        sb.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  protected StringBuffer read (String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6eeda7231e55f9169d1f3d85af46d79460dffe08":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["e89c3770b3944888d0ff89f39fe010644f0d1854"],"e89c3770b3944888d0ff89f39fe010644f0d1854":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"]},"commit2Childs":{"6eeda7231e55f9169d1f3d85af46d79460dffe08":["f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e89c3770b3944888d0ff89f39fe010644f0d1854"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"e89c3770b3944888d0ff89f39fe010644f0d1854":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}