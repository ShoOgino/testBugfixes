{"path":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n        if (i < fields.length - 1) {\n          buffer.append(',');\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"881f3cbef4fe1d74529367acf824c7394e2dd11c","date":1248894847,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n        if (i < fields.length - 1) {\n          buffer.append(',');\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuffer buffer = new StringBuffer();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8a9e385641d717e641408d8fbbc62be8fc766357":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["8a9e385641d717e641408d8fbbc62be8fc766357"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}