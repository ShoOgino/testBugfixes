{"path":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int,boolean).mjava","commits":[{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":1,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @param filterNonCompetitiveDocs\n   *    {@code true} If comparators should be allowed to filter non-competitive documents, {@code false} otherwise\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size,\n      boolean filterNonCompetitiveDocs) {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<>(fields, size, filterNonCompetitiveDocs);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<>(fields, size, filterNonCompetitiveDocs);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<>(fields, size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":5,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int,boolean).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<>(fields, size);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @param filterNonCompetitiveDocs\n   *    {@code true} If comparators should be allowed to filter non-competitive documents, {@code false} otherwise\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size,\n      boolean filterNonCompetitiveDocs) {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<>(fields, size, filterNonCompetitiveDocs);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<>(fields, size, filterNonCompetitiveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}