{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#doGetReaderWithUpdates(IOContext).mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#doGetReaderWithUpdates(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  private SegmentReader doGetReaderWithUpdates(IOContext context) throws IOException {\n    boolean checkpoint = false;\n    try {\n      // don't synchronize the entire method because we cannot call\n      // writer.checkpoint() while holding the RLD lock, otherwise we might hit\n      // a deadlock w/ e.g. a concurrent merging thread.\n      synchronized (this) {\n        checkpoint = writeLiveDocs(info.info.dir);\n        if (reader == null) {\n          // We steal returned ref:\n          reader = new SegmentReader(info, context);\n          if (liveDocs == null) {\n            liveDocs = reader.getLiveDocs();\n          }\n        } else if (checkpoint) {\n          // enroll a new reader with the applied updates\n          reopenReader(context);\n        }\n        \n        // Ref for caller\n        reader.incRef();\n        return reader;\n      }\n    } finally {\n      if (checkpoint) {\n        writer.checkpoint();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e4e08ceec867127dcd9913a5ebbc46cf85a28d","date":1379651991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#doGetReaderWithUpdates(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#doGetReaderWithUpdates(IOContext).mjava","sourceNew":"  private synchronized SegmentReader doGetReaderWithUpdates(IOContext context) throws IOException {\n    assert Thread.holdsLock(writer); // when we get here, we should already have the writer lock\n    boolean checkpoint = false;\n    try {\n      checkpoint = writeLiveDocs(info.info.dir);\n      if (reader == null) {\n        // We steal returned ref:\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.doGetReaderWithUpdates: newSR \" + info);\n        reader = new SegmentReader(info, context);\n        if (liveDocs == null) {\n          liveDocs = reader.getLiveDocs();\n        }\n      } else if (checkpoint) {\n        // enroll a new reader with the applied updates\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.doGetReaderWithUpdates: reopenReader \" + info);\n        reopenReader(context);\n      }\n      \n      // Ref for caller\n      reader.incRef();\n      return reader;\n    } finally {\n      if (checkpoint) {\n        writer.checkpoint();\n      }\n    }\n  }\n\n","sourceOld":"  private SegmentReader doGetReaderWithUpdates(IOContext context) throws IOException {\n    boolean checkpoint = false;\n    try {\n      // don't synchronize the entire method because we cannot call\n      // writer.checkpoint() while holding the RLD lock, otherwise we might hit\n      // a deadlock w/ e.g. a concurrent merging thread.\n      synchronized (this) {\n        checkpoint = writeLiveDocs(info.info.dir);\n        if (reader == null) {\n          // We steal returned ref:\n          reader = new SegmentReader(info, context);\n          if (liveDocs == null) {\n            liveDocs = reader.getLiveDocs();\n          }\n        } else if (checkpoint) {\n          // enroll a new reader with the applied updates\n          reopenReader(context);\n        }\n        \n        // Ref for caller\n        reader.incRef();\n        return reader;\n      }\n    } finally {\n      if (checkpoint) {\n        writer.checkpoint();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#doGetReaderWithUpdates(IOContext).mjava","sourceNew":null,"sourceOld":"  private synchronized SegmentReader doGetReaderWithUpdates(IOContext context) throws IOException {\n    assert Thread.holdsLock(writer); // when we get here, we should already have the writer lock\n    boolean checkpoint = false;\n    try {\n      checkpoint = writeLiveDocs(info.info.dir);\n      if (reader == null) {\n        // We steal returned ref:\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.doGetReaderWithUpdates: newSR \" + info);\n        reader = new SegmentReader(info, context);\n        if (liveDocs == null) {\n          liveDocs = reader.getLiveDocs();\n        }\n      } else if (checkpoint) {\n        // enroll a new reader with the applied updates\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.doGetReaderWithUpdates: reopenReader \" + info);\n        reopenReader(context);\n      }\n      \n      // Ref for caller\n      reader.incRef();\n      return reader;\n    } finally {\n      if (checkpoint) {\n        writer.checkpoint();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}