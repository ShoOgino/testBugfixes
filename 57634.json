{"path":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","sourceNew":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","sourceOld":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629","date":1297191928,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","sourceNew":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","sourceOld":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkSerialization(Query,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, IndexSearcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["f1bdbf92da222965b46c0a942c3857ba56e5c638","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}