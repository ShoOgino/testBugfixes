{"path":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long size() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long size() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long size() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","3cc749c053615f5871f3b95715fe292f34e70a53","25833e37398c5210d7bddaca9d14de45e194439a","25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long size() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a","date":1358789155,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","25833e37398c5210d7bddaca9d14de45e194439a","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5a238fc456663f685a9db1ed8d680e348bb45171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","0935c850ea562932997b72c69d93e345f21d7f45"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0935c850ea562932997b72c69d93e345f21d7f45","49bbfc33f80659ba9aa9d301edaae82dd4e01b5a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffced88b5e83e2ec0a42723404a647e766d96b8c"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["49bbfc33f80659ba9aa9d301edaae82dd4e01b5a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"0935c850ea562932997b72c69d93e345f21d7f45":["29f7cc7c185412da66c1d0089d9e75da01329a00","c7869f64c874ebf7f317d22c00baf2b6857797a6","d4d69c535930b5cce125cff868d40f6373dc27d4","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}