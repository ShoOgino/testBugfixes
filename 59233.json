{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(\"sort\"), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","sourceNew":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(SORT), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","sourceOld":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(\"sort\"), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","sourceNew":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(SORT), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","sourceOld":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(\"sort\"), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.GroupHeadSelector#build(SolrParams).mjava","sourceNew":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(SORT), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n\n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","sourceOld":"    /**\n     * returns a new GroupHeadSelector based on the specified local params\n     */\n    public static GroupHeadSelector build(final SolrParams localParams) {\n      final String sortString = StringUtils.defaultIfBlank(localParams.get(SORT), null);\n      final String max = StringUtils.defaultIfBlank(localParams.get(\"max\"), null);\n      final String min = StringUtils.defaultIfBlank(localParams.get(\"min\"), null);\n\n      if (1 < numNotNull(min, max, sortString)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"At most one localparam for selecting documents (min, max, sort) may be specified: \" + localParams.toString());\n      }\n      \n      if (null != sortString) {\n        return new GroupHeadSelector(sortString, GroupHeadSelectorType.SORT);\n      } else if (null != min) {\n        return new GroupHeadSelector(min, GroupHeadSelectorType.MIN);\n      } else if (null != max) {\n        return new GroupHeadSelector(max, GroupHeadSelectorType.MAX);\n      }\n      // default\n      return new GroupHeadSelector(\"score\", GroupHeadSelectorType.SCORE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01624b85de12fb02335810bdf325124e59040772":["0325de99180d346d61d36938843a5c8451fe26ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"]},"commit2Childs":{"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"0325de99180d346d61d36938843a5c8451fe26ae":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}