{"path":"lucene/src/java/org/apache/lucene/util/packed/DirectReader#get(int).mjava","commits":[{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/DirectReader#get(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long get(int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final long result;\n    try {\n      in.seek(startPointer + (elementPos << 3));\n      final long l1 = in.readLong();\n      final int bits1 = 64 - bitPos;\n      if (bits1 >= bitsPerValue) { // not split\n        result = l1 >> (bits1-bitsPerValue) & masks[bitsPerValue-1];\n      } else {\n        final int bits2 = bitsPerValue - bits1;\n        final long result1 = (l1 & masks[bits1-1]) << bits2;\n        final long l2 = in.readLong();\n        final long result2 = l2 >> (64 - bits2) & masks[bits2-1];\n        result = result1 | result2;\n      }\n\n      return result;\n    } catch (IOException ioe) {\n      throw new IllegalStateException(\"failed\", ioe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectReader#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/DirectReader#get(int).mjava","sourceNew":"  @Override\n  public long get(int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final long result;\n    try {\n      in.seek(startPointer + (elementPos << 3));\n      final long l1 = in.readLong();\n      final int bits1 = 64 - bitPos;\n      if (bits1 >= bitsPerValue) { // not split\n        result = l1 >> (bits1-bitsPerValue) & masks[bitsPerValue-1];\n      } else {\n        final int bits2 = bitsPerValue - bits1;\n        final long result1 = (l1 & masks[bits1-1]) << bits2;\n        final long l2 = in.readLong();\n        final long result2 = l2 >> (64 - bits2) & masks[bits2-1];\n        result = result1 | result2;\n      }\n\n      return result;\n    } catch (IOException ioe) {\n      throw new IllegalStateException(\"failed\", ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long get(int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final long result;\n    try {\n      in.seek(startPointer + (elementPos << 3));\n      final long l1 = in.readLong();\n      final int bits1 = 64 - bitPos;\n      if (bits1 >= bitsPerValue) { // not split\n        result = l1 >> (bits1-bitsPerValue) & masks[bitsPerValue-1];\n      } else {\n        final int bits2 = bitsPerValue - bits1;\n        final long result1 = (l1 & masks[bits1-1]) << bits2;\n        final long l2 = in.readLong();\n        final long result2 = l2 >> (64 - bits2) & masks[bits2-1];\n        result = result1 | result2;\n      }\n\n      return result;\n    } catch (IOException ioe) {\n      throw new IllegalStateException(\"failed\", ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}