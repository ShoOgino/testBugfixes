{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","commits":[{"id":"b449b4b37911e64cb1cb1bd51f4e6a11af170bd4","date":1321543250,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = termsEnum.docs(null, docsEnum);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = termsEnum.docs(null, docsEnum);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = termsEnum.docs(null, docsEnum);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b449b4b37911e64cb1cb1bd51f4e6a11af170bd4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["b449b4b37911e64cb1cb1bd51f4e6a11af170bd4","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b449b4b37911e64cb1cb1bd51f4e6a11af170bd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b449b4b37911e64cb1cb1bd51f4e6a11af170bd4":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b449b4b37911e64cb1cb1bd51f4e6a11af170bd4"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}