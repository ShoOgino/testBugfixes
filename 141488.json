{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#segmentSentence(String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#segmentSentence(String,int).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#segmentSentence(String,int).mjava","sourceNew":"  /**\n   * Segment a sentence into words with {@link HHMMSegmenter}\n   * \n   * @param sentence input sentence\n   * @param startOffset start offset of sentence\n   * @return {@link List} of {@link SegToken}\n   */\n  public List<SegToken> segmentSentence(String sentence, int startOffset) {\n\n    List<SegToken> segTokenList = hhmmSegmenter.process(sentence);\n    // tokens from sentence, excluding WordType.SENTENCE_BEGIN and WordType.SENTENCE_END\n    List<SegToken> result = Collections.emptyList();\n    \n    if (segTokenList.size() > 2) // if its not an empty sentence\n      result = segTokenList.subList(1, segTokenList.size() - 1);\n    \n    for (SegToken st : result)\n      convertSegToken(st, sentence, startOffset);\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Segment a sentence into words with {@link HHMMSegmenter}\n   * \n   * @param sentence input sentence\n   * @param startOffset start offset of sentence\n   * @return {@link List} of {@link SegToken}\n   */\n  public List<SegToken> segmentSentence(String sentence, int startOffset) {\n\n    List<SegToken> segTokenList = hhmmSegmenter.process(sentence);\n    // tokens from sentence, excluding WordType.SENTENCE_BEGIN and WordType.SENTENCE_END\n    List<SegToken> result = Collections.emptyList();\n    \n    if (segTokenList.size() > 2) // if its not an empty sentence\n      result = segTokenList.subList(1, segTokenList.size() - 1);\n    \n    for (SegToken st : result)\n      convertSegToken(st, sentence, startOffset);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#segmentSentence(String,int).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#segmentSentence(String,int).mjava","sourceNew":"  /**\n   * Segment a sentence into words with {@link HHMMSegmenter}\n   * \n   * @param sentence input sentence\n   * @param startOffset start offset of sentence\n   * @return {@link List} of {@link SegToken}\n   */\n  public List<SegToken> segmentSentence(String sentence, int startOffset) {\n\n    List<SegToken> segTokenList = hhmmSegmenter.process(sentence);\n    // tokens from sentence, excluding WordType.SENTENCE_BEGIN and WordType.SENTENCE_END\n    List<SegToken> result = Collections.emptyList();\n    \n    if (segTokenList.size() > 2) // if it's not an empty sentence\n      result = segTokenList.subList(1, segTokenList.size() - 1);\n    \n    for (SegToken st : result)\n      convertSegToken(st, sentence, startOffset);\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Segment a sentence into words with {@link HHMMSegmenter}\n   * \n   * @param sentence input sentence\n   * @param startOffset start offset of sentence\n   * @return {@link List} of {@link SegToken}\n   */\n  public List<SegToken> segmentSentence(String sentence, int startOffset) {\n\n    List<SegToken> segTokenList = hhmmSegmenter.process(sentence);\n    // tokens from sentence, excluding WordType.SENTENCE_BEGIN and WordType.SENTENCE_END\n    List<SegToken> result = Collections.emptyList();\n    \n    if (segTokenList.size() > 2) // if its not an empty sentence\n      result = segTokenList.subList(1, segTokenList.size() - 1);\n    \n    for (SegToken st : result)\n      convertSegToken(st, sentence, startOffset);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}