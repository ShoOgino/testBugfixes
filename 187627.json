{"path":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","commits":[{"id":"48a00d99ab5d2304d5699e78fdfdbda520687e3e","date":1428909239,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"/dev/null","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words(1L << 31));\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((1L << 31)) + 1);\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b074080bbbcc37fd236809ccd0f072987c2b7d5d","af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words(1L << 31));\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((1L << 31)) + 1);\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","bugFix":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0928240f49ec17419b86cc8df48087ea42980fba","date":1504271720,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(2147483631, LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS));\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","bugFix":null,"bugIntro":["b074080bbbcc37fd236809ccd0f072987c2b7d5d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b074080bbbcc37fd236809ccd0f072987c2b7d5d","date":1504345266,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n\n    // ensure the claimed max num_bits doesn't throw exc; we can't enforce exact values here\n    // because the value variees with JVM:\n    assertTrue(LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS) > 0);\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(2147483631, LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS));\n  }\n\n","bugFix":["48a00d99ab5d2304d5699e78fdfdbda520687e3e","0928240f49ec17419b86cc8df48087ea42980fba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n\n    // ensure the claimed max num_bits doesn't throw exc; we can't enforce exact values here\n    // because the value variees with JVM:\n    assertTrue(LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS) > 0);\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n\n    // ensure the claimed max num_bits doesn't throw exc; we can't enforce exact values here\n    // because the value variees with JVM:\n    assertTrue(LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS) > 0);\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testBits2Words().mjava","sourceNew":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n\n    // ensure the claimed max num_bits doesn't throw exc; we can't enforce exact values here\n    // because the value variees with JVM:\n    assertTrue(LongBitSet.bits2words(LongBitSet.MAX_NUM_BITS) > 0);\n  }\n\n","sourceOld":"  public void testBits2Words() {\n    assertEquals(0, LongBitSet.bits2words(0));\n    assertEquals(1, LongBitSet.bits2words(1));\n    // ...\n    assertEquals(1, LongBitSet.bits2words(64));\n    assertEquals(2, LongBitSet.bits2words(65));\n    // ...\n    assertEquals(2, LongBitSet.bits2words(128));\n    assertEquals(3, LongBitSet.bits2words(129));\n    // ...\n    assertEquals(1 << (31-6), LongBitSet.bits2words((long)Integer.MAX_VALUE + 1)); // == 1L << 31\n    assertEquals((1 << (31-6)) + 1, LongBitSet.bits2words((long)Integer.MAX_VALUE + 2)); // == (1L << 31) + 1\n    // ...\n    assertEquals(1 << (32-6), LongBitSet.bits2words(1L << 32));\n    assertEquals((1 << (32-6)) + 1, LongBitSet.bits2words((1L << 32)) + 1);\n    // ...\n    assertEquals(Integer.MAX_VALUE, LongBitSet.bits2words((1L << 37) - 64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["af918c7c328775f9fadd5870c21f0fafc2a059cc","b074080bbbcc37fd236809ccd0f072987c2b7d5d"],"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["af918c7c328775f9fadd5870c21f0fafc2a059cc","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["af918c7c328775f9fadd5870c21f0fafc2a059cc","b074080bbbcc37fd236809ccd0f072987c2b7d5d"],"b074080bbbcc37fd236809ccd0f072987c2b7d5d":["0928240f49ec17419b86cc8df48087ea42980fba"],"0928240f49ec17419b86cc8df48087ea42980fba":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"b074080bbbcc37fd236809ccd0f072987c2b7d5d":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"0928240f49ec17419b86cc8df48087ea42980fba":["b074080bbbcc37fd236809ccd0f072987c2b7d5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","0928240f49ec17419b86cc8df48087ea42980fba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}