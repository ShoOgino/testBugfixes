{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","commits":[{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8b6783b03ea9c6398156b4e964266166193d4364"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":["8b6783b03ea9c6398156b4e964266166193d4364"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":["8b6783b03ea9c6398156b4e964266166193d4364"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":["8b6783b03ea9c6398156b4e964266166193d4364"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6783b03ea9c6398156b4e964266166193d4364","date":1565257495,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n\n    nodeAddedTriggerWithAddReplicaPreferredOp(collectionNamePrefix, numShards, numCollections, setTriggerCommand, setClusterPolicyCommand);\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 1).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","01322d51122b6cbe6b5ba6059fffba67798dae72","f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","89948af0461fead48f44ba8fb7866f107ce83f22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int).mjava","sourceNew":null,"sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'addreplica',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n\n    nodeAddedTriggerWithAddReplicaPreferredOp(collectionNamePrefix, numShards, numCollections, setTriggerCommand, setClusterPolicyCommand);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"8b6783b03ea9c6398156b4e964266166193d4364":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["8b6783b03ea9c6398156b4e964266166193d4364"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"8b6783b03ea9c6398156b4e964266166193d4364":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8b6783b03ea9c6398156b4e964266166193d4364"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}