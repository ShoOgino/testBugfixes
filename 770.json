{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>null</code> if no\n   *         match was found.\n   */\n  private Integer getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>-1</code> if no\n   *         match was found.\n   */\n  private int getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>null</code> if no\n   *         match was found.\n   */\n  private Integer getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>-1</code> if no\n   *         match was found.\n   */\n  private int getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>null</code> if no\n   *         match was found.\n   */\n  private Integer getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>-1</code> if no\n   *         match was found.\n   */\n  private int getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>-1</code> if no\n   *         match was found.\n   */\n  private int getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}