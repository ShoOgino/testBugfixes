{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Directory dir) throws IOException {\n    addDocs(dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"/dev/null","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bd82f9f7ac6b7ae532616311b08252338e335d","date":1297527663,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":null,"sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":null,"sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","sourceNew":null,"sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now doTestNorms\");\n    }\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    \n    ir.close();\n    irc.close();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08bd82f9f7ac6b7ae532616311b08252338e335d":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","08bd82f9f7ac6b7ae532616311b08252338e335d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["08bd82f9f7ac6b7ae532616311b08252338e335d","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["08bd82f9f7ac6b7ae532616311b08252338e335d","4122a26e1fd0457a340616673a3d3aada370f713"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["b21422ff1d1d56499dec481f193b402e5e8def5b","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"4122a26e1fd0457a340616673a3d3aada370f713":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","08bd82f9f7ac6b7ae532616311b08252338e335d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"08bd82f9f7ac6b7ae532616311b08252338e335d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["08bd82f9f7ac6b7ae532616311b08252338e335d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}