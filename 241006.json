{"path":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#createIndexableFields(Rectangle).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#createIndexableFields(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  private Field[] createIndexableFields(Rectangle bbox) {\n    Field[] fields = new Field[fieldsLen];\n    int idx = -1;\n    if (hasStored) {\n      fields[++idx] = new StoredField(field_minX, bbox.getMinX());\n      fields[++idx] = new StoredField(field_minY, bbox.getMinY());\n      fields[++idx] = new StoredField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new StoredField(field_maxY, bbox.getMaxY());\n    }\n    if (hasDocVals) {\n      fields[++idx] = new DoubleDocValuesField(field_minX, bbox.getMinX());\n      fields[++idx] = new DoubleDocValuesField(field_minY, bbox.getMinY());\n      fields[++idx] = new DoubleDocValuesField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoubleDocValuesField(field_maxY, bbox.getMaxY());\n    }\n    if (hasPointVals) {\n      fields[++idx] = new DoublePoint(field_minX, bbox.getMinX());\n      fields[++idx] = new DoublePoint(field_minY, bbox.getMinY());\n      fields[++idx] = new DoublePoint(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoublePoint(field_maxY, bbox.getMaxY());\n    }\n    if (legacyNumericFieldType != null) {\n      fields[++idx] = new LegacyDoubleField(field_minX, bbox.getMinX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_minY, bbox.getMinY(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxX, bbox.getMaxX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxY, bbox.getMaxY(), legacyNumericFieldType);\n    }\n    if (xdlFieldType != null) {\n      fields[++idx] = new Field(field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", xdlFieldType);\n    }\n    assert idx == fields.length - 1;\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#createIndexableFields(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  private Field[] createIndexableFields(Rectangle bbox) {\n    Field[] fields = new Field[fieldsLen];\n    int idx = -1;\n    if (hasStored) {\n      fields[++idx] = new StoredField(field_minX, bbox.getMinX());\n      fields[++idx] = new StoredField(field_minY, bbox.getMinY());\n      fields[++idx] = new StoredField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new StoredField(field_maxY, bbox.getMaxY());\n    }\n    if (hasDocVals) {\n      fields[++idx] = new DoubleDocValuesField(field_minX, bbox.getMinX());\n      fields[++idx] = new DoubleDocValuesField(field_minY, bbox.getMinY());\n      fields[++idx] = new DoubleDocValuesField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoubleDocValuesField(field_maxY, bbox.getMaxY());\n    }\n    if (hasPointVals) {\n      fields[++idx] = new DoublePoint(field_minX, bbox.getMinX());\n      fields[++idx] = new DoublePoint(field_minY, bbox.getMinY());\n      fields[++idx] = new DoublePoint(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoublePoint(field_maxY, bbox.getMaxY());\n    }\n    if (legacyNumericFieldType != null) {\n      fields[++idx] = new LegacyDoubleField(field_minX, bbox.getMinX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_minY, bbox.getMinY(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxX, bbox.getMaxX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxY, bbox.getMaxY(), legacyNumericFieldType);\n    }\n    if (xdlFieldType != null) {\n      fields[++idx] = new Field(field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", xdlFieldType);\n    }\n    assert idx == fields.length - 1;\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#createIndexableFields(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  private Field[] createIndexableFields(Rectangle bbox) {\n    Field[] fields = new Field[fieldsLen];\n    int idx = -1;\n    if (hasStored) {\n      fields[++idx] = new StoredField(field_minX, bbox.getMinX());\n      fields[++idx] = new StoredField(field_minY, bbox.getMinY());\n      fields[++idx] = new StoredField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new StoredField(field_maxY, bbox.getMaxY());\n    }\n    if (hasDocVals) {\n      fields[++idx] = new DoubleDocValuesField(field_minX, bbox.getMinX());\n      fields[++idx] = new DoubleDocValuesField(field_minY, bbox.getMinY());\n      fields[++idx] = new DoubleDocValuesField(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoubleDocValuesField(field_maxY, bbox.getMaxY());\n    }\n    if (hasPointVals) {\n      fields[++idx] = new DoublePoint(field_minX, bbox.getMinX());\n      fields[++idx] = new DoublePoint(field_minY, bbox.getMinY());\n      fields[++idx] = new DoublePoint(field_maxX, bbox.getMaxX());\n      fields[++idx] = new DoublePoint(field_maxY, bbox.getMaxY());\n    }\n    if (legacyNumericFieldType != null) {\n      fields[++idx] = new LegacyDoubleField(field_minX, bbox.getMinX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_minY, bbox.getMinY(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxX, bbox.getMaxX(), legacyNumericFieldType);\n      fields[++idx] = new LegacyDoubleField(field_maxY, bbox.getMaxY(), legacyNumericFieldType);\n    }\n    if (xdlFieldType != null) {\n      fields[++idx] = new Field(field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", xdlFieldType);\n    }\n    assert idx == fields.length - 1;\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}