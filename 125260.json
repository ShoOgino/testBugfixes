{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","commits":[{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param searcherFactory\n   *          An optional {@link SearcherFactory}. Pass <code>null</code> if you\n   *          don't require the searcher to be warmed before going live or other\n   *          custom behavior.\n   * \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(IndexWriter writer, SearcherFactory searcherFactory) throws IOException {\n    this(writer, true, searcherFactory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param searcherFactory\n   *          An optional {@link SearcherFactory}. Pass <code>null</code> if you\n   *          don't require the searcher to be warmed before going live or other\n   *          custom behavior.\n   * \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(IndexWriter writer, SearcherFactory searcherFactory) throws IOException {\n    this(writer, true, false, searcherFactory);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param searcherFactory\n   *          An optional {@link SearcherFactory}. Pass <code>null</code> if you\n   *          don't require the searcher to be warmed before going live or other\n   *          custom behavior.\n   * \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(IndexWriter writer, SearcherFactory searcherFactory) throws IOException {\n    this(writer, true, searcherFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param searcherFactory\n   *          An optional {@link SearcherFactory}. Pass <code>null</code> if you\n   *          don't require the searcher to be warmed before going live or other\n   *          custom behavior.\n   * \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(IndexWriter writer, SearcherFactory searcherFactory) throws IOException {\n    this(writer, true, false, searcherFactory);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param searcherFactory\n   *          An optional {@link SearcherFactory}. Pass <code>null</code> if you\n   *          don't require the searcher to be warmed before going live or other\n   *          custom behavior.\n   * \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(IndexWriter writer, SearcherFactory searcherFactory) throws IOException {\n    this(writer, true, searcherFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["2a1862266772deb28cdcb7d996b64d2177022687","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a1862266772deb28cdcb7d996b64d2177022687"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}