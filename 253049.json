{"path":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","commits":[{"id":"c7410a1292a8bc3af75faed6b753d861a192e6a5","date":1027003198,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n\tDocument doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc3.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc4.add(Field.Text(\"body\", \"picadelly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\tPhrasePrefixQuery query1 = new PhrasePrefixQuery();\n\tPhrasePrefixQuery query2 = new PhrasePrefixQuery();\n\tquery1.add(new Term(\"body\", \"blueberry\"));\n\tquery2.add(new Term(\"body\", \"strawberry\"));\n\n\tLinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n\t// this TermEnum gives \"picadelly\", \"pie\" and \"pizza\".\n        TermEnum te = ir.terms(new Term(\"body\", \"pi*\"));\n        do {\n            termsWithPrefix.add(te.term());\n        } while (te.next());\n\tquery1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\tquery2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n\tHits result;\n\tresult = searcher.search(query1);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c77e28e734f5d573be3c606e463b107e1fb695c","date":1051749641,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry strudel\"));\n        doc3.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc4.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc5.add(Field.Text(\"body\", \"piccadilly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n\tDocument doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc3.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc4.add(Field.Text(\"body\", \"picadelly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\tPhrasePrefixQuery query1 = new PhrasePrefixQuery();\n\tPhrasePrefixQuery query2 = new PhrasePrefixQuery();\n\tquery1.add(new Term(\"body\", \"blueberry\"));\n\tquery2.add(new Term(\"body\", \"strawberry\"));\n\n\tLinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n\t// this TermEnum gives \"picadelly\", \"pie\" and \"pizza\".\n        TermEnum te = ir.terms(new Term(\"body\", \"pi*\"));\n        do {\n            termsWithPrefix.add(te.term());\n        } while (te.next());\n\tquery1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\tquery2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n\tHits result;\n\tresult = searcher.search(query1);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry strudel\"));\n        doc3.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc4.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc5.add(Field.Text(\"body\", \"piccadilly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.ANALYZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.ANALYZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.ANALYZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.ANALYZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        //PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        //PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"1c77e28e734f5d573be3c606e463b107e1fb695c":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["773e104db917d6cc9acade5a8aeb91a886192b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"773e104db917d6cc9acade5a8aeb91a886192b99":["1c77e28e734f5d573be3c606e463b107e1fb695c"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c77e28e734f5d573be3c606e463b107e1fb695c":["773e104db917d6cc9acade5a8aeb91a886192b99"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"773e104db917d6cc9acade5a8aeb91a886192b99":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["1c77e28e734f5d573be3c606e463b107e1fb695c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}