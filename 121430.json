{"path":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new DimensionalReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                     DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                     if (dimensionalReader == null) {\n                       // This segment has no dimensional values\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     dimensionalReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n               });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new DimensionalReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                     DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                     if (dimensionalReader == null) {\n                       // This segment has no dimensional values\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     dimensionalReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new DimensionalReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                     DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                     if (dimensionalReader == null) {\n                       // This segment has no dimensional values\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     dimensionalReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new DimensionalReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                     DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                     if (dimensionalReader == null) {\n                       // This segment has no dimensional values\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     dimensionalReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}