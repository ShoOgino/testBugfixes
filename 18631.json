{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValuesDoNotAffectBoostPositionsOrOffset().mjava","commits":[{"id":"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","date":1458043999,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValuesDoNotAffectBoostPositionsOrOffset().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), analyzer, 5f);\n    mi.addField(new BinaryPoint(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8)), analyzer, 5f);\n    mi.addField(new BinaryPoint(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8)), analyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    IndexSearcher indexSearcher = mi.createSearcher();\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(0, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"jumps\".getBytes(StandardCharsets.UTF_8))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValuesDoNotAffectPositionsOrOffset().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValuesDoNotAffectBoostPositionsOrOffset().mjava","sourceNew":"  public void testPointValuesDoNotAffectPositionsOrOffset() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), analyzer);\n    mi.addField(new BinaryPoint(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8)), analyzer);\n    mi.addField(new BinaryPoint(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8)), analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    IndexSearcher indexSearcher = mi.createSearcher();\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(0, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"jumps\".getBytes(StandardCharsets.UTF_8))));\n  }\n\n","sourceOld":"  public void testPointValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), analyzer, 5f);\n    mi.addField(new BinaryPoint(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8)), analyzer, 5f);\n    mi.addField(new BinaryPoint(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8)), analyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    IndexSearcher indexSearcher = mi.createSearcher();\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"quick\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(1, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"brown\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(0, indexSearcher.count(BinaryPoint.newExactQuery(\"text\", \"jumps\".getBytes(StandardCharsets.UTF_8))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}