{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","sourceNew":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst, true, true);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","sourceOld":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#moveZnode(SolrZkClient,String,String).mjava","sourceNew":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst, true, true);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","sourceOld":"  public static void moveZnode(SolrZkClient zkClient, String src, String dst) throws SolrServerException, KeeperException, InterruptedException {\n    String destName = normalizeDest(src, dst);\n\n    // Special handling if the source has no children, i.e. copying just a single file.\n    if (zkClient.getChildren(src, null, true).size() == 0) {\n      zkClient.makePath(destName, false, true);\n      zkClient.setData(destName, zkClient.getData(src, null, null, true), true);\n    } else {\n      traverseZkTree(zkClient, src, VISIT_ORDER.VISIT_PRE, new ZkCopier(zkClient, src, destName));\n    }\n\n    // Insure all source znodes are present in dest before deleting the source.\n    // throws error if not all there so the source is left intact. Throws error if source and dest don't match.\n    checkAllZnodesThere(zkClient, src, destName);\n\n    clean(zkClient, src);\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49693fcc05c1186d9b347493efa73a614f5bba7":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"]},"commit2Childs":{"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["f49693fcc05c1186d9b347493efa73a614f5bba7","3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}