{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","sourceNew":"  public synchronized final long sizeInBytes() throws IOException {\n    if (delegate instanceof RAMDirectory)\n      return ((RAMDirectory) delegate).sizeInBytes();\n    else {\n      // hack\n      long size = 0;\n      for (String file : delegate.listAll())\n        size += delegate.fileLength(file);\n      return size;\n    }\n  }\n\n","sourceOld":"  public synchronized final long sizeInBytes() throws IOException {\n    if (delegate instanceof RAMDirectory)\n      return ((RAMDirectory) delegate).sizeInBytes();\n    else {\n      // hack\n      long size = 0;\n      for (String file : delegate.listAll())\n        size += delegate.fileLength(file);\n      return size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399ef3ff6c22f0627c82ac65f32726f3587a2aa1","date":1379005174,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","sourceNew":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).sizeInBytes();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll())\n        size += in.fileLength(file);\n      return size;\n    }\n  }\n\n","sourceOld":"  public synchronized final long sizeInBytes() throws IOException {\n    if (delegate instanceof RAMDirectory)\n      return ((RAMDirectory) delegate).sizeInBytes();\n    else {\n      // hack\n      long size = 0;\n      for (String file : delegate.listAll())\n        size += delegate.fileLength(file);\n      return size;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","sourceNew":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).ramBytesUsed();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll())\n        size += in.fileLength(file);\n      return size;\n    }\n  }\n\n","sourceOld":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).sizeInBytes();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll())\n        size += in.fileLength(file);\n      return size;\n    }\n  }\n\n","bugFix":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22989c36ff05c657df26dd3377b37c9ad35859bc","date":1424477375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","sourceNew":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).ramBytesUsed();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll()) {\n        // hack 2: see TODO in ExtrasFS (ideally it would always return 0 byte\n        // size for extras it creates, even though the size of non-regular files is not defined)\n        if (!file.startsWith(\"extra\")) {\n          size += in.fileLength(file);\n        }\n      }\n      return size;\n    }\n  }\n\n","sourceOld":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).ramBytesUsed();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll())\n        size += in.fileLength(file);\n      return size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sizeInBytes().mjava","sourceNew":"  public synchronized final long sizeInBytes() throws IOException {\n    long size = 0;\n    for (String file : in.listAll()) {\n      // hack 2: see TODO in ExtrasFS (ideally it would always return 0 byte\n      // size for extras it creates, even though the size of non-regular files is not defined)\n      if (!file.startsWith(\"extra\")) {\n        size += in.fileLength(file);\n      }\n    }\n    return size;\n  }\n\n","sourceOld":"  public synchronized final long sizeInBytes() throws IOException {\n    if (in instanceof RAMDirectory)\n      return ((RAMDirectory) in).ramBytesUsed();\n    else {\n      // hack\n      long size = 0;\n      for (String file : in.listAll()) {\n        // hack 2: see TODO in ExtrasFS (ideally it would always return 0 byte\n        // size for extras it creates, even though the size of non-regular files is not defined)\n        if (!file.startsWith(\"extra\")) {\n          size += in.fileLength(file);\n        }\n      }\n      return size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}