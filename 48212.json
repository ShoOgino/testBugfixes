{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    return new ScoreDocComparator () {\n      final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4681d9b9b007496b5ef377a6851686b1b42574fe","date":1096470542,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    return new ScoreDocComparator () {\n      final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorString(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4681d9b9b007496b5ef377a6851686b1b42574fe":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["4681d9b9b007496b5ef377a6851686b1b42574fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"4681d9b9b007496b5ef377a6851686b1b42574fe":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["4681d9b9b007496b5ef377a6851686b1b42574fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}