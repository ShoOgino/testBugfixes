{"path":"lucene/luke/src/test/org/apache/lucene/luke/models/documents/TermVectorsAdapterTest#testGetTermVector().mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/test/org/apache/lucene/luke/models/documents/TermVectorsAdapterTest#testGetTermVector().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetTermVector() throws Exception {\n    TermVectorsAdapter adapterImpl = new TermVectorsAdapter(reader);\n    List<TermVectorEntry> tvEntries = adapterImpl.getTermVector(0, \"text1\");\n\n    assertEquals(18, tvEntries.size());\n\n    assertEquals(\"a\", tvEntries.get(0).getTermText());\n    assertEquals(4, tvEntries.get(0).getFreq());\n\n    assertEquals(\"acknowledged\", tvEntries.get(1).getTermText());\n    assertEquals(1, tvEntries.get(1).getFreq());\n\n    assertEquals(\"be\", tvEntries.get(2).getTermText());\n    assertEquals(1, tvEntries.get(2).getFreq());\n\n    assertEquals(\"fortune\", tvEntries.get(3).getTermText());\n    assertEquals(1, tvEntries.get(3).getFreq());\n\n    assertEquals(\"good\", tvEntries.get(4).getTermText());\n    assertEquals(1, tvEntries.get(4).getFreq());\n\n    assertEquals(\"in\", tvEntries.get(5).getTermText());\n    assertEquals(2, tvEntries.get(5).getFreq());\n\n    assertEquals(\"is\", tvEntries.get(6).getTermText());\n    assertEquals(1, tvEntries.get(6).getFreq());\n\n    assertEquals(\"it\", tvEntries.get(7).getTermText());\n    assertEquals(1, tvEntries.get(7).getFreq());\n\n    assertEquals(\"man\", tvEntries.get(8).getTermText());\n    assertEquals(1, tvEntries.get(8).getFreq());\n\n    assertEquals(\"must\", tvEntries.get(9).getTermText());\n    assertEquals(1, tvEntries.get(9).getFreq());\n\n    assertEquals(\"of\", tvEntries.get(10).getTermText());\n    assertEquals(1, tvEntries.get(2).getFreq());\n\n    assertEquals(\"possession\", tvEntries.get(11).getTermText());\n    assertEquals(1, tvEntries.get(11).getFreq());\n\n    assertEquals(\"single\", tvEntries.get(12).getTermText());\n    assertEquals(1, tvEntries.get(12).getFreq());\n\n    assertEquals(\"that\", tvEntries.get(13).getTermText());\n    assertEquals(1, tvEntries.get(13).getFreq());\n\n    assertEquals(\"truth\", tvEntries.get(14).getTermText());\n    assertEquals(1, tvEntries.get(14).getFreq());\n\n    assertEquals(\"universally\", tvEntries.get(15).getTermText());\n    assertEquals(1, tvEntries.get(15).getFreq());\n\n    assertEquals(\"want\", tvEntries.get(16).getTermText());\n    assertEquals(1, tvEntries.get(16).getFreq());\n\n    assertEquals(\"wife\", tvEntries.get(17).getTermText());\n    assertEquals(1, tvEntries.get(17).getFreq());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}