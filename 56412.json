{"path":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#run().mjava","commits":[{"id":"106fbee5a2b8105d0628067f2c65cd0fedfc19e7","date":1464121813,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      final String origThreadName = Thread.currentThread().getName();\n      try {\n        Thread.currentThread().setName(origThreadName + \"-w\" + workerId);\n        final int maxDocMultiplier = expected.length-1;\n        for (int docIter = 0; docIter < numDocsToUpdate; docIter++) {\n\n          final int docId = DOC_ID_INCR * TestUtil.nextInt(rand, 0, maxDocMultiplier);\n\n          // tweak our thread name to keep track of what we're up to\n          Thread.currentThread().setName(origThreadName + \"-w\" + workerId + \"-d\" + docId);\n\n          // no matter how random the doc selection may be per thread, ensure\n          // every doc that is selected by *a* thread gets at least a couple rapid fire updates\n          final int itersPerDoc = atLeast(rand, 2);\n          \n          for (int updateIter = 0; updateIter < itersPerDoc; updateIter++) {\n            if (0 == abortLatch.getCount()) {\n              return;\n            }\n            doRandomAtomicUpdate(docId);\n          }\n          if (rand.nextBoolean()) { Thread.yield(); }\n        }\n        \n      } catch (Error err) {\n        log.error(Thread.currentThread().getName(), err);\n        abortLatch.countDown();\n        throw err;\n      } catch (Exception ex) {\n        log.error(Thread.currentThread().getName(), ex);\n        abortLatch.countDown();\n        throw new RuntimeException(ex.getMessage(), ex);\n      } finally {\n        Thread.currentThread().setName(origThreadName);\n      }\n      ok = true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      final String origThreadName = Thread.currentThread().getName();\n      try {\n        Thread.currentThread().setName(origThreadName + \"-w\" + workerId);\n        final int maxDocMultiplier = expected.length-1;\n        for (int docIter = 0; docIter < numDocsToUpdate; docIter++) {\n\n          final int docId = DOC_ID_INCR * TestUtil.nextInt(rand, 0, maxDocMultiplier);\n\n          // tweak our thread name to keep track of what we're up to\n          Thread.currentThread().setName(origThreadName + \"-w\" + workerId + \"-d\" + docId);\n\n          // no matter how random the doc selection may be per thread, ensure\n          // every doc that is selected by *a* thread gets at least a couple rapid fire updates\n          final int itersPerDoc = atLeast(rand, 2);\n          \n          for (int updateIter = 0; updateIter < itersPerDoc; updateIter++) {\n            if (0 == abortLatch.getCount()) {\n              return;\n            }\n            doRandomAtomicUpdate(docId);\n          }\n          if (rand.nextBoolean()) { Thread.yield(); }\n        }\n        \n      } catch (Error err) {\n        log.error(Thread.currentThread().getName(), err);\n        abortLatch.countDown();\n        throw err;\n      } catch (Exception ex) {\n        log.error(Thread.currentThread().getName(), ex);\n        abortLatch.countDown();\n        throw new RuntimeException(ex.getMessage(), ex);\n      } finally {\n        Thread.currentThread().setName(origThreadName);\n      }\n      ok = true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      final String origThreadName = Thread.currentThread().getName();\n      try {\n        Thread.currentThread().setName(origThreadName + \"-w\" + workerId);\n        final int maxDocMultiplier = expected.length-1;\n        for (int docIter = 0; docIter < numDocsToUpdate; docIter++) {\n\n          final int docId = DOC_ID_INCR * TestUtil.nextInt(rand, 0, maxDocMultiplier);\n\n          // tweak our thread name to keep track of what we're up to\n          Thread.currentThread().setName(origThreadName + \"-w\" + workerId + \"-d\" + docId);\n\n          // no matter how random the doc selection may be per thread, ensure\n          // every doc that is selected by *a* thread gets at least a couple rapid fire updates\n          final int itersPerDoc = atLeast(rand, 2);\n          \n          for (int updateIter = 0; updateIter < itersPerDoc; updateIter++) {\n            if (0 == abortLatch.getCount()) {\n              return;\n            }\n            doRandomAtomicUpdate(docId);\n          }\n          if (rand.nextBoolean()) { Thread.yield(); }\n        }\n        \n      } catch (Error err) {\n        log.error(Thread.currentThread().getName(), err);\n        abortLatch.countDown();\n        throw err;\n      } catch (Exception ex) {\n        log.error(Thread.currentThread().getName(), ex);\n        abortLatch.countDown();\n        throw new RuntimeException(ex.getMessage(), ex);\n      } finally {\n        Thread.currentThread().setName(origThreadName);\n      }\n      ok = true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      final String origThreadName = Thread.currentThread().getName();\n      try {\n        Thread.currentThread().setName(origThreadName + \"-w\" + workerId);\n        final int maxDocMultiplier = expected.length-1;\n        for (int docIter = 0; docIter < numDocsToUpdate; docIter++) {\n\n          final int docId = DOC_ID_INCR * TestUtil.nextInt(rand, 0, maxDocMultiplier);\n\n          // tweak our thread name to keep track of what we're up to\n          Thread.currentThread().setName(origThreadName + \"-w\" + workerId + \"-d\" + docId);\n\n          // no matter how random the doc selection may be per thread, ensure\n          // every doc that is selected by *a* thread gets at least a couple rapid fire updates\n          final int itersPerDoc = atLeast(rand, 2);\n          \n          for (int updateIter = 0; updateIter < itersPerDoc; updateIter++) {\n            if (0 == abortLatch.getCount()) {\n              return;\n            }\n            doRandomAtomicUpdate(docId);\n          }\n          if (rand.nextBoolean()) { Thread.yield(); }\n        }\n        \n      } catch (Error err) {\n        log.error(Thread.currentThread().getName(), err);\n        abortLatch.countDown();\n        throw err;\n      } catch (Exception ex) {\n        log.error(Thread.currentThread().getName(), ex);\n        abortLatch.countDown();\n        throw new RuntimeException(ex.getMessage(), ex);\n      } finally {\n        Thread.currentThread().setName(origThreadName);\n      }\n      ok = true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","106fbee5a2b8105d0628067f2c65cd0fedfc19e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","106fbee5a2b8105d0628067f2c65cd0fedfc19e7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}