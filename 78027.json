{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","pathOld":"/dev/null","sourceNew":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parer from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // If there is some path left over, add it to the context\n    int idx = req.getServletPath().indexOf( ':' );\n    if( idx > 0 ) {\n      sreq.getContext().put( \"path\", req.getServletPath().substring( idx+1 ) );\n    }\n    return sreq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43c800be98a24a96d9d21e62c645822de478f6a2","date":1171769593,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parer from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parer from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // If there is some path left over, add it to the context\n    int idx = req.getServletPath().indexOf( ':' );\n    if( idx > 0 ) {\n      sreq.getContext().put( \"path\", req.getServletPath().substring( idx+1 ) );\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00d4b5c26099140e9d88b4941bb31710cd962830","date":1190121481,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parer from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00d4b5c26099140e9d88b4941bb31710cd962830":["43c800be98a24a96d9d21e62c645822de478f6a2"],"43c800be98a24a96d9d21e62c645822de478f6a2":["d80013b5e260def972025c93a0b08524f9c38f49"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["00d4b5c26099140e9d88b4941bb31710cd962830"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00d4b5c26099140e9d88b4941bb31710cd962830":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"43c800be98a24a96d9d21e62c645822de478f6a2":["00d4b5c26099140e9d88b4941bb31710cd962830"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":[],"d80013b5e260def972025c93a0b08524f9c38f49":["43c800be98a24a96d9d21e62c645822de478f6a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}