{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":null,"sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}