{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      out.writeVInt(numDocs);\n\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"16843358872ed92ba92888ab99df297550b9a36a":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}