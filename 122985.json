{"path":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(FileSystem,Path).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  public static String[] getLogList(FileSystem fs, Path tlogDir) {\n    final String prefix = TLOG_NAME + '.';\n    assert fs != null;\n    FileStatus[] fileStatuses;\n    try {\n      fileStatuses = fs.listStatus(tlogDir, new PathFilter() {\n        \n        @Override\n        public boolean accept(Path path) {\n          return path.getName().startsWith(prefix);\n        }\n      });\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    String[] names = new String[fileStatuses.length];\n    for (int i = 0; i < fileStatuses.length; i++) {\n      names[i] = fileStatuses[i].getPath().getName();\n    }\n    Arrays.sort(names);\n\n    return names;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  public static String[] getLogList(FileSystem fs, Path tlogDir) {\n    final String prefix = TLOG_NAME + '.';\n    assert fs != null;\n    FileStatus[] fileStatuses;\n    try {\n      fileStatuses = fs.listStatus(tlogDir, new PathFilter() {\n        \n        @Override\n        public boolean accept(Path path) {\n          return path.getName().startsWith(prefix);\n        }\n      });\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    String[] names = new String[fileStatuses.length];\n    for (int i = 0; i < fileStatuses.length; i++) {\n      names[i] = fileStatuses[i].getPath().getName();\n    }\n    Arrays.sort(names);\n\n    return names;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(FileSystem,Path).mjava","sourceNew":"  public static String[] getLogList(FileSystem fs, Path tlogDir) {\n    final String prefix = TLOG_NAME + '.';\n    assert fs != null;\n    FileStatus[] fileStatuses;\n    try {\n      fileStatuses = fs.listStatus(tlogDir, new PathFilter() {\n        \n        @Override\n        public boolean accept(Path path) {\n          return path.getName().startsWith(prefix);\n        }\n      });\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    String[] names = new String[fileStatuses.length];\n    for (int i = 0; i < fileStatuses.length; i++) {\n      names[i] = fileStatuses[i].getPath().getName();\n    }\n    Arrays.sort(names);\n\n    return names;\n  }\n\n","sourceOld":"  public static String[] getLogList(FileSystem fs, Path tlogDir) {\n    final String prefix = TLOG_NAME + '.';\n    assert fs != null;\n    FileStatus[] fileStatuses;\n    try {\n      fileStatuses = fs.listStatus(tlogDir, new PathFilter() {\n        \n        @Override\n        public boolean accept(Path path) {\n          return path.getName().startsWith(prefix);\n        }\n      });\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    String[] names = new String[fileStatuses.length];\n    for (int i = 0; i < fileStatuses.length; i++) {\n      names[i] = fileStatuses[i].getPath().getName();\n    }\n    Arrays.sort(names);\n\n    return names;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6e1dc1bb4254226c8d7151b596cc1be40671751"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["c6e1dc1bb4254226c8d7151b596cc1be40671751","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}