{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","commits":[{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      Directory d = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      Directory d = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"/dev/null","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":null,"sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cfd641edd796340315609425e9f70819e6d9ef0e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["cfd641edd796340315609425e9f70819e6d9ef0e"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cfd641edd796340315609425e9f70819e6d9ef0e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}