{"path":"src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        return super.getFieldQuery(field, queryText);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27be4bdc55e85b001df476616dc1f6e68c3148e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27be4bdc55e85b001df476616dc1f6e68c3148e6","date":1249587040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        return super.getFieldQuery(field, queryText);\n      }\n    }\n\n","bugFix":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["27be4bdc55e85b001df476616dc1f6e68c3148e6"],"27be4bdc55e85b001df476616dc1f6e68c3148e6":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["27be4bdc55e85b001df476616dc1f6e68c3148e6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"27be4bdc55e85b001df476616dc1f6e68c3148e6":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}