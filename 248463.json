{"path":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","commits":[{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"/dev/null","sourceNew":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setCodecProvider(new RandomCodecProvider(r));\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"/dev/null","sourceNew":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setCodecProvider(new RandomCodecProvider(r));\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35534ac782c9c9d1227a10245ab7729d9eef22f","date":1279904940,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","sourceOld":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setCodecProvider(new RandomCodecProvider(r));\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","sourceOld":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4","date":1279914031,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCaseJ4.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCaseJ4.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","sourceOld":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setCodecProvider(new RandomCodecProvider(r));\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCaseJ4.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","sourceOld":"  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setCodecProvider(new RandomCodecProvider(r));\n    w = new IndexWriter(dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCaseJ4.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCaseJ4.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + CodecProvider.getDefaultCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","sourceOld":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c) throws IOException {\n    this.r = r;\n    w = new MockIndexWriter(r, dir, c);\n    flushAt = _TestUtil.nextInt(r, 10, 1000);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + w.getConfig().getCodecProvider().getDefaultFieldCodec());\n      w.setInfoStream(System.out);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","56da903869515527852ee21ea7ef7bfe414cd40d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["e35534ac782c9c9d1227a10245ab7729d9eef22f"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c084e47df29de3330311d69dabf515ceaa989512"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["15bbd254c1506df5299c4df8c148262c7bd6301e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"43b04c27924fe393e38e9f0986e32c634f261859":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["56da903869515527852ee21ea7ef7bfe414cd40d"],"c084e47df29de3330311d69dabf515ceaa989512":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["c084e47df29de3330311d69dabf515ceaa989512"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"56da903869515527852ee21ea7ef7bfe414cd40d":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["43b04c27924fe393e38e9f0986e32c634f261859"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["43b04c27924fe393e38e9f0986e32c634f261859","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"43b04c27924fe393e38e9f0986e32c634f261859":["13452165d8bf3d45a72f572aaed3c679735d3af2","3bb13258feba31ab676502787ab2e1779f129b7a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32","e35534ac782c9c9d1227a10245ab7729d9eef22f"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["15bbd254c1506df5299c4df8c148262c7bd6301e"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","868da859b43505d9d2a023bfeae6dd0c795f5295"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d","3bb13258feba31ab676502787ab2e1779f129b7a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}