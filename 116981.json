{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}