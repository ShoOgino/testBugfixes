{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1 + _offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1 + _offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1 + _offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a152fdd1e91e2dc8949c867985ea649b2a0c37","date":1571422557,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    final String path = URLDecoder.decode(nodeName.substring(1 + _offset), UTF_8);\n    return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1 + _offset), \"UTF-8\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48499be433b284c562fb2418fe7b858e1ac3b031","date":1597289664,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getBaseUrlForNodeName(String,String).mjava","sourceNew":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    return getBaseUrlForNodeName(nodeName, urlScheme, false);\n  }\n\n","sourceOld":"  public static String getBaseUrlForNodeName(final String nodeName, String urlScheme) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' separator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0, _offset);\n    final String path = URLDecoder.decode(nodeName.substring(1 + _offset), UTF_8);\n    return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48499be433b284c562fb2418fe7b858e1ac3b031":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["8476949555f799dff381770c01cfad051a264487"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48499be433b284c562fb2418fe7b858e1ac3b031"]},"commit2Childs":{"48499be433b284c562fb2418fe7b858e1ac3b031":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["48499be433b284c562fb2418fe7b858e1ac3b031"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"8476949555f799dff381770c01cfad051a264487":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}