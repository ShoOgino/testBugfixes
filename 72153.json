{"path":"src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","commits":[{"id":"80c633e661becbcb6deb6ea2ef4588d230102f50","date":1234308117,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80c633e661becbcb6deb6ea2ef4588d230102f50":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}