{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testStressMultiThreading() throws Exception {\r\n    final Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setMaxBufferedDocs(2);\r\n    final IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    // create index\r\n    final int numThreads = atLeast(3);\r\n    final int numDocs = atLeast(2000);\r\n    for (int i = 0; i < numDocs; i++) {\r\n      Document doc = new Document();\r\n      double group = random().nextDouble();\r\n      String g;\r\n      if (group < 0.1) g = \"g0\";\r\n      else if (group < 0.5) g = \"g1\";\r\n      else if (group < 0.8) g = \"g2\";\r\n      else g = \"g3\";\r\n      doc.add(new StringField(\"updKey\", g, Store.NO));\r\n      for (int j = 0; j < numThreads; j++) {\r\n        long value = random().nextInt();\r\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\r\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\r\n      }\r\n      writer.addDocument(doc);\r\n    }\r\n    \r\n    final CountDownLatch done = new CountDownLatch(numThreads);\r\n    \r\n    // same thread updates a field as well as reopens\r\n    Thread[] threads = new Thread[numThreads];\r\n    for (int i = 0; i < threads.length; i++) {\r\n      final String f = \"f\" + i;\r\n      final String cf = \"cf\" + i;\r\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\r\n        @Override\r\n        public void run() {\r\n          try {\r\n            int numUpdates = atLeast(40);\r\n            Random random = random();\r\n            while (numUpdates-- > 0) {\r\n              double group = random.nextDouble();\r\n              Term t;\r\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\r\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\r\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\r\n              else t = new Term(\"updKey\", \"g3\");\r\n              long updValue = random.nextInt();\r\n              writer.updateNumericDocValue(t, f, updValue);\r\n              writer.updateNumericDocValue(t, cf, updValue * 2);\r\n              \r\n              if (random.nextDouble() < 0.2) {\r\n                // delete a random document\r\n                int doc = random.nextInt(numDocs);\r\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\r\n              }\r\n              \r\n              if (random.nextDouble() < 0.1) {\r\n                writer.commit(); // rarely commit\r\n              }\r\n              \r\n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\r\n                DirectoryReader.open(writer, true).close();\r\n              }\r\n            }\r\n          } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n          } finally {\r\n            done.countDown();\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    for (Thread t : threads) t.start();\r\n    done.await();\r\n    writer.close();\r\n    \r\n    DirectoryReader reader = DirectoryReader.open(dir);\r\n    for (AtomicReaderContext context : reader.leaves()) {\r\n      AtomicReader r = context.reader();\r\n      for (int i = 0; i < numThreads; i++) {\r\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\r\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\r\n        Bits liveDocs = r.getLiveDocs();\r\n        for (int j = 0; j < r.maxDoc(); j++) {\r\n          if (liveDocs == null || liveDocs.get(j)) {\r\n            assertEquals(control.get(j), ndv.get(j) * 2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    reader.close();\r\n    \r\n    dir.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = atLeast(3);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          try {\n            int numUpdates = atLeast(40);\n            Random random = random();\n            while (numUpdates-- > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n              \n              if (random.nextDouble() < 0.1) {\n                writer.commit(); // rarely commit\n              }\n              \n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\n                DirectoryReader.open(writer, true).close();\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testStressMultiThreading() throws Exception {\r\n    final Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setMaxBufferedDocs(2);\r\n    final IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    // create index\r\n    final int numThreads = atLeast(3);\r\n    final int numDocs = atLeast(2000);\r\n    for (int i = 0; i < numDocs; i++) {\r\n      Document doc = new Document();\r\n      double group = random().nextDouble();\r\n      String g;\r\n      if (group < 0.1) g = \"g0\";\r\n      else if (group < 0.5) g = \"g1\";\r\n      else if (group < 0.8) g = \"g2\";\r\n      else g = \"g3\";\r\n      doc.add(new StringField(\"updKey\", g, Store.NO));\r\n      for (int j = 0; j < numThreads; j++) {\r\n        long value = random().nextInt();\r\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\r\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\r\n      }\r\n      writer.addDocument(doc);\r\n    }\r\n    \r\n    final CountDownLatch done = new CountDownLatch(numThreads);\r\n    \r\n    // same thread updates a field as well as reopens\r\n    Thread[] threads = new Thread[numThreads];\r\n    for (int i = 0; i < threads.length; i++) {\r\n      final String f = \"f\" + i;\r\n      final String cf = \"cf\" + i;\r\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\r\n        @Override\r\n        public void run() {\r\n          try {\r\n            int numUpdates = atLeast(40);\r\n            Random random = random();\r\n            while (numUpdates-- > 0) {\r\n              double group = random.nextDouble();\r\n              Term t;\r\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\r\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\r\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\r\n              else t = new Term(\"updKey\", \"g3\");\r\n              long updValue = random.nextInt();\r\n              writer.updateNumericDocValue(t, f, updValue);\r\n              writer.updateNumericDocValue(t, cf, updValue * 2);\r\n              \r\n              if (random.nextDouble() < 0.2) {\r\n                // delete a random document\r\n                int doc = random.nextInt(numDocs);\r\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\r\n              }\r\n              \r\n              if (random.nextDouble() < 0.1) {\r\n                writer.commit(); // rarely commit\r\n              }\r\n              \r\n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\r\n                DirectoryReader.open(writer, true).close();\r\n              }\r\n            }\r\n          } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n          } finally {\r\n            done.countDown();\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    for (Thread t : threads) t.start();\r\n    done.await();\r\n    writer.close();\r\n    \r\n    DirectoryReader reader = DirectoryReader.open(dir);\r\n    for (AtomicReaderContext context : reader.leaves()) {\r\n      AtomicReader r = context.reader();\r\n      for (int i = 0; i < numThreads; i++) {\r\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\r\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\r\n        Bits liveDocs = r.getLiveDocs();\r\n        for (int j = 0; j < r.maxDoc(); j++) {\r\n          if (liveDocs == null || liveDocs.get(j)) {\r\n            assertEquals(control.get(j), ndv.get(j) * 2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    reader.close();\r\n    \r\n    dir.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3452074ede14feadbd5abaee0bd31ba507335a91","date":1379769018,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = atLeast(3);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      final int numThreadUpdates = atLeast(40);\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          try {\n            Random random = random();\n            int numUpdates = numThreadUpdates;\n            while (numUpdates-- > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n              \n              if (random.nextDouble() < 0.1) {\n                writer.commit(); // rarely commit\n              }\n              \n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\n                DirectoryReader.open(writer, true).close();\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = atLeast(3);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          try {\n            int numUpdates = atLeast(40);\n            Random random = random();\n            while (numUpdates-- > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n              \n              if (random.nextDouble() < 0.1) {\n                writer.commit(); // rarely commit\n              }\n              \n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\n                DirectoryReader.open(writer, true).close();\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f13fb377f9b5df46af44bf90a2e507a884f2c30","date":1380476222,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = _TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = atLeast(3);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      final int numThreadUpdates = atLeast(40);\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          try {\n            Random random = random();\n            int numUpdates = numThreadUpdates;\n            while (numUpdates-- > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n              \n              if (random.nextDouble() < 0.1) {\n                writer.commit(); // rarely commit\n              }\n              \n              if (random.nextDouble() < 0.3) { // obtain NRT reader (apply updates)\n                DirectoryReader.open(writer, true).close();\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb5dd418a6a344e7923487ef53e6f27ed5451ce","date":1381551530,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = _TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = _TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = _TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateNumericDocValue(t, f, null);\n                writer.updateNumericDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateNumericDocValue(t, f, updValue);\n                writer.updateNumericDocValue(t, cf, updValue * 2);\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithNdv.get(j), docsWithControl.get(j));\n            if (docsWithNdv.get(j)) {\n              assertEquals(control.get(j), ndv.get(j) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70285ef5917fa2c8feec026d4be4d9c20fa89162","date":1401366288,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateNumericDocValue(t, f, updValue);\n              writer.updateNumericDocValue(t, cf, updValue * 2);\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits docsWithNdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithNdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(control.get(j), ndv.get(j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n                  reader = DirectoryReader.open(writer);\n                } else {\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n                  reader = DirectoryReader.open(writer);\n                } else {\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n                  reader = DirectoryReader.open(writer);\n                } else {\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = TEST_NIGHTLY ? atLeast(2000) : atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TEST_NIGHTLY ? TestUtil.nextInt(random(), 3, 6) : 2;\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n                  reader = DirectoryReader.open(writer);\n                } else {\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new NumericDocValuesField(\"f\" + j, value));\n        doc.add(new NumericDocValuesField(\"cf\" + j, value * 2)); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new NumericDocValuesField(f, updValue), new NumericDocValuesField(cf, updValue*2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n                  reader = DirectoryReader.open(writer);\n                } else {\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        NumericDocValues ndv = r.getNumericDocValues(\"f\" + i);\n        NumericDocValues control = r.getNumericDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, ndv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(control.longValue(), ndv.longValue() * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cfb5dd418a6a344e7923487ef53e6f27ed5451ce"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["2a1862266772deb28cdcb7d996b64d2177022687"],"cfb5dd418a6a344e7923487ef53e6f27ed5451ce":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["3452074ede14feadbd5abaee0bd31ba507335a91"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3452074ede14feadbd5abaee0bd31ba507335a91":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["28288370235ed02234a64753cdbf0c6ec096304a"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cfb5dd418a6a344e7923487ef53e6f27ed5451ce":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["cfb5dd418a6a344e7923487ef53e6f27ed5451ce"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"28288370235ed02234a64753cdbf0c6ec096304a":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2a1862266772deb28cdcb7d996b64d2177022687":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"3452074ede14feadbd5abaee0bd31ba507335a91":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["3452074ede14feadbd5abaee0bd31ba507335a91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}