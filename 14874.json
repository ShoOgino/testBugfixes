{"path":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","commits":[{"id":"e64a2067d65717cdb728095bd4b1e2705ccc27c5","date":1287947410,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"/dev/null","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"/dev/null","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"/dev/null","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e64a2067d65717cdb728095bd4b1e2705ccc27c5"],"c26f00b574427b55127e869b935845554afde1fa":["e64a2067d65717cdb728095bd4b1e2705ccc27c5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e64a2067d65717cdb728095bd4b1e2705ccc27c5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e64a2067d65717cdb728095bd4b1e2705ccc27c5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e64a2067d65717cdb728095bd4b1e2705ccc27c5"],"e64a2067d65717cdb728095bd4b1e2705ccc27c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e64a2067d65717cdb728095bd4b1e2705ccc27c5"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e64a2067d65717cdb728095bd4b1e2705ccc27c5":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}