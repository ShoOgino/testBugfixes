{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest#testConnectToOldNodesUsingHttp2().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest#testConnectToOldNodesUsingHttp2().mjava","pathOld":"/dev/null","sourceNew":"  public void testConnectToOldNodesUsingHttp2() throws Exception {\n    // if this test some how failure, this mean that Jetty client now be able to switch between HTTP/1\n    // and HTTP/2.2 protocol dynamically therefore rolling updates will be easier we should then notify this to users\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    System.clearProperty(\"solr.http1\");\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP2);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (ParseException ignored) {\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (SolrServerException e) {\n        // expected\n      }\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest#testConnectToOldNodesUsingHttp2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest#testConnectToOldNodesUsingHttp2().mjava","sourceNew":"  public void testConnectToOldNodesUsingHttp2() throws Exception {\n    // if this test some how failure, this mean that Jetty client now be able to switch between HTTP/1\n    // and HTTP/2.2 protocol dynamically therefore rolling updates will be easier we should then notify this to users\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    System.clearProperty(\"solr.http1\");\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP2);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (SolrServerException e) {\n        // expected\n      }\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n\n","sourceOld":"  public void testConnectToOldNodesUsingHttp2() throws Exception {\n    // if this test some how failure, this mean that Jetty client now be able to switch between HTTP/1\n    // and HTTP/2.2 protocol dynamically therefore rolling updates will be easier we should then notify this to users\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    System.clearProperty(\"solr.http1\");\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP2);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (ParseException ignored) {\n        fail(\"Jetty client with HTTP2 transport should not be able to connect to HTTP1 only nodes\");\n      } catch (SolrServerException e) {\n        // expected\n      }\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}