{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1346c5dacb766a49ec3b6160a23d2e80073501c","date":1417857339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive()) {\n        MergePolicy.OneMerge merge = mt.getCurrentMerge();\n        if (merge != null && merge.isAborted() == false) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":["5451c3a3b069da464a9354b2c631345c8240a983"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive()) {\n        MergePolicy.OneMerge merge = mt.getCurrentMerge();\n        if (merge != null && merge.isAborted() == false) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":["c6cc2915889370c9313ee1741da315e976bdd574"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7bf95be1fe06a3535aa13b9fc2ce7ebac0eae6db","date":1420822089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   *\n   * @lucene.internal\n   */\n  public synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6cc2915889370c9313ee1741da315e976bdd574","date":1422111819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive, ignoring the calling thread\n   * if it is a merge thread.  Note that this number is &le; {@link #mergeThreads} size.\n   *\n   * @lucene.internal\n   */\n  public synchronized int mergeThreadCount() {\n    Thread currentThread = Thread.currentThread();\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (currentThread != mergeThread && mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   *\n   * @lucene.internal\n   */\n  public synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":["5faf65b6692f15cca0f87bf8666c87899afc619f","abba363b04df5f50b5ec36177b5cd17c3fe73d6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive, ignoring the calling thread\n   * if it is a merge thread.  Note that this number is &le; {@link #mergeThreads} size.\n   *\n   * @lucene.internal\n   */\n  public synchronized int mergeThreadCount() {\n    Thread currentThread = Thread.currentThread();\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (currentThread != mergeThread && mergeThread.isAlive() && mergeThread.merge.isAborted() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive, ignoring the calling thread\n   * if it is a merge thread.  Note that this number is &le; {@link #mergeThreads} size.\n   *\n   * @lucene.internal\n   */\n  public synchronized int mergeThreadCount() {\n    Thread currentThread = Thread.currentThread();\n    int count = 0;\n    for (MergeThread mergeThread : mergeThreads) {\n      if (currentThread != mergeThread && mergeThread.isAlive() && mergeThread.merge.rateLimiter.getAbort() == false) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1346c5dacb766a49ec3b6160a23d2e80073501c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6cc2915889370c9313ee1741da315e976bdd574":["7bf95be1fe06a3535aa13b9fc2ce7ebac0eae6db"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["c6cc2915889370c9313ee1741da315e976bdd574"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a1346c5dacb766a49ec3b6160a23d2e80073501c"],"7bf95be1fe06a3535aa13b9fc2ce7ebac0eae6db":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a1346c5dacb766a49ec3b6160a23d2e80073501c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a1346c5dacb766a49ec3b6160a23d2e80073501c":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"c6cc2915889370c9313ee1741da315e976bdd574":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["7bf95be1fe06a3535aa13b9fc2ce7ebac0eae6db"],"7bf95be1fe06a3535aa13b9fc2ce7ebac0eae6db":["c6cc2915889370c9313ee1741da315e976bdd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}