{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#rotateToTree(int,int,int,byte[],List[byte[]]).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#rotateToTree(int,int,int,byte[],List[byte[]]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: there must be a simpler way?\n  private void rotateToTree(int nodeID, int offset, int count, byte[] index, List<byte[]> leafBlockStartValues) {\n    //System.out.println(\"ROTATE: nodeID=\" + nodeID + \" offset=\" + offset + \" count=\" + count + \" bpd=\" + bytesPerDim + \" index.length=\" + index.length);\n    if (count == 1) {\n      // Leaf index node\n      //System.out.println(\"  leaf index node\");\n      //System.out.println(\"  index[\" + nodeID + \"] = blockStartValues[\" + offset + \"]\");\n      System.arraycopy(leafBlockStartValues.get(offset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n    } else if (count > 1) {\n      // Internal index node: binary partition of count\n      int countAtLevel = 1;\n      int totalCount = 0;\n      while (true) {\n        int countLeft = count - totalCount;\n        //System.out.println(\"    cycle countLeft=\" + countLeft + \" coutAtLevel=\" + countAtLevel);\n        if (countLeft <= countAtLevel) {\n          // This is the last level, possibly partially filled:\n          int lastLeftCount = Math.min(countAtLevel/2, countLeft);\n          assert lastLeftCount >= 0;\n          int leftHalf = (totalCount-1)/2 + lastLeftCount;\n\n          int rootOffset = offset + leftHalf;\n          /*\n          System.out.println(\"  last left count \" + lastLeftCount);\n          System.out.println(\"  leftHalf \" + leftHalf + \" rightHalf=\" + (count-leftHalf-1));\n          System.out.println(\"  rootOffset=\" + rootOffset);\n          */\n\n          System.arraycopy(leafBlockStartValues.get(rootOffset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n          //System.out.println(\"  index[\" + nodeID + \"] = blockStartValues[\" + rootOffset + \"]\");\n\n          // TODO: we could optimize/specialize, when we know it's simply fully balanced binary tree\n          // under here, to save this while loop on each recursion\n\n          // Recurse left\n          rotateToTree(2*nodeID, offset, leftHalf, index, leafBlockStartValues);\n\n          // Recurse right\n          rotateToTree(2*nodeID+1, rootOffset+1, count-leftHalf-1, index, leafBlockStartValues);\n          return;\n        }\n        totalCount += countAtLevel;\n        countAtLevel *= 2;\n      }\n    } else {\n      assert count == 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7","date":1588412059,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#rotateToTree(int,int,int,byte[],List[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#rotateToTree(int,int,int,byte[],List[byte[]]).mjava","sourceNew":"  private void rotateToTree(int nodeID, int offset, int numNodes, byte[] index, List<byte[]> leafBlockStartValues) {\n    if (numNodes == 1) {\n      // Leaf index node\n      System.arraycopy(leafBlockStartValues.get(offset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n    } else if (numNodes > 1) {\n      // Internal index node\n      // numNodes + 1 is the number of leaves\n      // -1 because there is one less inner node\n      int leftHalf = getNumLeftLeafNodes(numNodes + 1) - 1;\n      int rootOffset = offset + leftHalf;\n\n      System.arraycopy(leafBlockStartValues.get(rootOffset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n\n      // Recurse left\n      rotateToTree(2*nodeID, offset, leftHalf, index, leafBlockStartValues);\n      // Recurse right\n      rotateToTree(2*nodeID+1, rootOffset+1, numNodes-leftHalf-1, index, leafBlockStartValues);\n    } else {\n      assert numNodes == 0;\n    }\n  }\n\n","sourceOld":"  // TODO: there must be a simpler way?\n  private void rotateToTree(int nodeID, int offset, int count, byte[] index, List<byte[]> leafBlockStartValues) {\n    //System.out.println(\"ROTATE: nodeID=\" + nodeID + \" offset=\" + offset + \" count=\" + count + \" bpd=\" + bytesPerDim + \" index.length=\" + index.length);\n    if (count == 1) {\n      // Leaf index node\n      //System.out.println(\"  leaf index node\");\n      //System.out.println(\"  index[\" + nodeID + \"] = blockStartValues[\" + offset + \"]\");\n      System.arraycopy(leafBlockStartValues.get(offset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n    } else if (count > 1) {\n      // Internal index node: binary partition of count\n      int countAtLevel = 1;\n      int totalCount = 0;\n      while (true) {\n        int countLeft = count - totalCount;\n        //System.out.println(\"    cycle countLeft=\" + countLeft + \" coutAtLevel=\" + countAtLevel);\n        if (countLeft <= countAtLevel) {\n          // This is the last level, possibly partially filled:\n          int lastLeftCount = Math.min(countAtLevel/2, countLeft);\n          assert lastLeftCount >= 0;\n          int leftHalf = (totalCount-1)/2 + lastLeftCount;\n\n          int rootOffset = offset + leftHalf;\n          /*\n          System.out.println(\"  last left count \" + lastLeftCount);\n          System.out.println(\"  leftHalf \" + leftHalf + \" rightHalf=\" + (count-leftHalf-1));\n          System.out.println(\"  rootOffset=\" + rootOffset);\n          */\n\n          System.arraycopy(leafBlockStartValues.get(rootOffset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n          //System.out.println(\"  index[\" + nodeID + \"] = blockStartValues[\" + rootOffset + \"]\");\n\n          // TODO: we could optimize/specialize, when we know it's simply fully balanced binary tree\n          // under here, to save this while loop on each recursion\n\n          // Recurse left\n          rotateToTree(2*nodeID, offset, leftHalf, index, leafBlockStartValues);\n\n          // Recurse right\n          rotateToTree(2*nodeID+1, rootOffset+1, count-leftHalf-1, index, leafBlockStartValues);\n          return;\n        }\n        totalCount += countAtLevel;\n        countAtLevel *= 2;\n      }\n    } else {\n      assert count == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce","date":1589215155,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#rotateToTree(int,int,int,byte[],List[byte[]]).mjava","sourceNew":null,"sourceOld":"  private void rotateToTree(int nodeID, int offset, int numNodes, byte[] index, List<byte[]> leafBlockStartValues) {\n    if (numNodes == 1) {\n      // Leaf index node\n      System.arraycopy(leafBlockStartValues.get(offset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n    } else if (numNodes > 1) {\n      // Internal index node\n      // numNodes + 1 is the number of leaves\n      // -1 because there is one less inner node\n      int leftHalf = getNumLeftLeafNodes(numNodes + 1) - 1;\n      int rootOffset = offset + leftHalf;\n\n      System.arraycopy(leafBlockStartValues.get(rootOffset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);\n\n      // Recurse left\n      rotateToTree(2*nodeID, offset, leftHalf, index, leafBlockStartValues);\n      // Recurse right\n      rotateToTree(2*nodeID+1, rootOffset+1, numNodes-leftHalf-1, index, leafBlockStartValues);\n    } else {\n      assert numNodes == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"]},"commit2Childs":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}