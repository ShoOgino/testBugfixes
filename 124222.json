{"path":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","commits":[{"id":"896b6bb47eab388b6ca69d9bba9c47793899499e","date":1254192949,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds for a total of 20 seconds.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<100; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"951eb4b101a82e94bb51e8c7e858617a2e4cc6e9","date":1254251059,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds for a total of 20 seconds.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<100; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds for a total of 20 seconds.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<100; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d2a4ae20ae0e66dbd6de152c7ec5aeabb3465d","date":1254261228,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds for a total of 20 seconds.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<100; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"896b6bb47eab388b6ca69d9bba9c47793899499e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"951eb4b101a82e94bb51e8c7e858617a2e4cc6e9":["896b6bb47eab388b6ca69d9bba9c47793899499e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["34d2a4ae20ae0e66dbd6de152c7ec5aeabb3465d"],"34d2a4ae20ae0e66dbd6de152c7ec5aeabb3465d":["951eb4b101a82e94bb51e8c7e858617a2e4cc6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"896b6bb47eab388b6ca69d9bba9c47793899499e":["951eb4b101a82e94bb51e8c7e858617a2e4cc6e9"],"951eb4b101a82e94bb51e8c7e858617a2e4cc6e9":["34d2a4ae20ae0e66dbd6de152c7ec5aeabb3465d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["896b6bb47eab388b6ca69d9bba9c47793899499e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"34d2a4ae20ae0e66dbd6de152c7ec5aeabb3465d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}