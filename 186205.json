{"path":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectangle(double,double,double,double).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectangle(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  protected void testRectangle(double minX, double width, double minY, double height) {\n    Rectangle r = ctx.makeRect(minX, minX + width, minY, minY+height);\n    //test equals & hashcode of duplicate\n    Rectangle r2 = ctx.makeRect(minX, minX + width, minY, minY+height);\n    assertEquals(r,r2);\n    assertEquals(r.hashCode(),r2.hashCode());\n\n    String msg = r.toString();\n\n    assertEquals(msg, width != 0 && height != 0, r.hasArea());\n    assertEquals(msg, width != 0 && height != 0, r.getArea() > 0);\n\n    assertEqualsRatio(msg, height, r.getHeight());\n    assertEqualsRatio(msg, width, r.getWidth());\n    Point center = r.getCenter();\n    msg += \" ctr:\"+center;\n    //System.out.println(msg);\n    assertRelation(msg, CONTAINS, r, center);\n\n    DistanceCalculator dc = ctx.getDistCalc();\n    double dUR = dc.distance(center, r.getMaxX(), r.getMaxY());\n    double dLR = dc.distance(center, r.getMaxX(), r.getMinY());\n    double dUL = dc.distance(center, r.getMinX(), r.getMaxY());\n    double dLL = dc.distance(center, r.getMinX(), r.getMinY());\n\n    assertEquals(msg,width != 0 || height != 0, dUR != 0);\n    if (dUR != 0)\n      assertTrue(dUR > 0 && dLL > 0);\n    assertEqualsRatio(msg, dUR, dUL);\n    assertEqualsRatio(msg, dLR, dLL);\n    if (!ctx.isGeo() || center.getY() == 0)\n      assertEqualsRatio(msg, dUR, dLL);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectangle(double,double,double,double).mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectangle(double,double,double,double).mjava","sourceNew":"  protected void testRectangle(double minX, double width, double minY, double height) {\n    Rectangle r = ctx.makeRect(minX, minX + width, minY, minY+height);\n    //test equals & hashcode of duplicate\n    Rectangle r2 = ctx.makeRect(minX, minX + width, minY, minY+height);\n    assertEquals(r,r2);\n    assertEquals(r.hashCode(),r2.hashCode());\n\n    String msg = r.toString();\n\n    assertEquals(msg, width != 0 && height != 0, r.hasArea());\n    assertEquals(msg, width != 0 && height != 0, r.getArea() > 0);\n\n    assertEqualsRatio(msg, height, r.getHeight());\n    assertEqualsRatio(msg, width, r.getWidth());\n    Point center = r.getCenter();\n    msg += \" ctr:\"+center;\n    //System.out.println(msg);\n    assertRelation(msg, CONTAINS, r, center);\n\n    DistanceCalculator dc = ctx.getDistCalc();\n    double dUR = dc.distance(center, r.getMaxX(), r.getMaxY());\n    double dLR = dc.distance(center, r.getMaxX(), r.getMinY());\n    double dUL = dc.distance(center, r.getMinX(), r.getMaxY());\n    double dLL = dc.distance(center, r.getMinX(), r.getMinY());\n\n    assertEquals(msg,width != 0 || height != 0, dUR != 0);\n    if (dUR != 0)\n      assertTrue(dUR > 0 && dLL > 0);\n    assertEqualsRatio(msg, dUR, dUL);\n    assertEqualsRatio(msg, dLR, dLL);\n    if (!ctx.isGeo() || center.getY() == 0)\n      assertEqualsRatio(msg, dUR, dLL);\n  }\n\n","sourceOld":"  protected void testRectangle(double minX, double width, double minY, double height) {\n    Rectangle r = ctx.makeRect(minX, minX + width, minY, minY+height);\n    //test equals & hashcode of duplicate\n    Rectangle r2 = ctx.makeRect(minX, minX + width, minY, minY+height);\n    assertEquals(r,r2);\n    assertEquals(r.hashCode(),r2.hashCode());\n\n    String msg = r.toString();\n\n    assertEquals(msg, width != 0 && height != 0, r.hasArea());\n    assertEquals(msg, width != 0 && height != 0, r.getArea() > 0);\n\n    assertEqualsRatio(msg, height, r.getHeight());\n    assertEqualsRatio(msg, width, r.getWidth());\n    Point center = r.getCenter();\n    msg += \" ctr:\"+center;\n    //System.out.println(msg);\n    assertRelation(msg, CONTAINS, r, center);\n\n    DistanceCalculator dc = ctx.getDistCalc();\n    double dUR = dc.distance(center, r.getMaxX(), r.getMaxY());\n    double dLR = dc.distance(center, r.getMaxX(), r.getMinY());\n    double dUL = dc.distance(center, r.getMinX(), r.getMaxY());\n    double dLL = dc.distance(center, r.getMinX(), r.getMinY());\n\n    assertEquals(msg,width != 0 || height != 0, dUR != 0);\n    if (dUR != 0)\n      assertTrue(dUR > 0 && dLL > 0);\n    assertEqualsRatio(msg, dUR, dUL);\n    assertEqualsRatio(msg, dLR, dLL);\n    if (!ctx.isGeo() || center.getY() == 0)\n      assertEqualsRatio(msg, dUR, dLL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}