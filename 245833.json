{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new PackedReaderIterator(valueCount, bitsPerValue, in);\n      case PACKED_SINGLE_BLOCK:\n        return new Packed64SingleBlockReaderIterator(valueCount, bitsPerValue, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(DataInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @param mem how much memory the iterator is allowed to use to read-ahead (likely to speed up iteration)\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(DataInput in, int mem) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getReaderIteratorNoHeader(in, format, version, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new PackedReaderIterator(valueCount, bitsPerValue, in);\n      case PACKED_SINGLE_BLOCK:\n        return new Packed64SingleBlockReaderIterator(valueCount, bitsPerValue, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new PackedReaderIterator(valueCount, bitsPerValue, in);\n      case PACKED_SINGLE_BLOCK:\n        return new Packed64SingleBlockReaderIterator(valueCount, bitsPerValue, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55110eb60c5105294fc2ae7912d82b750865aa58":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55110eb60c5105294fc2ae7912d82b750865aa58"]},"commit2Childs":{"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}