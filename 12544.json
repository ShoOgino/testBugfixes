{"path":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    StopAnalyzer stopAnalyzer = new StopAnalyzer(Version.LUCENE_24);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    StopAnalyzer stopAnalyzer = new StopAnalyzer(Version.LUCENE_24);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    StopAnalyzer stopAnalyzer = new StopAnalyzer(Version.LUCENE_24);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    MockRAMDirectory directory = newDirectory(random);\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory(random);\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    MockRAMDirectory directory = newDirectory(random);\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory(random);\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, Version.LUCENE_24, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testPhraseQueryWithStopAnalyzer().mjava","sourceNew":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPhraseQueryWithStopAnalyzer() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer stopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig( Version.LUCENE_40, stopAnalyzer));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the stop words are here\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    // valid exact phrase query\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\",\"stop\"));\n    query.add(new Term(\"field\",\"words\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // StopAnalyzer as of 2.4 does not leave \"holes\", so this matches.\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"words\"));\n    query.add(new Term(\"field\", \"here\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c084e47df29de3330311d69dabf515ceaa989512":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"53a31399f2471493d67b19a95c028a74e0113b6a":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5f4e87790277826a2aea119328600dfb07761f32":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}