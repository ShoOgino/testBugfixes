{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7","date":1282945751,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc9ec9d023399f0240d6bc989c11fc63ca398139","date":1308001380,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":null,"sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":null,"sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) <= length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"68b4c6c95719e3020e407649a20b68538649beeb":["dc9ec9d023399f0240d6bc989c11fc63ca398139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7"],"dc9ec9d023399f0240d6bc989c11fc63ca398139":["fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7","68b4c6c95719e3020e407649a20b68538649beeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68b4c6c95719e3020e407649a20b68538649beeb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","dc9ec9d023399f0240d6bc989c11fc63ca398139","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"68b4c6c95719e3020e407649a20b68538649beeb":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"dc9ec9d023399f0240d6bc989c11fc63ca398139":["68b4c6c95719e3020e407649a20b68538649beeb"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fdefa116bcbcf81f5fad6c30040fcc2d2a79f7f7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}