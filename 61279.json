{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","commits":[{"id":"0d8448be43e6bd7d69aa0227187fca146a1f2262","date":1338393518,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","pathOld":"/dev/null","sourceNew":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","date":1354906497,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","sourceNew":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      {\n        //make sure we can handle 2-char codepoints\n        Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);        \n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","sourceOld":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","sourceNew":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      {\n        //make sure we can handle 2-char codepoints\n        Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);        \n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","sourceOld":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","sourceNew":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = DirectoryReader.open(dir);\n    WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n    \n    {\n      Term term = new Term(\"numbers\", \"ninetynine\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n    }\n    {\n      Term term = new Term(\"numbers\", \"onethousand\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(1);\n      sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(2);\n      sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(1);\n      sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==2);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n      Assert.assertTrue(sw[0][1].freq>1);\n      Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n      Assert.assertTrue(sw[1].length==3);\n      Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n      Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      Assert.assertTrue(sw[1][0].score == 2);\n      Assert.assertTrue(sw[1][1].score == 2);\n      Assert.assertTrue(sw[1][2].score == 2);\n      Assert.assertTrue(sw[1][0].freq>1);\n      Assert.assertTrue(sw[1][1].freq==1);\n      Assert.assertTrue(sw[1][2].freq==1);\n    }\n    {\n      Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n      wbsp.setMaxChanges(3);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==0);\n      \n      wbsp.setMaxChanges(4);\n      sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==5);\n      \n      wbsp.setMaxChanges(5);\n      sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==2);\n      Assert.assertTrue(sw[0].length==5);\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[1].length==6);\n      Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n      Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n    }\n    {\n      //make sure we can handle 2-char codepoints\n      Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==0);        \n    }\n    \n    ir.close();\n  }\n\n","sourceOld":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      {\n        //make sure we can handle 2-char codepoints\n        Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);        \n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testBreakingWords().mjava","sourceNew":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = DirectoryReader.open(dir);\n    WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n    \n    {\n      Term term = new Term(\"numbers\", \"ninetynine\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n    }\n    {\n      Term term = new Term(\"numbers\", \"onethousand\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(1);\n      sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(2);\n      sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==2);\n      \n      wbsp.setMaxChanges(2);\n      wbsp.setMinSuggestionFrequency(1);\n      sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==2);\n      Assert.assertTrue(sw[0].length==2);\n      Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[0][0].score == 1);\n      Assert.assertTrue(sw[0][1].score == 1);\n      Assert.assertTrue(sw[0][1].freq>1);\n      Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n      Assert.assertTrue(sw[1].length==3);\n      Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n      Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n      Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      Assert.assertTrue(sw[1][0].score == 2);\n      Assert.assertTrue(sw[1][1].score == 2);\n      Assert.assertTrue(sw[1][2].score == 2);\n      Assert.assertTrue(sw[1][0].freq>1);\n      Assert.assertTrue(sw[1][1].freq==1);\n      Assert.assertTrue(sw[1][2].freq==1);\n    }\n    {\n      Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n      wbsp.setMaxChanges(3);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==0);\n      \n      wbsp.setMaxChanges(4);\n      sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==1);\n      Assert.assertTrue(sw[0].length==5);\n      \n      wbsp.setMaxChanges(5);\n      sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==2);\n      Assert.assertTrue(sw[0].length==5);\n      Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n      Assert.assertTrue(sw[1].length==6);\n      Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n      Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n    }\n    {\n      //make sure we can handle 2-char codepoints\n      Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n      wbsp.setMaxChanges(1);\n      wbsp.setMinBreakWordLength(1);\n      wbsp.setMinSuggestionFrequency(1);\n      SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n      Assert.assertTrue(sw.length==0);        \n    }\n    \n    ir.close();\n  }\n\n","sourceOld":"  public void testBreakingWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {\n        Term term = new Term(\"numbers\", \"ninetynine\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"ninety\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"nine\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousand\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 1, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(2);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==2);\n        \n        wbsp.setMaxChanges(2);\n        wbsp.setMinSuggestionFrequency(1);\n        sw = wbsp.suggestWordBreaks(term, 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==2);\n        Assert.assertTrue(sw[0][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[0][0].score == 1);\n        Assert.assertTrue(sw[0][1].score == 1);\n        Assert.assertTrue(sw[0][1].freq>1);\n        Assert.assertTrue(sw[0][0].freq>sw[0][1].freq);\n        Assert.assertTrue(sw[1].length==3);\n        Assert.assertTrue(sw[1][0].string.equals(\"one\"));\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n        Assert.assertTrue(sw[1][0].score == 2);\n        Assert.assertTrue(sw[1][1].score == 2);\n        Assert.assertTrue(sw[1][2].score == 2);\n        Assert.assertTrue(sw[1][0].freq>1);\n        Assert.assertTrue(sw[1][1].freq==1);\n        Assert.assertTrue(sw[1][2].freq==1);\n      }\n      {\n        Term term = new Term(\"numbers\", \"onethousandonehundredeleven\");\n        wbsp.setMaxChanges(3);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);\n        \n        wbsp.setMaxChanges(4);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==1);\n        Assert.assertTrue(sw[0].length==5);\n        \n        wbsp.setMaxChanges(5);\n        sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==2);\n        Assert.assertTrue(sw[0].length==5);\n        Assert.assertTrue(sw[0][1].string.equals(\"thousand\"));\n        Assert.assertTrue(sw[1].length==6);\n        Assert.assertTrue(sw[1][1].string.equals(\"thou\"));\n        Assert.assertTrue(sw[1][2].string.equals(\"sand\"));\n      }\n      {\n        //make sure we can handle 2-char codepoints\n        Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n        wbsp.setMaxChanges(1);\n        wbsp.setMinBreakWordLength(1);\n        wbsp.setMinSuggestionFrequency(1);\n        SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n        Assert.assertTrue(sw.length==0);        \n      }\n      \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","a56958d7f71a28824f20031ffbb2e13502a0274e"],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0d8448be43e6bd7d69aa0227187fca146a1f2262","efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}