{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testExpand().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testExpand().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testExpand().mjava","sourceNew":"  public void testExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"b c\" => \"a b\",\"b c\",\"a b c\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b c d\" => \"a b\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"b c d\" => \"a b c\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"c d e\" => \"a b c\",\"c d e\",\"a b c d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"c\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"c\", \"d\", \"e\" ), pqF( \"a\", \"b\", \"c\", \"d\", \"e\" ) );\n\n    // \"a b c d\",\"b c\" => \"a b c d\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\", \"d\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\", \"d\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b b\",\"b c\" => \"a b b\",\"b c\",\"a b b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b a\" => \"a b\",\"b a\",\"a b a\", \"b a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"a\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"a\" ), pqF( \"a\", \"b\", \"a\" ), pqF( \"b\", \"a\", \"b\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n  }\n\n","sourceOld":"  public void testExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"b c\" => \"a b\",\"b c\",\"a b c\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b c d\" => \"a b\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"b c d\" => \"a b c\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"c d e\" => \"a b c\",\"c d e\",\"a b c d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"c\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"c\", \"d\", \"e\" ), pqF( \"a\", \"b\", \"c\", \"d\", \"e\" ) );\n\n    // \"a b c d\",\"b c\" => \"a b c d\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\", \"d\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\", \"d\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b b\",\"b c\" => \"a b b\",\"b c\",\"a b b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b a\" => \"a b\",\"b a\",\"a b a\", \"b a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"a\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"a\" ), pqF( \"a\", \"b\", \"a\" ), pqF( \"b\", \"a\", \"b\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testExpand().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testExpand().mjava","sourceNew":"  public void testExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"b c\" => \"a b\",\"b c\",\"a b c\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b c d\" => \"a b\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"b c d\" => \"a b c\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"c d e\" => \"a b c\",\"c d e\",\"a b c d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"c\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"c\", \"d\", \"e\" ), pqF( \"a\", \"b\", \"c\", \"d\", \"e\" ) );\n\n    // \"a b c d\",\"b c\" => \"a b c d\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\", \"d\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\", \"d\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b b\",\"b c\" => \"a b b\",\"b c\",\"a b b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b a\" => \"a b\",\"b a\",\"a b a\", \"b a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"a\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"a\" ), pqF( \"a\", \"b\", \"a\" ), pqF( \"b\", \"a\", \"b\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n  }\n\n","sourceOld":"  public void testExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"b c\" => \"a b\",\"b c\",\"a b c\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b c d\" => \"a b\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"b c d\" => \"a b c\",\"b c d\",\"a b c d\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\", \"d\" ), pqF( \"a\", \"b\", \"c\", \"d\" ) );\n\n    // \"a b c\",\"c d e\" => \"a b c\",\"c d e\",\"a b c d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"c\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"c\", \"d\", \"e\" ), pqF( \"a\", \"b\", \"c\", \"d\", \"e\" ) );\n\n    // \"a b c d\",\"b c\" => \"a b c d\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\", \"d\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\", \"d\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b b\",\"b c\" => \"a b b\",\"b c\",\"a b b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"b\" ), pqF( \"b\", \"c\" ), pqF( \"a\", \"b\", \"b\", \"c\" ) );\n\n    // \"a b\",\"b a\" => \"a b\",\"b a\",\"a b a\", \"b a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"b\", \"a\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"b\", \"a\" ), pqF( \"a\", \"b\", \"a\" ), pqF( \"b\", \"a\", \"b\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}