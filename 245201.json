{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#doTestRandom(int).mjava","commits":[{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4312aa12218419d320e0966c3f3e72deb359afaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6345300cb90308ddf9579f7a7396a32d98795311":["4312aa12218419d320e0966c3f3e72deb359afaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6345300cb90308ddf9579f7a7396a32d98795311"]},"commit2Childs":{"4312aa12218419d320e0966c3f3e72deb359afaa":["6345300cb90308ddf9579f7a7396a32d98795311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4312aa12218419d320e0966c3f3e72deb359afaa"],"6345300cb90308ddf9579f7a7396a32d98795311":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}