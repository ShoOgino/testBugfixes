{"path":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    SolrCache parentFilterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"perSegFilter\");\n\n    SolrCache filterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"filterCache\");\n\n    NamedList parentsBefore = parentFilterCache.getStatistics();\n\n    NamedList filtersBefore = filterCache.getStatistics();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getStatistics(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getStatistics(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getStatistics(), filtersBefore));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e824c614ba8ba12c19a3945f1d1c838b97a870cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    SolrCache parentFilterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"perSegFilter\");\n\n    SolrCache filterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"filterCache\");\n\n    NamedList parentsBefore = parentFilterCache.getStatistics();\n\n    NamedList filtersBefore = filterCache.getStatistics();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getStatistics(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getStatistics(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getStatistics(), filtersBefore));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\");\n    MetricsMap filterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    SolrCache parentFilterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"perSegFilter\");\n\n    SolrCache filterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"filterCache\");\n\n    NamedList parentsBefore = parentFilterCache.getStatistics();\n\n    NamedList filtersBefore = filterCache.getStatistics();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getStatistics(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getStatistics(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getStatistics(), filtersBefore));\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\");\n    MetricsMap filterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    SolrCache parentFilterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"perSegFilter\");\n\n    SolrCache filterCache = (SolrCache) h.getCore().getInfoRegistry()\n        .get(\"filterCache\");\n\n    NamedList parentsBefore = parentFilterCache.getStatistics();\n\n    NamedList filtersBefore = filterCache.getStatistics();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getStatistics(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getStatistics(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getStatistics(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getStatistics(), filtersBefore));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\");\n    MetricsMap filterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":["e824c614ba8ba12c19a3945f1d1c838b97a870cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\");\n    MetricsMap filterCache = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e824c614ba8ba12c19a3945f1d1c838b97a870cf","date":1524763064,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper<?>)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper<?>)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a3934808ca385ff0f01756464ed6f7a5ab4025","date":1524832780,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testCacheHit().mjava","sourceNew":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper<?>)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper<?>)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","sourceOld":"  @Test\n  public void testCacheHit() throws IOException {\n\n    MetricsMap parentFilterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.perSegFilter\")).getGauge();\n    MetricsMap filterCache = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n\n\n    Map<String,Object> parentsBefore = parentFilterCache.getValue();\n\n    Map<String,Object> filtersBefore = filterCache.getValue();\n\n    // it should be weird enough to be uniq\n    String parentFilter = \"parent_s:([a TO c] [d TO f])\";\n\n    assertQ(\"search by parent filter\",\n        req(\"q\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertQ(\"filter by parent filter\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter + \"\\\"}\"),\n        \"//*[@numFound='6']\");\n\n    assertEquals(\"didn't hit fqCache yet \", 0L,\n        delta(\"hits\", filterCache.getValue(), filtersBefore));\n\n    assertQ(\n        \"filter by join\",\n        req(\"q\", \"*:*\", \"fq\", \"{!parent which=\\\"\" + parentFilter\n            + \"\\\"}child_s:l\"), \"//*[@numFound='6']\");\n\n    assertEquals(\"in cache mode every request lookups\", 3,\n        delta(\"lookups\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"last two lookups causes hits\", 2,\n        delta(\"hits\", parentFilterCache.getValue(), parentsBefore));\n    assertEquals(\"the first lookup gets insert\", 1,\n        delta(\"inserts\", parentFilterCache.getValue(), parentsBefore));\n\n\n    assertEquals(\"true join query is cached in fqCache\", 1L,\n        delta(\"lookups\", filterCache.getValue(), filtersBefore));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3a3934808ca385ff0f01756464ed6f7a5ab4025":["43564cbb30b064675027cfb569564e8531096e97","e824c614ba8ba12c19a3945f1d1c838b97a870cf"],"e824c614ba8ba12c19a3945f1d1c838b97a870cf":["43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3a3934808ca385ff0f01756464ed6f7a5ab4025"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["d3a3934808ca385ff0f01756464ed6f7a5ab4025","e824c614ba8ba12c19a3945f1d1c838b97a870cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"d3a3934808ca385ff0f01756464ed6f7a5ab4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e824c614ba8ba12c19a3945f1d1c838b97a870cf":["d3a3934808ca385ff0f01756464ed6f7a5ab4025"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}