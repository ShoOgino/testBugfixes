{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["101645ef3f7b3be12940241226f9e1636541aadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a48f7cd0244240f18c36f7c896eef3855b714195","date":1498549683,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"face217c60f59b356129804dd0f7508779078fe3","date":1498692025,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7427c059f8ca782712a1bb2e67ff3a56c6d20162","date":1499216619,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d8e6696ad139aa0f0bfe30fb4e933b38530f214","date":1507644775,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getDataProviderState(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["101645ef3f7b3be12940241226f9e1636541aadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101645ef3f7b3be12940241226f9e1636541aadc","date":1507815822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"$$$$$$$$$$$$$$Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + getDataProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getDataProviderState(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214","1f6b20dc453cee198956989b90aa24bef0232bcf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"$$$$$$$$$$$$$$Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"$$$$$$$$$$$$$$Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + getDataProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n//    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"$$$$$$$$$$$$$$Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented 4-Sep-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented 4-Sep-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n  }\n\n","bugFix":["face217c60f59b356129804dd0f7508779078fe3","f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLost().mjava","sourceNew":null,"sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") \n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    String node = runner.getNodeName();\n    AssertingTriggerAction.expectedNode = node;\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", clusterShape(1, 2));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    JettySolrRunner node2 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(node2.getNodeName() + \"is not live yet\", cluster.getSolrClient().getZkStateReader().getClusterState().liveNodesContain(node2.getNodeName()) );\n\n    // stop the original node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == runner)  {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"Stopped_node : {}\", node);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \"+ getNodeStateProviderState() + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      if (jettySolrRunner == node2)  {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["face217c60f59b356129804dd0f7508779078fe3"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["101645ef3f7b3be12940241226f9e1636541aadc"],"face217c60f59b356129804dd0f7508779078fe3":["a48f7cd0244240f18c36f7c896eef3855b714195"],"43ad790248d7f7daee5d9cced548c546f37c7218":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["e0d9c88546c1a130d50b56981790d87a308daffd"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["43ad790248d7f7daee5d9cced548c546f37c7218"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43ad790248d7f7daee5d9cced548c546f37c7218","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d9c88546c1a130d50b56981790d87a308daffd":["face217c60f59b356129804dd0f7508779078fe3","7427c059f8ca782712a1bb2e67ff3a56c6d20162"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"101645ef3f7b3be12940241226f9e1636541aadc":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a48f7cd0244240f18c36f7c896eef3855b714195":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43ad790248d7f7daee5d9cced548c546f37c7218","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["101645ef3f7b3be12940241226f9e1636541aadc"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["e0d9c88546c1a130d50b56981790d87a308daffd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"face217c60f59b356129804dd0f7508779078fe3":["7427c059f8ca782712a1bb2e67ff3a56c6d20162","e0d9c88546c1a130d50b56981790d87a308daffd"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"43ad790248d7f7daee5d9cced548c546f37c7218":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["43ad790248d7f7daee5d9cced548c546f37c7218"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"e0d9c88546c1a130d50b56981790d87a308daffd":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a48f7cd0244240f18c36f7c896eef3855b714195"],"101645ef3f7b3be12940241226f9e1636541aadc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a48f7cd0244240f18c36f7c896eef3855b714195":["face217c60f59b356129804dd0f7508779078fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}