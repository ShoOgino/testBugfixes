{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b8de6920954704c456d12a43f75d7bfdd33c5c6","date":1353433257,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec93834386bed35d2664923b0cc98cf7e36168a4","date":1403021418,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ROOT;\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          @SuppressWarnings(\"rawtypes\")\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          @SuppressWarnings(\"rawtypes\")\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          @SuppressWarnings({\"rawtypes\"})\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n      String customLocale = map.get(LOCALE);\n      if (customLocale != null) {\n        try {\n          locale = new Locale.Builder().setLanguageTag(customLocale).build();\n        } catch (IllformedLocaleException e) {\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified: \" + customLocale, e);\n        }\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      VariableResolver resolver = context.getVariableResolver();\n      fmt = resolver.replaceTokens(fmt);\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          @SuppressWarnings({\"rawtypes\"})\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        log.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ec93834386bed35d2664923b0cc98cf7e36168a4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["ec93834386bed35d2664923b0cc98cf7e36168a4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"ec93834386bed35d2664923b0cc98cf7e36168a4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8b8de6920954704c456d12a43f75d7bfdd33c5c6":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","ec93834386bed35d2664923b0cc98cf7e36168a4"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"ec93834386bed35d2664923b0cc98cf7e36168a4":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"8b8de6920954704c456d12a43f75d7bfdd33c5c6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}