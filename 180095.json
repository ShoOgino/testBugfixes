{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","sourceNew":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.\n    Node outerNode = createDoublyLinkedList(polygon.getPolyX(), polygon.getPolyY(), polygon.getWindingOrder(), false,\n        0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.\n    Node outerNode = createDoublyLinkedList(polygon.getPolyX(), polygon.getPolyY(), polygon.getWindingOrder(), false,\n        0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","sourceNew":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.0\n    Node outerNode = createDoublyLinkedList(XYEncodingUtils.floatArrayToDoubleArray(polygon.getPolyX()), XYEncodingUtils.floatArrayToDoubleArray(polygon.getPolyY()),\n        polygon.getWindingOrder(), false, 0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.\n    Node outerNode = createDoublyLinkedList(polygon.getPolyX(), polygon.getPolyY(), polygon.getWindingOrder(), false,\n        0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tessellate(XYPolygon).mjava","sourceNew":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.0\n    Node outerNode = createDoublyLinkedList(XYEncodingUtils.floatArrayToDoubleArray(polygon.getPolyX()), XYEncodingUtils.floatArrayToDoubleArray(polygon.getPolyY()),\n        polygon.getWindingOrder(), false, 0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static final List<Triangle> tessellate(final XYPolygon polygon) {\n    // Attempt to establish a doubly-linked list of the provided shell points (should be CCW, but this will correct);\n    // then filter instances of intersections.\n    Node outerNode = createDoublyLinkedList(polygon.getPolyX(), polygon.getPolyY(), polygon.getWindingOrder(), false,\n        0, WindingOrder.CW);\n    // If an outer node hasn't been detected, the shape is malformed. (must comply with OGC SFA specification)\n    if(outerNode == null) {\n      throw new IllegalArgumentException(\"Malformed shape detected in Tessellator!\");\n    }\n\n    // Determine if the specified list of points contains holes\n    if (polygon.numHoles() > 0) {\n      // Eliminate the hole triangulation.\n      outerNode = eliminateHoles(polygon, outerNode);\n    }\n\n    // If the shape crosses VERTEX_THRESHOLD, use z-order curve hashing:\n    final boolean mortonOptimized;\n    {\n      int threshold = VERTEX_THRESHOLD - polygon.numPoints();\n      for (int i = 0; threshold >= 0 && i < polygon.numHoles(); ++i) {\n        threshold -= polygon.getHole(i).numPoints();\n      }\n\n      // Link polygon nodes in Z-Order\n      mortonOptimized = threshold < 0;\n      if (mortonOptimized == true) {\n        sortByMorton(outerNode);\n      }\n    }\n    // Calculate the tessellation using the doubly LinkedList.\n    List<Triangle> result = earcutLinkedList(polygon, outerNode, new ArrayList<>(), State.INIT, mortonOptimized);\n    if (result.size() == 0) {\n      throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["09c1e6d465800c73af60624bf9d4459a19f7940c","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}