{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","commits":[{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"/dev/null","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    String collection = \"oneInstanceCollection\";\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(collection, collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(collection, collectionClients, baseUrl, 1);\n    createCollection(collection, collectionClients, baseUrl, 2);\n    createCollection(collection, collectionClients, baseUrl, 3);\n    createCollection(collection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(collection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(collection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(collection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(collection + \"4\", baseUrl);\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", collection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027","date":1328885564,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    String collection = \"oneInstanceCollection\";\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(collection, collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(collection, collectionClients, baseUrl, 1);\n    createCollection(collection, collectionClients, baseUrl, 2);\n    createCollection(collection, collectionClients, baseUrl, 3);\n    createCollection(collection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(collection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(collection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(collection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(collection + \"4\", baseUrl);\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", collection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    oneInstanceCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(oneDocs, threeDocs);\n    assertEquals(twoDocs, fourDocs);\n    assertNotSame(oneDocs, twoDocs);\n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((HttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((CommonsHttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e19067e820b148e8dc0b240da4f2771cf7b68252","date":1347730768,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    String baseUrl = ((HttpSolrServer) client).getBaseURL();\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, solrj.getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, solrj.getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = solrj.query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrServer client1 = collectionClients.get(0);\n    SolrServer client2 = collectionClients.get(1);\n    SolrServer client3 = collectionClients.get(2);\n    SolrServer client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrServer newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    otherCollectionClients.put(oneInstanceCollection , collectionClients);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    SolrServer client1 = createNewSolrServer(oneInstanceCollection + \"1\", baseUrl);\n    SolrServer client2 = createNewSolrServer(oneInstanceCollection + \"2\", baseUrl);\n    SolrServer client3 = createNewSolrServer(oneInstanceCollection + \"3\", baseUrl);\n    SolrServer client4 = createNewSolrServer(oneInstanceCollection + \"4\", baseUrl);\n    \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n  }\n\n","bugFix":["7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027","6101715a4732c1fe39eae50ce4a23fec6fc270d0","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<>();\n    SolrServer client = clients.get(0);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrServer client1 = collectionClients.get(0);\n    SolrServer client2 = collectionClients.get(1);\n    SolrServer client3 = collectionClients.get(2);\n    SolrServer client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrServer newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    SolrServer client = clients.get(0);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrServer client1 = collectionClients.get(0);\n    SolrServer client2 = collectionClients.get(1);\n    SolrServer client3 = collectionClients.get(2);\n    SolrServer client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrServer newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrClient newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrServer> collectionClients = new ArrayList<>();\n    SolrServer client = clients.get(0);\n    final String baseUrl = ((HttpSolrServer) client).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrServer client1 = collectionClients.get(0);\n    SolrServer client2 = collectionClients.get(1);\n    SolrServer client3 = collectionClients.get(2);\n    SolrServer client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrServer().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrServer newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    for(SolrClient newCollectionClient:collectionClients) {\n      newCollectionClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, \"conf1\", 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, \"conf1\", 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, \"conf1\", 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    List<SolrClient> collectionClients = new ArrayList<>();\n    SolrClient client = clients.get(0);\n    final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(\n        0,\n        ((HttpSolrClient) client).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 1);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 2);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 3);\n    createCollection(oneInstanceCollection, collectionClients, baseUrl, 4);\n    \n   while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testANewCollectionInOneInstance().mjava","sourceNew":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, \"conf1\", 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","sourceOld":"  private void testANewCollectionInOneInstance() throws Exception {\n    log.info(\"### STARTING testANewCollectionInOneInstance\");\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(oneInstanceCollection, \"conf1\", 2, 2)\n        .setCreateNodeSet(jettys.get(0).getNodeName())\n        .setMaxShardsPerNode(4)\n        .process(cloudClient);\n    assertEquals(0, response.getStatus());\n    List<SolrClient> collectionClients = new ArrayList<>();\n    for (String coreName : response.getCollectionCoresStatus().keySet()) {\n      collectionClients.add(createNewSolrClient(coreName, jettys.get(0).getBaseUrl().toString()));\n    }\n   \n    SolrClient client1 = collectionClients.get(0);\n    SolrClient client2 = collectionClients.get(1);\n    SolrClient client3 = collectionClients.get(2);\n    SolrClient client4 = collectionClients.get(3);\n \n    waitForRecoveriesToFinish(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader(), false);\n    assertAllActive(oneInstanceCollection, getCommonCloudSolrClient().getZkStateReader());\n    \n    client2.add(getDoc(id, \"1\")); \n    client3.add(getDoc(id, \"2\")); \n    client4.add(getDoc(id, \"3\")); \n    \n    client1.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"distrib\", false);\n    long oneDocs = client1.query(query).getResults().getNumFound();\n    long twoDocs = client2.query(query).getResults().getNumFound();\n    long threeDocs = client3.query(query).getResults().getNumFound();\n    long fourDocs = client4.query(query).getResults().getNumFound();\n    \n    query.set(\"collection\", oneInstanceCollection);\n    query.set(\"distrib\", true);\n    long allDocs = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    \n//    System.out.println(\"1:\" + oneDocs);\n//    System.out.println(\"2:\" + twoDocs);\n//    System.out.println(\"3:\" + threeDocs);\n//    System.out.println(\"4:\" + fourDocs);\n//    System.out.println(\"All Docs:\" + allDocs);\n    \n    assertEquals(3, allDocs);\n    IOUtils.close(collectionClients);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"407687e67faf6e1f02a211ca078d8e3eed631027":["e19067e820b148e8dc0b240da4f2771cf7b68252","c215736a9e29403edd2132d9f0829a287b428df4"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["c215736a9e29403edd2132d9f0829a287b428df4"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["cc3b13b430571c2e169f98fe38e1e7666f88522d","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cc3b13b430571c2e169f98fe38e1e7666f88522d","197bbedf08450ade98a11f4a0001448059666bec"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"c215736a9e29403edd2132d9f0829a287b428df4":["c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"c5a558d54519c651068ddb202f03befefb1514a7":["c215736a9e29403edd2132d9f0829a287b428df4"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}