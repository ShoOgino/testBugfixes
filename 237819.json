{"path":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          // set the initial limit higher in increase accuracy\n          dff.initialLimit = dff.offset + dff.limit;\n          dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n\n          // Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4db78c8781346b675fa5f1a6db8adcb96889c2ca","date":1213723536,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          // set the initial limit higher in increase accuracy\n          dff.initialLimit = dff.offset + dff.limit;\n          dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n\n          // Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","55e80c3a6a9734c50aa4fa3bf2f240690e12ba42","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ab02b73dc61b51bca98e09b5b72926c4580ecb","date":1213987100,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_COUNT_LEGACY);\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_LEX_LEGACY);\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.topFacets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9397de64b7287396e2394079a925761a83ceeca2","date":1228629999,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_COUNT_LEGACY);\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {          \n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_COUNT_LEGACY);\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.limit > 0) {          \n            // set the initial limit higher in increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_LEX_LEGACY);\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":["d1c5c000a4f7db9f84794088342aa428d80dfa37","718ab708b1705aae7831111fcddfc834665eee61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {          \n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_COUNT_LEGACY);\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {          \n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {\n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {          \n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":["9397de64b7287396e2394079a925761a83ceeca2"],"bugIntro":["d1c5c000a4f7db9f84794088342aa428d80dfa37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {\n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.doFacets) return;\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n        sreq.purpose |= ShardRequest.PURPOSE_GET_FACETS;\n\n        FacetInfo fi = rb._facetInfo;\n        if (fi == null) {\n          rb._facetInfo = fi = new FacetInfo();\n          fi.parse(rb.req.getParams(), rb);\n          // should already be true...\n          // sreq.params.set(FacetParams.FACET, \"true\");\n        }\n\n        sreq.params.remove(FacetParams.FACET_MINCOUNT);\n        sreq.params.remove(FacetParams.FACET_OFFSET);\n        sreq.params.remove(FacetParams.FACET_LIMIT);\n\n        for (DistribFieldFacet dff : fi.facets.values()) {\n          String paramStart = \"f.\" + dff.field + '.';\n          sreq.params.remove(paramStart + FacetParams.FACET_MINCOUNT);\n          sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n\n          if(dff.sort.equals(FacetParams.FACET_SORT_COUNT) && dff.limit > 0) {\n            // set the initial limit higher to increase accuracy\n            dff.initialLimit = dff.offset + dff.limit;\n            dff.initialLimit = (int)(dff.initialLimit * 1.5) + 10;\n          } else {\n            dff.initialLimit = dff.limit;\n          }\n\n          // TEST: Uncomment the following line when testing to supress over-requesting facets and\n          // thus cause more facet refinement queries.\n          // if (dff.limit > 0) dff.initialLimit = dff.offset + dff.limit;\n\n          sreq.params.set(paramStart + FacetParams.FACET_LIMIT,  dff.initialLimit);\n      }\n    } else {\n      // turn off faceting on other requests\n      sreq.params.set(FacetParams.FACET, \"false\");\n      // we could optionally remove faceting params\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4db78c8781346b675fa5f1a6db8adcb96889c2ca":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"718ab708b1705aae7831111fcddfc834665eee61":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ab02b73dc61b51bca98e09b5b72926c4580ecb":["4db78c8781346b675fa5f1a6db8adcb96889c2ca"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["9397de64b7287396e2394079a925761a83ceeca2"],"ad94625fb8d088209f46650c8097196fec67f00c":["718ab708b1705aae7831111fcddfc834665eee61"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9397de64b7287396e2394079a925761a83ceeca2":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["a1ab02b73dc61b51bca98e09b5b72926c4580ecb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4db78c8781346b675fa5f1a6db8adcb96889c2ca":["a1ab02b73dc61b51bca98e09b5b72926c4580ecb"],"718ab708b1705aae7831111fcddfc834665eee61":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ab02b73dc61b51bca98e09b5b72926c4580ecb":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["718ab708b1705aae7831111fcddfc834665eee61"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["4db78c8781346b675fa5f1a6db8adcb96889c2ca"],"9397de64b7287396e2394079a925761a83ceeca2":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["9397de64b7287396e2394079a925761a83ceeca2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}