{"path":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).getDocList();\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).getDocList();\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=-5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (r.nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"bugIntro":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cb157886ecc78f33fafd9d403e96a4a495503b3","date":1467753535,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    int numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final int allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=-5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (r.nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","6aedf81f068e430dec27d94310415cc6ff52731c","c0d9871701755df956b8bb5e417776dacc7dc1f2","57cfa96e1cacc0f1f98d8732aa54935875187781","e57226c67441a78f21c5cdd9a34f15934919ecca","2106271e380c198349e0f6eac0395bb462913fab"],"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    int numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final int allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n    };\n    final int l=-5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (r.nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    long numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    int numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final int allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","bugFix":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    long numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    int numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final int allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    long numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    int numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final int allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivalent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    long numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                             \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    \n    // NOTE: foo_s supports ranges, but for the arrays below we are only\n    // interested in fields that support *equivilent* ranges -- strings\n    // are not ordered the same as ints/longs, so we can't test the ranges\n    // for equivilence across diff fields.\n    //\n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n                            \"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\" };\n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"};\n\n    final int l= -1 * atLeast(50);\n    final int u= atLeast(250);\n\n    // sometimes a very small index, sometimes a very large index\n    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);\n    createIndex(numDocs, new DocProcessor() {\n      @Override\n      public void process(SolrInputDocument doc) {\n        // 10% of the docs have missing values\n        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n\n    final int numIters = atLeast(1000);\n    for (int i=0; i < numIters; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n      String lastQ = null;\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"\"+numDocs);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getResponse()).getDocList();\n          DocList rB = ((ResultContext)last.getResponse()).getDocList();\n          sameDocs(q + \" vs \" + lastQ, rA, rB );\n        }\n        req.close();\n        last = qr;\n        lastQ = q;\n      }\n    }\n\n    // now build some random queries (against *any* field) and validate that using it in a DBQ changes\n    // the index by the expected number of docs\n    long numDocsLeftInIndex = numDocs;\n    final int numDBQs= atLeast(10);\n    for (int i=0; i < numDBQs; i++) {\n      int lower = TestUtil.nextInt(random(), 2 * l, u);\n      int upper = TestUtil.nextInt(random(), lower, 2 * u);\n      boolean lowerMissing = random().nextInt(10)==1;\n      boolean upperMissing = random().nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();\n      \n      String dbq = null;\n      if (random().nextBoolean()) { // regular range\n        String field = fields[random().nextInt(fields.length)];\n        dbq = field + ':' + (inclusive?'[':'{')\n          + (lowerMissing?\"*\":lower)\n          + \" TO \"\n          + (upperMissing?\"*\":upper)\n          + (inclusive?']':'}');\n       } else { // frange\n        String field = frange_fields[random().nextInt(frange_fields.length)];\n        dbq = \"{!frange v=\"+field\n          + (lowerMissing?\"\":(\" l=\"+lower))\n          + (upperMissing?\"\":(\" u=\"+upper))\n          + (inclusive?\"\":\" incl=false\")\n          + (inclusive?\"\":\" incu=false\")\n          + \"}\";\n      }\n      try (SolrQueryRequest req = req(\"q\",dbq,\"rows\",\"0\")) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();\n      }\n      assertU(delQ(dbq));\n      assertU(commit());\n      try (SolrQueryRequest req = req(\"q\",\"*:*\",\"rows\",\"0\",\"_trace_after_dbq\",dbq)) {\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();\n        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);\n      }\n    }\n  }\n\n","bugFix":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["28288370235ed02234a64753cdbf0c6ec096304a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["5cb157886ecc78f33fafd9d403e96a4a495503b3"],"5cb157886ecc78f33fafd9d403e96a4a495503b3":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["2106271e380c198349e0f6eac0395bb462913fab"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5cb157886ecc78f33fafd9d403e96a4a495503b3","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["5cb157886ecc78f33fafd9d403e96a4a495503b3","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["57cfa96e1cacc0f1f98d8732aa54935875187781","5cb157886ecc78f33fafd9d403e96a4a495503b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5cb157886ecc78f33fafd9d403e96a4a495503b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2106271e380c198349e0f6eac0395bb462913fab"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5cb157886ecc78f33fafd9d403e96a4a495503b3":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}