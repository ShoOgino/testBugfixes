{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","commits":[{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"/dev/null","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"/dev/null","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f037dbb46863645cfa99308391fda49a61abfb6","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      assumeFalse(\"@AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\", Constants.JRE_IS_MINIMUM_JAVA11);\n      \n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"620836184fd918b1cca33e6de8100c45da6890dc","date":1561413738,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      assumeFalse(\"@AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\", Constants.JRE_IS_MINIMUM_JAVA11);\n      \n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8cb983608d8dea5c61181ba5168ba89ec92f34","date":1561416143,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      assumeFalse(\"@AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\", Constants.JRE_IS_MINIMUM_JAVA11);\n      \n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6382e83f99a1251346565d7f385aa8f6f79f2d","date":1561675880,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#checkUrls().mjava","sourceNew":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void checkUrls() throws Exception {\n      assumeFalse(\"@AwaitsFix: SOLR-12988 - ssl issues on Java 11/12\", Constants.JRE_IS_MINIMUM_JAVA11);\n      \n      URL[] urls = new URL[] {\n          jetty.getBaseUrl(), yetty.getBaseUrl() \n      };\n      for (URL u : urls) {\n        assertEquals(\"expect https urls \",\"https\", u.getProtocol());\n      }\n      assertFalse(\"expect different urls \"+Arrays.toString(urls),\n              urls[0].equals(urls[1]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["620836184fd918b1cca33e6de8100c45da6890dc"],"4f037dbb46863645cfa99308391fda49a61abfb6":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"620836184fd918b1cca33e6de8100c45da6890dc":["4f037dbb46863645cfa99308391fda49a61abfb6"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"]},"commit2Childs":{"6c8cb983608d8dea5c61181ba5168ba89ec92f34":["2b6382e83f99a1251346565d7f385aa8f6f79f2d"],"4f037dbb46863645cfa99308391fda49a61abfb6":["620836184fd918b1cca33e6de8100c45da6890dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["4f037dbb46863645cfa99308391fda49a61abfb6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"620836184fd918b1cca33e6de8100c45da6890dc":["6c8cb983608d8dea5c61181ba5168ba89ec92f34"],"2b6382e83f99a1251346565d7f385aa8f6f79f2d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}