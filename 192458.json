{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","commits":[{"id":"ad4fd10e8a24953e897d3f78bc0a7ee320c624d8","date":1357229879,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"/dev/null","sourceNew":"    IndexerThreadInterrupt() {\n      this.random = new Random(random().nextLong());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c349a43f2ea69d6473d2f106b096791862a6c8d1","date":1357251193,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() {\n      this.random = new Random(random().nextLong());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd6fb8ee497e27091399453153fb8d5edf906d4","date":1357251241,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"/dev/null","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e6fb2e60a91ffb7a435aa2b085ecb942dd11446","date":1358780574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new LongDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedBytesDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new LongDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedBytesDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new LongDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedBytesDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new LongDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedBytesDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d695ea56e846db8af5ac4e15826d341ef894e1","date":1361067281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#IndexerThreadInterrupt().mjava","sourceNew":"    IndexerThreadInterrupt(int id) throws IOException {\n      this.id = id;\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","sourceOld":"    IndexerThreadInterrupt() throws IOException {\n      this.random = new Random(random().nextLong());\n      // make a little directory for addIndexes\n      // LUCENE-2239: won't work with NIOFS/MMAP\n      adder = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriterConfig conf = newIndexWriterConfig(random, new MockAnalyzer(random));\n      IndexWriter w = new IndexWriter(adder, conf);\n      Document doc = new Document();\n      doc.add(newStringField(random, \"id\", \"500\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some prepackaged text contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"500\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 500));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"500\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"one\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 4));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 3));\n      }\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(newStringField(random, \"id\", \"501\", Field.Store.NO));\n      doc.add(newField(random, \"field\", \"some more contents\", storedTextType));\n      doc.add(new BinaryDocValuesField(\"binarydv\", new BytesRef(\"501\")));\n      doc.add(new NumericDocValuesField(\"numericdv\", 501));\n      doc.add(new SortedDocValuesField(\"sorteddv\", new BytesRef(\"501\")));\n      if (defaultCodecSupportsSortedSet()) {\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"two\")));\n        doc.add(new SortedSetDocValuesField(\"sortedsetdv\", new BytesRef(\"three\")));\n      }\n      if (defaultCodecSupportsSortedNumeric()) {\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 6));\n        doc.add(new SortedNumericDocValuesField(\"sortednumericdv\", 1));\n      }\n      w.addDocument(doc);\n      w.deleteDocuments(new Term(\"id\", \"500\"));\n      w.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdd6fb8ee497e27091399453153fb8d5edf906d4"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","81d695ea56e846db8af5ac4e15826d341ef894e1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cdd6fb8ee497e27091399453153fb8d5edf906d4":["c349a43f2ea69d6473d2f106b096791862a6c8d1"],"81d695ea56e846db8af5ac4e15826d341ef894e1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ad4fd10e8a24953e897d3f78bc0a7ee320c624d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cdd6fb8ee497e27091399453153fb8d5edf906d4","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["5e6fb2e60a91ffb7a435aa2b085ecb942dd11446"],"c349a43f2ea69d6473d2f106b096791862a6c8d1":["ad4fd10e8a24953e897d3f78bc0a7ee320c624d8"],"5e6fb2e60a91ffb7a435aa2b085ecb942dd11446":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5e6fb2e60a91ffb7a435aa2b085ecb942dd11446"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cdd6fb8ee497e27091399453153fb8d5edf906d4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"81d695ea56e846db8af5ac4e15826d341ef894e1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","81d695ea56e846db8af5ac4e15826d341ef894e1"],"ad4fd10e8a24953e897d3f78bc0a7ee320c624d8":["c349a43f2ea69d6473d2f106b096791862a6c8d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ad4fd10e8a24953e897d3f78bc0a7ee320c624d8"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c349a43f2ea69d6473d2f106b096791862a6c8d1":["cdd6fb8ee497e27091399453153fb8d5edf906d4"],"5e6fb2e60a91ffb7a435aa2b085ecb942dd11446":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}