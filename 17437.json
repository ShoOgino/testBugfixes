{"path":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#fromSubMatches(List[Matches]).mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#fromSubMatches(List[Matches]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  public static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d70ba91a4999a5387559a9ad50e3cfe9cfd970","date":1565173681,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#fromSubMatches(List[Matches]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#fromSubMatches(List[Matches]).mjava","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  public static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n\n      @Override\n      public Collection<Matches> getSubMatches() {\n        return subMatches;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  public static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2375622520a4e480775e3104a2f9a423536755b4":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}