{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        JavascriptParser.conditional_return conditional55 =null;\n\n        JavascriptParser.conditional_return conditional57 =null;\n\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    do {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n\n                        switch (alt16) {\n                    \tcase 1 :\n                    \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                    \t    {\n                    \t    AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n\n                    \t    pushFollow(FOLLOW_conditional_in_arguments1247);\n                    \t    conditional57=conditional();\n\n                    \t    state._fsp--;\n\n                    \t    adaptor.addChild(root_0, conditional57.getTree());\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop16;\n                        }\n                    } while (true);\n\n\n                    }\n                    break;\n\n            }\n\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        JavascriptParser.conditional_return conditional55 =null;\n\n        JavascriptParser.conditional_return conditional57 =null;\n\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    do {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n\n                        switch (alt16) {\n                        case 1 :\n                            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                            {\n                            AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n\n                            pushFollow(FOLLOW_conditional_in_arguments1247);\n                            conditional57=conditional();\n\n                            state._fsp--;\n\n                            adaptor.addChild(root_0, conditional57.getTree());\n\n                            }\n                            break;\n\n                        default :\n                            break loop16;\n                        }\n                    } while (true);\n\n\n                    }\n                    break;\n\n            }\n\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","sourceOld":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        JavascriptParser.conditional_return conditional55 =null;\n\n        JavascriptParser.conditional_return conditional57 =null;\n\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    do {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n\n                        switch (alt16) {\n                    \tcase 1 :\n                    \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                    \t    {\n                    \t    AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n\n                    \t    pushFollow(FOLLOW_conditional_in_arguments1247);\n                    \t    conditional57=conditional();\n\n                    \t    state._fsp--;\n\n                    \t    adaptor.addChild(root_0, conditional57.getTree());\n\n                    \t    }\n                    \t    break;\n\n                    \tdefault :\n                    \t    break loop16;\n                        }\n                    } while (true);\n\n\n                    }\n                    break;\n\n            }\n\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        ParserRuleReturnScope conditional55 =null;\n        ParserRuleReturnScope conditional57 =null;\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    while (true) {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n                        switch (alt16) {\n                        case 1 :\n                            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                            {\n                            AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n                            pushFollow(FOLLOW_conditional_in_arguments1247);\n                            conditional57=conditional();\n                            state._fsp--;\n\n                            adaptor.addChild(root_0, conditional57.getTree());\n\n                            }\n                            break;\n\n                        default :\n                            break loop16;\n                        }\n                    }\n\n                    }\n                    break;\n\n            }\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","sourceOld":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        JavascriptParser.conditional_return conditional55 =null;\n\n        JavascriptParser.conditional_return conditional57 =null;\n\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    do {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n\n                        switch (alt16) {\n                        case 1 :\n                            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                            {\n                            AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n\n                            pushFollow(FOLLOW_conditional_in_arguments1247);\n                            conditional57=conditional();\n\n                            state._fsp--;\n\n                            adaptor.addChild(root_0, conditional57.getTree());\n\n                            }\n                            break;\n\n                        default :\n                            break loop16;\n                        }\n                    } while (true);\n\n\n                    }\n                    break;\n\n            }\n\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","sourceOld":"    // $ANTLR start \"arguments\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n    public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_LPAREN54=null;\n        Token AT_COMMA56=null;\n        Token AT_RPAREN58=null;\n        ParserRuleReturnScope conditional55 =null;\n        ParserRuleReturnScope conditional57 =null;\n\n        CommonTree AT_LPAREN54_tree=null;\n        CommonTree AT_COMMA56_tree=null;\n        CommonTree AT_RPAREN58_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n            int alt17=2;\n            int LA17_0 = input.LA(1);\n            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n                alt17=1;\n            }\n            switch (alt17) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n                    {\n                    pushFollow(FOLLOW_conditional_in_arguments1241);\n                    conditional55=conditional();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, conditional55.getTree());\n\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n                    loop16:\n                    while (true) {\n                        int alt16=2;\n                        int LA16_0 = input.LA(1);\n                        if ( (LA16_0==AT_COMMA) ) {\n                            alt16=1;\n                        }\n\n                        switch (alt16) {\n                        case 1 :\n                            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n                            {\n                            AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n                            pushFollow(FOLLOW_conditional_in_arguments1247);\n                            conditional57=conditional();\n                            state._fsp--;\n\n                            adaptor.addChild(root_0, conditional57.getTree());\n\n                            }\n                            break;\n\n                        default :\n                            break loop16;\n                        }\n                    }\n\n                    }\n                    break;\n\n            }\n\n            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"arguments\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL)) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","sourceOld":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||LA17_0==OCTAL||LA17_0==VARIABLE) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","sourceOld":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL)) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#arguments().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"arguments\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;\n  public final JavascriptParser.arguments_return arguments() throws RecognitionException {\n    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_LPAREN54=null;\n    Token AT_COMMA56=null;\n    Token AT_RPAREN58=null;\n    ParserRuleReturnScope conditional55 =null;\n    ParserRuleReturnScope conditional57 =null;\n\n    CommonTree AT_LPAREN54_tree=null;\n    CommonTree AT_COMMA56_tree=null;\n    CommonTree AT_RPAREN58_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); \n      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?\n      int alt17=2;\n      int LA17_0 = input.LA(1);\n      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||LA17_0==OCTAL||LA17_0==VARIABLE) ) {\n        alt17=1;\n      }\n      switch (alt17) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*\n          {\n          pushFollow(FOLLOW_conditional_in_arguments1241);\n          conditional55=conditional();\n          state._fsp--;\n\n          adaptor.addChild(root_0, conditional55.getTree());\n\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*\n          loop16:\n          while (true) {\n            int alt16=2;\n            int LA16_0 = input.LA(1);\n            if ( (LA16_0==AT_COMMA) ) {\n              alt16=1;\n            }\n\n            switch (alt16) {\n            case 1 :\n              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional\n              {\n              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); \n              pushFollow(FOLLOW_conditional_in_arguments1247);\n              conditional57=conditional();\n              state._fsp--;\n\n              adaptor.addChild(root_0, conditional57.getTree());\n\n              }\n              break;\n\n            default :\n              break loop16;\n            }\n          }\n\n          }\n          break;\n\n      }\n\n      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"arguments\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}