{"path":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#getShardsWhitelist().mjava","commits":[{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#getShardsWhitelist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void getShardsWhitelist() throws Exception {\n    System.setProperty(SHARDS_WHITELIST, \"http://abc:8983/,http://def:8984/,\");\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr.xml\"));\n      factory = cc.getShardHandlerFactory();\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts().size(), is(2));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"abc:8983\"));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"def:8984\"));\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n      System.clearProperty(SHARDS_WHITELIST);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#getShardsWhitelist().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#getShardsWhitelist().mjava","sourceNew":"  @Test\n  public void getShardsWhitelist() throws Exception {\n    System.setProperty(SHARDS_WHITELIST, \"http://abc:8983/,http://def:8984/,\");\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr.xml\"));\n      factory = cc.getShardHandlerFactory();\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      @SuppressWarnings(\"resource\")\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts().size(), is(2));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"abc:8983\"));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"def:8984\"));\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n      System.clearProperty(SHARDS_WHITELIST);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void getShardsWhitelist() throws Exception {\n    System.setProperty(SHARDS_WHITELIST, \"http://abc:8983/,http://def:8984/,\");\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr.xml\"));\n      factory = cc.getShardHandlerFactory();\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts().size(), is(2));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"abc:8983\"));\n      assertThat(httpShardHandlerFactory.getWhitelistHostChecker().getWhitelistHosts(), hasItem(\"def:8984\"));\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n      System.clearProperty(SHARDS_WHITELIST);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d51e7db479b42602c7e23ba871b177387268179":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba055e19afc289adcb5bedaf68513793a7254012":["4d51e7db479b42602c7e23ba871b177387268179"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"4d51e7db479b42602c7e23ba871b177387268179":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}