{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}