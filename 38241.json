{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}