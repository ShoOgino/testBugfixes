{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","commits":[{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<SegmentCommitInfo>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<SegmentCommitInfo>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<SegmentCommitInfo>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<SegmentCommitInfo>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f0b4a920667fa5fce511270c486fd499f7e71a","date":1399385988,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151e3584e1250f9d055922452701114a33302e49","date":1399403957,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"c9f0b4a920667fa5fce511270c486fd499f7e71a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6613659748fe4411a7dcf85266e55db1f95f7315":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"151e3584e1250f9d055922452701114a33302e49":["c9f0b4a920667fa5fce511270c486fd499f7e71a"],"027bee21e09164c9ee230395405076d1e0034b30":["151e3584e1250f9d055922452701114a33302e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9f0b4a920667fa5fce511270c486fd499f7e71a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"62e52115b56781006682fd92c6938efaf174304d":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9f0b4a920667fa5fce511270c486fd499f7e71a":["151e3584e1250f9d055922452701114a33302e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62e52115b56781006682fd92c6938efaf174304d","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","62e52115b56781006682fd92c6938efaf174304d"],"151e3584e1250f9d055922452701114a33302e49":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}