{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}