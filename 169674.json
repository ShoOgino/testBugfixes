{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#updateEntry(ServerBaseEntry).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#updateEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#updateEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not update entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        \n        setUpdated(entry, persistentEntry);\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        BaseEntry retVal = entry.getEntry(); \n        DB4oEntry newEntry = new DB4oEntry();\n        newEntry.setEntry(retVal);\n        newEntry.setUpdateTime(entry.getUpdated().getValue());\n        newEntry.setFeedId(feed.getId());\n        // increment Version\n        newEntry.setVersion((entry.getVersion())+1);\n\n        setUpdated(entry, feed);\n        try {\n            this.container.set(feed);\n            this.container.set(newEntry);\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n        return retVal;\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not update entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        \n        setUpdated(entry, persistentEntry);\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        BaseEntry retVal = entry.getEntry(); \n        DB4oEntry newEntry = new DB4oEntry();\n        newEntry.setEntry(retVal);\n        newEntry.setUpdateTime(entry.getUpdated().getValue());\n        newEntry.setFeedId(feed.getId());\n        // increment Version\n        newEntry.setVersion((entry.getVersion())+1);\n\n        setUpdated(entry, feed);\n        try {\n            this.container.set(feed);\n            this.container.set(newEntry);\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n        return retVal;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#updateEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#updateEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not update entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        \n        setUpdated(entry, persistentEntry);\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        BaseEntry retVal = entry.getEntry(); \n        DB4oEntry newEntry = new DB4oEntry();\n        newEntry.setEntry(retVal);\n        newEntry.setUpdateTime(entry.getUpdated().getValue());\n        newEntry.setFeedId(feed.getId());\n        // increment Version\n        newEntry.setVersion((entry.getVersion())+1);\n\n        setUpdated(entry, feed);\n        try {\n            this.container.set(feed);\n            this.container.set(newEntry);\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n        return retVal;\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not update entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        \n        setUpdated(entry, persistentEntry);\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        BaseEntry retVal = entry.getEntry(); \n        DB4oEntry newEntry = new DB4oEntry();\n        newEntry.setEntry(retVal);\n        newEntry.setUpdateTime(entry.getUpdated().getValue());\n        newEntry.setFeedId(feed.getId());\n        // increment Version\n        newEntry.setVersion((entry.getVersion())+1);\n\n        setUpdated(entry, feed);\n        try {\n            this.container.set(feed);\n            this.container.set(newEntry);\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n        return retVal;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}