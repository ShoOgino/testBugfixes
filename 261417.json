{"path":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#sparseEdgeTest(ISchemaVersion).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#sparseEdgeTest(ISchemaVersion).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Cumulatively sets the first register (index 0) to value 2, the last\n     * register (index m-1) to value 2, and then sets registers with indices in\n     * the range 2 to (sparseCutoff + 2) to value 1 to trigger promotion.\n     *\n     * This tests for register alignment in the promotion from SPARSE\n     * to FULL.\n     *\n     * Format: cumulative add\n     * Tests:\n     * - SPARSE addition\n     * - SPARSE to FULL promotion\n     */\n    private static void sparseEdgeTest(final ISchemaVersion schemaVersion) throws IOException {\n        final FileWriter output = openOutput(schemaVersion, \"sparse_edge\", TestType.ADD);\n\n        // the accumulator, starts empty\n        final HLL hll = newHLL(HLLType.SPARSE);\n        initLineAdd(output, hll, schemaVersion);\n\n        final long firstValue = constructHLLValue(LOG2M, 0, 2);\n        cumulativeAddLine(output, hll, firstValue, schemaVersion);\n\n        final long lastValue = constructHLLValue(LOG2M, (1 << LOG2M) - 1, 2);\n        cumulativeAddLine(output, hll, lastValue, schemaVersion);\n\n        for(int i=2; i<(SPARSE_THRESHOLD + 2); i++) {\n            final long middleValue = constructHLLValue(LOG2M, i, 1);\n\n            cumulativeAddLine(output, hll, middleValue, schemaVersion);\n        }\n\n        output.flush();\n        output.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee9a66ccba41a876431a55e209bff48f6c894f9","date":1437045967,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#sparseEdgeTest(ISchemaVersion).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#sparseEdgeTest(ISchemaVersion).mjava","sourceNew":"    /**\n     * Cumulatively sets the first register (index 0) to value 2, the last\n     * register (index m-1) to value 2, and then sets registers with indices in\n     * the range 2 to (sparseCutoff + 2) to value 1 to trigger promotion.\n     *\n     * This tests for register alignment in the promotion from SPARSE\n     * to FULL.\n     *\n     * Format: cumulative add\n     * Tests:\n     * - SPARSE addition\n     * - SPARSE to FULL promotion\n     */\n    private static void sparseEdgeTest(final ISchemaVersion schemaVersion) throws IOException {\n        final Writer output = openOutput(schemaVersion, \"sparse_edge\", TestType.ADD);\n\n        // the accumulator, starts empty\n        final HLL hll = newHLL(HLLType.SPARSE);\n        initLineAdd(output, hll, schemaVersion);\n\n        final long firstValue = constructHLLValue(LOG2M, 0, 2);\n        cumulativeAddLine(output, hll, firstValue, schemaVersion);\n\n        final long lastValue = constructHLLValue(LOG2M, (1 << LOG2M) - 1, 2);\n        cumulativeAddLine(output, hll, lastValue, schemaVersion);\n\n        for(int i=2; i<(SPARSE_THRESHOLD + 2); i++) {\n            final long middleValue = constructHLLValue(LOG2M, i, 1);\n\n            cumulativeAddLine(output, hll, middleValue, schemaVersion);\n        }\n\n        output.flush();\n        output.close();\n    }\n\n","sourceOld":"    /**\n     * Cumulatively sets the first register (index 0) to value 2, the last\n     * register (index m-1) to value 2, and then sets registers with indices in\n     * the range 2 to (sparseCutoff + 2) to value 1 to trigger promotion.\n     *\n     * This tests for register alignment in the promotion from SPARSE\n     * to FULL.\n     *\n     * Format: cumulative add\n     * Tests:\n     * - SPARSE addition\n     * - SPARSE to FULL promotion\n     */\n    private static void sparseEdgeTest(final ISchemaVersion schemaVersion) throws IOException {\n        final FileWriter output = openOutput(schemaVersion, \"sparse_edge\", TestType.ADD);\n\n        // the accumulator, starts empty\n        final HLL hll = newHLL(HLLType.SPARSE);\n        initLineAdd(output, hll, schemaVersion);\n\n        final long firstValue = constructHLLValue(LOG2M, 0, 2);\n        cumulativeAddLine(output, hll, firstValue, schemaVersion);\n\n        final long lastValue = constructHLLValue(LOG2M, (1 << LOG2M) - 1, 2);\n        cumulativeAddLine(output, hll, lastValue, schemaVersion);\n\n        for(int i=2; i<(SPARSE_THRESHOLD + 2); i++) {\n            final long middleValue = constructHLLValue(LOG2M, i, 1);\n\n            cumulativeAddLine(output, hll, middleValue, schemaVersion);\n        }\n\n        output.flush();\n        output.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#sparseEdgeTest(ISchemaVersion).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Cumulatively sets the first register (index 0) to value 2, the last\n     * register (index m-1) to value 2, and then sets registers with indices in\n     * the range 2 to (sparseCutoff + 2) to value 1 to trigger promotion.\n     *\n     * This tests for register alignment in the promotion from SPARSE\n     * to FULL.\n     *\n     * Format: cumulative add\n     * Tests:\n     * - SPARSE addition\n     * - SPARSE to FULL promotion\n     */\n    private static void sparseEdgeTest(final ISchemaVersion schemaVersion) throws IOException {\n        final Writer output = openOutput(schemaVersion, \"sparse_edge\", TestType.ADD);\n\n        // the accumulator, starts empty\n        final HLL hll = newHLL(HLLType.SPARSE);\n        initLineAdd(output, hll, schemaVersion);\n\n        final long firstValue = constructHLLValue(LOG2M, 0, 2);\n        cumulativeAddLine(output, hll, firstValue, schemaVersion);\n\n        final long lastValue = constructHLLValue(LOG2M, (1 << LOG2M) - 1, 2);\n        cumulativeAddLine(output, hll, lastValue, schemaVersion);\n\n        for(int i=2; i<(SPARSE_THRESHOLD + 2); i++) {\n            final long middleValue = constructHLLValue(LOG2M, i, 1);\n\n            cumulativeAddLine(output, hll, middleValue, schemaVersion);\n        }\n\n        output.flush();\n        output.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9a66ccba41a876431a55e209bff48f6c894f9":["6faa211c4af605e3cf078a76d200c1dc348973f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eee9a66ccba41a876431a55e209bff48f6c894f9"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"eee9a66ccba41a876431a55e209bff48f6c894f9":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["eee9a66ccba41a876431a55e209bff48f6c894f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}