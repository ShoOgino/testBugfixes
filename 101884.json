{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testDeleteByTermOrQuery().mjava","commits":[{"id":"129a1284cd4fd41a8a14e474d98379adadb87d25","date":1535390327,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testDeleteByTermOrQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteByTermOrQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig();\n    config.setIndexSort(new Sort(new SortField(\"numeric\", SortField.Type.LONG)));\n    IndexWriter w = new IndexWriter(dir, config);\n    Document doc = new Document();\n    int numDocs = random().nextInt(2000) + 5;\n    long[] expectedValues = new long[numDocs];\n\n    for (int i = 0; i < numDocs; i++) {\n      expectedValues[i] = random().nextInt(Integer.MAX_VALUE);\n      doc.clear();\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"numeric\", expectedValues[i]));\n      w.addDocument(doc);\n    }\n    int numDeleted = random().nextInt(numDocs) + 1;\n    for (int i = 0; i < numDeleted; i++) {\n      int idToDelete = random().nextInt(numDocs);\n      if (random().nextBoolean()) {\n        w.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(idToDelete))));\n      } else {\n        w.deleteDocuments(new Term(\"id\", Integer.toString(idToDelete)));\n      }\n\n      expectedValues[idToDelete] = -random().nextInt(Integer.MAX_VALUE); // force a reordering\n      doc.clear();\n      doc.add(new StringField(\"id\", Integer.toString(idToDelete), Store.YES));\n      doc.add(new NumericDocValuesField(\"numeric\", expectedValues[idToDelete]));\n      w.addDocument(doc);\n    }\n\n    int docCount = 0;\n    try (IndexReader reader = DirectoryReader.open(w)) {\n      for (LeafReaderContext leafCtx : reader.leaves()) {\n        final Bits liveDocs = leafCtx.reader().getLiveDocs();\n        final NumericDocValues values = leafCtx.reader().getNumericDocValues(\"numeric\");\n        if (values == null) {\n          continue;\n        }\n        for (int id = 0; id < leafCtx.reader().maxDoc(); id++) {\n          if (liveDocs != null && liveDocs.get(id) == false) {\n            continue;\n          }\n          if (values.advanceExact(id) == false) {\n            continue;\n          }\n          int globalId = Integer.parseInt(leafCtx.reader().document(id).getField(\"id\").stringValue());\n          assertTrue(values.advanceExact(id));\n          assertEquals(expectedValues[globalId], values.longValue());\n          docCount ++;\n        }\n      }\n      assertEquals(docCount, numDocs);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"129a1284cd4fd41a8a14e474d98379adadb87d25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129a1284cd4fd41a8a14e474d98379adadb87d25"]},"commit2Childs":{"129a1284cd4fd41a8a14e474d98379adadb87d25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["129a1284cd4fd41a8a14e474d98379adadb87d25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}