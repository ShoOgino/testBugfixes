{"path":"src/java/org/apache/lucene/search/FieldValueHitQueue#detectFieldType(IndexReader,String).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#detectFieldType(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Attempts to detect the given field type for an IndexReader.\n   */\n  static int detectFieldType(IndexReader reader, String fieldKey) throws IOException {\n    String field = ((String)fieldKey).intern();\n    TermEnum enumerator = reader.terms (new Term (field));\n    try {\n      Term term = enumerator.term();\n      if (term == null) {\n        throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n      }\n      int ret = 0;\n      if (term.field() == field) {\n        String termtext = term.text().trim();\n\n        /**\n         * Java 1.4 level code:\n\n         if (pIntegers.matcher(termtext).matches())\n         return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n         else if (pFloats.matcher(termtext).matches())\n         return FloatSortedHitQueue.comparator (reader, enumerator, field);\n         */\n\n        // Java 1.3 level code:\n        try {\n          Integer.parseInt (termtext);\n          ret = SortField.INT;\n        } catch (NumberFormatException nfe1) {\n          try {\n            Long.parseLong(termtext);\n            ret = SortField.LONG;\n          } catch (NumberFormatException nfe2) {\n            try {\n              Float.parseFloat (termtext);\n              ret = SortField.FLOAT;\n            } catch (NumberFormatException nfe3) {\n              ret = SortField.STRING;\n            }\n          }\n        }         \n      } else {\n        throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n      }\n      return ret;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#detectFieldType(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#detectFieldType(IndexReader,String).mjava","sourceNew":"  /** Attempts to detect the given field type for an IndexReader. */\n  static int detectFieldType(IndexReader reader, String fieldKey) throws IOException {\n    String field = fieldKey.intern();\n    TermEnum enumerator = reader.terms(new Term(field));\n    try {\n      Term term = enumerator.term();\n      if (term == null) {\n        throw new RuntimeException(\"no terms in field \" + field + \" - cannot determine sort type\");\n      }\n      int ret = 0;\n      if (term.field() == field) {\n        String termtext = term.text().trim();\n\n        /**\n         * Java 1.4 level code:\n\n         if (pIntegers.matcher(termtext).matches())\n         return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n         else if (pFloats.matcher(termtext).matches())\n         return FloatSortedHitQueue.comparator (reader, enumerator, field);\n         */\n\n        // Java 1.3 level code:\n        try {\n          Integer.parseInt (termtext);\n          ret = SortField.INT;\n        } catch (NumberFormatException nfe1) {\n          try {\n            Long.parseLong(termtext);\n            ret = SortField.LONG;\n          } catch (NumberFormatException nfe2) {\n            try {\n              Float.parseFloat (termtext);\n              ret = SortField.FLOAT;\n            } catch (NumberFormatException nfe3) {\n              ret = SortField.STRING;\n            }\n          }\n        }         \n      } else {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n      }\n      return ret;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to detect the given field type for an IndexReader.\n   */\n  static int detectFieldType(IndexReader reader, String fieldKey) throws IOException {\n    String field = ((String)fieldKey).intern();\n    TermEnum enumerator = reader.terms (new Term (field));\n    try {\n      Term term = enumerator.term();\n      if (term == null) {\n        throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n      }\n      int ret = 0;\n      if (term.field() == field) {\n        String termtext = term.text().trim();\n\n        /**\n         * Java 1.4 level code:\n\n         if (pIntegers.matcher(termtext).matches())\n         return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n         else if (pFloats.matcher(termtext).matches())\n         return FloatSortedHitQueue.comparator (reader, enumerator, field);\n         */\n\n        // Java 1.3 level code:\n        try {\n          Integer.parseInt (termtext);\n          ret = SortField.INT;\n        } catch (NumberFormatException nfe1) {\n          try {\n            Long.parseLong(termtext);\n            ret = SortField.LONG;\n          } catch (NumberFormatException nfe2) {\n            try {\n              Float.parseFloat (termtext);\n              ret = SortField.FLOAT;\n            } catch (NumberFormatException nfe3) {\n              ret = SortField.STRING;\n            }\n          }\n        }         \n      } else {\n        throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n      }\n      return ret;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f370c4a3d417af27f52201463cabee5da61e5a","date":1240595944,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#detectFieldType(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#detectFieldType(IndexReader,String).mjava","sourceNew":"  /** Attempts to detect the given field type for an IndexReader. */\n  static int detectFieldType(IndexReader reader, String fieldKey) throws IOException {\n    String field = fieldKey.intern();\n    TermEnum enumerator = reader.terms(new Term(field));\n    try {\n      Term term = enumerator.term();\n      if (term == null) {\n        throw new RuntimeException(\"no terms in field \" + field + \" - cannot determine sort type\");\n      }\n      int ret = 0;\n      if (term.field() == field) {\n        String termtext = term.text().trim();\n\n        /**\n         * Java 1.4 level code:\n\n         if (pIntegers.matcher(termtext).matches())\n         return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n         else if (pFloats.matcher(termtext).matches())\n         return FloatSortedHitQueue.comparator (reader, enumerator, field);\n         */\n\n        // Java 1.3 level code:\n        try {\n          Integer.parseInt (termtext);\n          ret = SortField.INT;\n        } catch (NumberFormatException nfe1) {\n          try {\n            Long.parseLong(termtext);\n            ret = SortField.LONG;\n          } catch (NumberFormatException nfe2) {\n            try {\n              Float.parseFloat (termtext);\n              ret = SortField.FLOAT;\n            } catch (NumberFormatException nfe3) {\n              ret = SortField.STRING;\n            }\n          }\n        }         \n      } else {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n      }\n      return ret;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  /** Attempts to detect the given field type for an IndexReader. */\n  static int detectFieldType(IndexReader reader, String fieldKey) throws IOException {\n    String field = fieldKey.intern();\n    TermEnum enumerator = reader.terms(new Term(field));\n    try {\n      Term term = enumerator.term();\n      if (term == null) {\n        throw new RuntimeException(\"no terms in field \" + field + \" - cannot determine sort type\");\n      }\n      int ret = 0;\n      if (term.field() == field) {\n        String termtext = term.text().trim();\n\n        /**\n         * Java 1.4 level code:\n\n         if (pIntegers.matcher(termtext).matches())\n         return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n         else if (pFloats.matcher(termtext).matches())\n         return FloatSortedHitQueue.comparator (reader, enumerator, field);\n         */\n\n        // Java 1.3 level code:\n        try {\n          Integer.parseInt (termtext);\n          ret = SortField.INT;\n        } catch (NumberFormatException nfe1) {\n          try {\n            Long.parseLong(termtext);\n            ret = SortField.LONG;\n          } catch (NumberFormatException nfe2) {\n            try {\n              Float.parseFloat (termtext);\n              ret = SortField.FLOAT;\n            } catch (NumberFormatException nfe3) {\n              ret = SortField.STRING;\n            }\n          }\n        }         \n      } else {\n        throw new RuntimeException(\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n      }\n      return ret;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03f370c4a3d417af27f52201463cabee5da61e5a":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f370c4a3d417af27f52201463cabee5da61e5a"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["03f370c4a3d417af27f52201463cabee5da61e5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"03f370c4a3d417af27f52201463cabee5da61e5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}