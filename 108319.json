{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[FacetLabel]).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<FacetLabel> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<FacetLabel>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<FacetLabel>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (FacetLabel cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (CategoryPath cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#addFields(Document,Iterable[FacetLabel]).mjava","sourceNew":null,"sourceOld":"  /** Adds the needed facet fields to the document. */\n  public void addFields(Document doc, Iterable<FacetLabel> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    // TODO: add reuse capabilities to this class, per CLP objects:\n    // - drill-down field\n    // - counting list field\n    // - DrillDownStream\n    // - CountingListStream\n\n    final Map<CategoryListParams,Iterable<FacetLabel>> categoryLists = createCategoryListMapping(categories);\n\n    // for each CLP we add a different field for drill-down terms as well as for\n    // counting list data.\n    IntsRef ordinals = new IntsRef(32); // should be enough for most common applications\n    for (Entry<CategoryListParams, Iterable<FacetLabel>> e : categoryLists.entrySet()) {\n      final CategoryListParams clp = e.getKey();\n      final String field = clp.field;\n\n      // build category list data\n      ordinals.length = 0; // reset\n      int maxNumOrds = 0;\n      for (FacetLabel cp : e.getValue()) {\n        int ordinal = taxonomyWriter.addCategory(cp);\n        maxNumOrds += cp.length; // ordinal and potentially all parents\n        if (ordinals.ints.length < maxNumOrds) {\n          ordinals.grow(maxNumOrds);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n      }\n      Map<String,BytesRef> categoriesData = getCategoryListData(clp, ordinals, e.getValue());\n      \n      // add the counting list data\n      addCountingListData(doc, categoriesData, field);\n      \n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}