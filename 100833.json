{"path":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","commits":[{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = getSimilarity().tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[docID]); // normalize\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = getSimilarity().tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[docID]); // normalize\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = getSimilarity().tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = getSimilarity().tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = getSimilarity().tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    return docScorer.score(docID, freq);\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    return docScorer.score(docID, freq);\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    return docScorer.score(docID, freq);\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    final float raw; // raw score\n    if (freq < SCORE_CACHE_SIZE) {\n      raw = scoreCache[freq];\n    } else {\n      raw = similarity.tf((float) freq) * value;\n    }\n    return norms == null ? raw : raw * similarity.decodeNormValue(norms[docID]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    return docScorer.score(docID, freq);\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    return docScorer.score(docID, freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["5f4e87790277826a2aea119328600dfb07761f32","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["29ef99d61cda9641b6250bf9567329a6e65f901d","5f4e87790277826a2aea119328600dfb07761f32","e5e679b9c5f68f1f331de920ae8366af75b44060"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}