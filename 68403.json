{"path":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","commits":[{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"/dev/null","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"/dev/null","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","sourceNew":null,"sourceOld":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"/dev/null","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"/dev/null","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    \n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    \n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setTokenized(false);\n    \n    FieldType customType4 = new FieldType(TextField.TYPE_UNSTORED);\n    customType4.setTokenized(false);\n    customType4.setStoreTermVectors(true);\n    customType4.setStoreTermVectorOffsets(true);\n    \n    FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n    customType5.setStoreTermVectors(true);\n    customType5.setStoreTermVectorOffsets(true);\n\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setTokenized(false);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n\n    FieldType customType7 = new FieldType(TextField.TYPE_UNSTORED);\n    customType7.setTokenized(false);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorOffsets(true);\n\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setTokenized(false);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorPositions(true);\n\n    FieldType customType9 = new FieldType(TextField.TYPE_UNSTORED);\n    customType9.setStoreTermVectors(true);\n    customType9.setStoreTermVectorPositions(true);\n\n    FieldType customType10 = new FieldType(TextField.TYPE_STORED);\n    customType10.setTokenized(false);\n    customType10.setStoreTermVectors(true);\n    customType10.setStoreTermVectorPositions(true);\n\n    FieldType customType11 = new FieldType(TextField.TYPE_UNSTORED);\n    customType11.setTokenized(false);\n    customType11.setStoreTermVectors(true);\n    customType11.setStoreTermVectorPositions(true);\n\n    FieldType customType12 = new FieldType(TextField.TYPE_STORED);\n    customType12.setStoreTermVectors(true);\n    customType12.setStoreTermVectorOffsets(true);\n    customType12.setStoreTermVectorPositions(true);\n\n    FieldType customType13 = new FieldType(TextField.TYPE_UNSTORED);\n    customType13.setStoreTermVectors(true);\n    customType13.setStoreTermVectorOffsets(true);\n    customType13.setStoreTermVectorPositions(true);\n\n    FieldType customType14 = new FieldType(TextField.TYPE_STORED);\n    customType14.setTokenized(false);\n    customType14.setStoreTermVectors(true);\n    customType14.setStoreTermVectorOffsets(true);\n    customType14.setStoreTermVectorPositions(true);\n\n    FieldType customType15 = new FieldType(TextField.TYPE_UNSTORED);\n    customType15.setTokenized(false);\n    customType15.setStoreTermVectors(true);\n    customType15.setStoreTermVectorOffsets(true);\n    customType15.setStoreTermVectorPositions(true);\n    \n    switch (mode) {\n      case 0: return new Field(fieldName, customType, \"some text\");\n      case 1: return new TextField(fieldName, \"some text\");\n      case 2: return new Field(fieldName, customType2, \"some text\");\n      case 3: return new Field(fieldName, customType3, \"some text\");\n      case 4: return new Field(fieldName, customType4, \"some text\");\n      case 5: return new Field(fieldName, customType5, \"some text\");\n      case 6: return new Field(fieldName, customType6, \"some text\");\n      case 7: return new Field(fieldName, customType7, \"some text\");\n      case 8: return new Field(fieldName, customType8, \"some text\");\n      case 9: return new Field(fieldName, customType9, \"some text\");\n      case 10: return new Field(fieldName, customType10, \"some text\");\n      case 11: return new Field(fieldName, customType11, \"some text\");\n      case 12: return new Field(fieldName, customType12, \"some text\");\n      case 13: return new Field(fieldName, customType13, \"some text\");\n      case 14: return new Field(fieldName, customType14, \"some text\");\n      case 15: return new Field(fieldName, customType15, \"some text\");\n      default: return null;\n    }\n  }\n\n","sourceOld":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.NO);\n      case 1: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.NO);\n      case 2: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.NO);\n      case 3: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.NO);\n      case 4: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 5: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_OFFSETS);\n      case 6: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 7: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_OFFSETS);\n      case 8: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 9: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS);\n      case 10: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 11: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS);\n      case 12: return new Field(fieldName, \"some text\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 13: return new Field(fieldName, \"some text\", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 14: return new Field(fieldName, \"some text\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      case 15: return new Field(fieldName, \"some text\", Store.NO, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS);\n      default: return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    \n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    \n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setTokenized(false);\n    \n    FieldType customType4 = new FieldType(TextField.TYPE_UNSTORED);\n    customType4.setTokenized(false);\n    customType4.setStoreTermVectors(true);\n    customType4.setStoreTermVectorOffsets(true);\n    \n    FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n    customType5.setStoreTermVectors(true);\n    customType5.setStoreTermVectorOffsets(true);\n\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setTokenized(false);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n\n    FieldType customType7 = new FieldType(TextField.TYPE_UNSTORED);\n    customType7.setTokenized(false);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorOffsets(true);\n\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setTokenized(false);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorPositions(true);\n\n    FieldType customType9 = new FieldType(TextField.TYPE_UNSTORED);\n    customType9.setStoreTermVectors(true);\n    customType9.setStoreTermVectorPositions(true);\n\n    FieldType customType10 = new FieldType(TextField.TYPE_STORED);\n    customType10.setTokenized(false);\n    customType10.setStoreTermVectors(true);\n    customType10.setStoreTermVectorPositions(true);\n\n    FieldType customType11 = new FieldType(TextField.TYPE_UNSTORED);\n    customType11.setTokenized(false);\n    customType11.setStoreTermVectors(true);\n    customType11.setStoreTermVectorPositions(true);\n\n    FieldType customType12 = new FieldType(TextField.TYPE_STORED);\n    customType12.setStoreTermVectors(true);\n    customType12.setStoreTermVectorOffsets(true);\n    customType12.setStoreTermVectorPositions(true);\n\n    FieldType customType13 = new FieldType(TextField.TYPE_UNSTORED);\n    customType13.setStoreTermVectors(true);\n    customType13.setStoreTermVectorOffsets(true);\n    customType13.setStoreTermVectorPositions(true);\n\n    FieldType customType14 = new FieldType(TextField.TYPE_STORED);\n    customType14.setTokenized(false);\n    customType14.setStoreTermVectors(true);\n    customType14.setStoreTermVectorOffsets(true);\n    customType14.setStoreTermVectorPositions(true);\n\n    FieldType customType15 = new FieldType(TextField.TYPE_UNSTORED);\n    customType15.setTokenized(false);\n    customType15.setStoreTermVectors(true);\n    customType15.setStoreTermVectorOffsets(true);\n    customType15.setStoreTermVectorPositions(true);\n    \n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", customType);\n      case 1: return new TextField(fieldName, \"some text\");\n      case 2: return new Field(fieldName, \"some text\", customType2);\n      case 3: return new Field(fieldName, \"some text\", customType3);\n      case 4: return new Field(fieldName, \"some text\", customType4);\n      case 5: return new Field(fieldName, \"some text\", customType5);\n      case 6: return new Field(fieldName, \"some text\", customType6);\n      case 7: return new Field(fieldName, \"some text\", customType7);\n      case 8: return new Field(fieldName, \"some text\", customType8);\n      case 9: return new Field(fieldName, \"some text\", customType9);\n      case 10: return new Field(fieldName, \"some text\", customType10);\n      case 11: return new Field(fieldName, \"some text\", customType11);\n      case 12: return new Field(fieldName, \"some text\", customType12);\n      case 13: return new Field(fieldName, \"some text\", customType13);\n      case 14: return new Field(fieldName, \"some text\", customType14);\n      case 15: return new Field(fieldName, \"some text\", customType15);\n      default: return null;\n    }\n  }\n\n","sourceOld":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    \n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    \n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setTokenized(false);\n    \n    FieldType customType4 = new FieldType(TextField.TYPE_UNSTORED);\n    customType4.setTokenized(false);\n    customType4.setStoreTermVectors(true);\n    customType4.setStoreTermVectorOffsets(true);\n    \n    FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n    customType5.setStoreTermVectors(true);\n    customType5.setStoreTermVectorOffsets(true);\n\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setTokenized(false);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n\n    FieldType customType7 = new FieldType(TextField.TYPE_UNSTORED);\n    customType7.setTokenized(false);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorOffsets(true);\n\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setTokenized(false);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorPositions(true);\n\n    FieldType customType9 = new FieldType(TextField.TYPE_UNSTORED);\n    customType9.setStoreTermVectors(true);\n    customType9.setStoreTermVectorPositions(true);\n\n    FieldType customType10 = new FieldType(TextField.TYPE_STORED);\n    customType10.setTokenized(false);\n    customType10.setStoreTermVectors(true);\n    customType10.setStoreTermVectorPositions(true);\n\n    FieldType customType11 = new FieldType(TextField.TYPE_UNSTORED);\n    customType11.setTokenized(false);\n    customType11.setStoreTermVectors(true);\n    customType11.setStoreTermVectorPositions(true);\n\n    FieldType customType12 = new FieldType(TextField.TYPE_STORED);\n    customType12.setStoreTermVectors(true);\n    customType12.setStoreTermVectorOffsets(true);\n    customType12.setStoreTermVectorPositions(true);\n\n    FieldType customType13 = new FieldType(TextField.TYPE_UNSTORED);\n    customType13.setStoreTermVectors(true);\n    customType13.setStoreTermVectorOffsets(true);\n    customType13.setStoreTermVectorPositions(true);\n\n    FieldType customType14 = new FieldType(TextField.TYPE_STORED);\n    customType14.setTokenized(false);\n    customType14.setStoreTermVectors(true);\n    customType14.setStoreTermVectorOffsets(true);\n    customType14.setStoreTermVectorPositions(true);\n\n    FieldType customType15 = new FieldType(TextField.TYPE_UNSTORED);\n    customType15.setTokenized(false);\n    customType15.setStoreTermVectors(true);\n    customType15.setStoreTermVectorOffsets(true);\n    customType15.setStoreTermVectorPositions(true);\n    \n    switch (mode) {\n      case 0: return new Field(fieldName, customType, \"some text\");\n      case 1: return new TextField(fieldName, \"some text\");\n      case 2: return new Field(fieldName, customType2, \"some text\");\n      case 3: return new Field(fieldName, customType3, \"some text\");\n      case 4: return new Field(fieldName, customType4, \"some text\");\n      case 5: return new Field(fieldName, customType5, \"some text\");\n      case 6: return new Field(fieldName, customType6, \"some text\");\n      case 7: return new Field(fieldName, customType7, \"some text\");\n      case 8: return new Field(fieldName, customType8, \"some text\");\n      case 9: return new Field(fieldName, customType9, \"some text\");\n      case 10: return new Field(fieldName, customType10, \"some text\");\n      case 11: return new Field(fieldName, customType11, \"some text\");\n      case 12: return new Field(fieldName, customType12, \"some text\");\n      case 13: return new Field(fieldName, customType13, \"some text\");\n      case 14: return new Field(fieldName, customType14, \"some text\");\n      case 15: return new Field(fieldName, customType15, \"some text\");\n      default: return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#getField(int).mjava","sourceNew":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    \n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    \n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setTokenized(false);\n    \n    FieldType customType4 = new FieldType(TextField.TYPE_UNSTORED);\n    customType4.setTokenized(false);\n    customType4.setStoreTermVectors(true);\n    customType4.setStoreTermVectorOffsets(true);\n    \n    FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n    customType5.setStoreTermVectors(true);\n    customType5.setStoreTermVectorOffsets(true);\n\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setTokenized(false);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n\n    FieldType customType7 = new FieldType(TextField.TYPE_UNSTORED);\n    customType7.setTokenized(false);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorOffsets(true);\n\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setTokenized(false);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorPositions(true);\n\n    FieldType customType9 = new FieldType(TextField.TYPE_UNSTORED);\n    customType9.setStoreTermVectors(true);\n    customType9.setStoreTermVectorPositions(true);\n\n    FieldType customType10 = new FieldType(TextField.TYPE_STORED);\n    customType10.setTokenized(false);\n    customType10.setStoreTermVectors(true);\n    customType10.setStoreTermVectorPositions(true);\n\n    FieldType customType11 = new FieldType(TextField.TYPE_UNSTORED);\n    customType11.setTokenized(false);\n    customType11.setStoreTermVectors(true);\n    customType11.setStoreTermVectorPositions(true);\n\n    FieldType customType12 = new FieldType(TextField.TYPE_STORED);\n    customType12.setStoreTermVectors(true);\n    customType12.setStoreTermVectorOffsets(true);\n    customType12.setStoreTermVectorPositions(true);\n\n    FieldType customType13 = new FieldType(TextField.TYPE_UNSTORED);\n    customType13.setStoreTermVectors(true);\n    customType13.setStoreTermVectorOffsets(true);\n    customType13.setStoreTermVectorPositions(true);\n\n    FieldType customType14 = new FieldType(TextField.TYPE_STORED);\n    customType14.setTokenized(false);\n    customType14.setStoreTermVectors(true);\n    customType14.setStoreTermVectorOffsets(true);\n    customType14.setStoreTermVectorPositions(true);\n\n    FieldType customType15 = new FieldType(TextField.TYPE_UNSTORED);\n    customType15.setTokenized(false);\n    customType15.setStoreTermVectors(true);\n    customType15.setStoreTermVectorOffsets(true);\n    customType15.setStoreTermVectorPositions(true);\n    \n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", customType);\n      case 1: return new TextField(fieldName, \"some text\");\n      case 2: return new Field(fieldName, \"some text\", customType2);\n      case 3: return new Field(fieldName, \"some text\", customType3);\n      case 4: return new Field(fieldName, \"some text\", customType4);\n      case 5: return new Field(fieldName, \"some text\", customType5);\n      case 6: return new Field(fieldName, \"some text\", customType6);\n      case 7: return new Field(fieldName, \"some text\", customType7);\n      case 8: return new Field(fieldName, \"some text\", customType8);\n      case 9: return new Field(fieldName, \"some text\", customType9);\n      case 10: return new Field(fieldName, \"some text\", customType10);\n      case 11: return new Field(fieldName, \"some text\", customType11);\n      case 12: return new Field(fieldName, \"some text\", customType12);\n      case 13: return new Field(fieldName, \"some text\", customType13);\n      case 14: return new Field(fieldName, \"some text\", customType14);\n      case 15: return new Field(fieldName, \"some text\", customType15);\n      default: return null;\n    }\n  }\n\n","sourceOld":"  private Field getField(int number) {\n    int mode = number % 16;\n    String fieldName = \"\" + number;\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    \n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    \n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setTokenized(false);\n    \n    FieldType customType4 = new FieldType(TextField.TYPE_UNSTORED);\n    customType4.setTokenized(false);\n    customType4.setStoreTermVectors(true);\n    customType4.setStoreTermVectorOffsets(true);\n    \n    FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n    customType5.setStoreTermVectors(true);\n    customType5.setStoreTermVectorOffsets(true);\n\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setTokenized(false);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n\n    FieldType customType7 = new FieldType(TextField.TYPE_UNSTORED);\n    customType7.setTokenized(false);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorOffsets(true);\n\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setTokenized(false);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorPositions(true);\n\n    FieldType customType9 = new FieldType(TextField.TYPE_UNSTORED);\n    customType9.setStoreTermVectors(true);\n    customType9.setStoreTermVectorPositions(true);\n\n    FieldType customType10 = new FieldType(TextField.TYPE_STORED);\n    customType10.setTokenized(false);\n    customType10.setStoreTermVectors(true);\n    customType10.setStoreTermVectorPositions(true);\n\n    FieldType customType11 = new FieldType(TextField.TYPE_UNSTORED);\n    customType11.setTokenized(false);\n    customType11.setStoreTermVectors(true);\n    customType11.setStoreTermVectorPositions(true);\n\n    FieldType customType12 = new FieldType(TextField.TYPE_STORED);\n    customType12.setStoreTermVectors(true);\n    customType12.setStoreTermVectorOffsets(true);\n    customType12.setStoreTermVectorPositions(true);\n\n    FieldType customType13 = new FieldType(TextField.TYPE_UNSTORED);\n    customType13.setStoreTermVectors(true);\n    customType13.setStoreTermVectorOffsets(true);\n    customType13.setStoreTermVectorPositions(true);\n\n    FieldType customType14 = new FieldType(TextField.TYPE_STORED);\n    customType14.setTokenized(false);\n    customType14.setStoreTermVectors(true);\n    customType14.setStoreTermVectorOffsets(true);\n    customType14.setStoreTermVectorPositions(true);\n\n    FieldType customType15 = new FieldType(TextField.TYPE_UNSTORED);\n    customType15.setTokenized(false);\n    customType15.setStoreTermVectors(true);\n    customType15.setStoreTermVectorOffsets(true);\n    customType15.setStoreTermVectorPositions(true);\n    \n    switch (mode) {\n      case 0: return new Field(fieldName, \"some text\", customType);\n      case 1: return new TextField(fieldName, \"some text\");\n      case 2: return new Field(fieldName, \"some text\", customType2);\n      case 3: return new Field(fieldName, \"some text\", customType3);\n      case 4: return new Field(fieldName, \"some text\", customType4);\n      case 5: return new Field(fieldName, \"some text\", customType5);\n      case 6: return new Field(fieldName, \"some text\", customType6);\n      case 7: return new Field(fieldName, \"some text\", customType7);\n      case 8: return new Field(fieldName, \"some text\", customType8);\n      case 9: return new Field(fieldName, \"some text\", customType9);\n      case 10: return new Field(fieldName, \"some text\", customType10);\n      case 11: return new Field(fieldName, \"some text\", customType11);\n      case 12: return new Field(fieldName, \"some text\", customType12);\n      case 13: return new Field(fieldName, \"some text\", customType13);\n      case 14: return new Field(fieldName, \"some text\", customType14);\n      case 15: return new Field(fieldName, \"some text\", customType15);\n      default: return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1224a4027481acce15495b03bce9b48b93b42722"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"]},"commit2Childs":{"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"1224a4027481acce15495b03bce9b48b93b42722":["d619839baa8ce5503e496b94a9e42ad6f079293f","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}