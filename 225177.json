{"path":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","commits":[{"id":"a76eb9a31b3f158d4803594a76191193a920c2dd","date":1182104048,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    \n    SolrInputDocument doc = handler.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( new Float(5.5f), doc.getBoost(null) );\n    assertEquals( null, doc.getBoost( \"name\" ) );\n    assertEquals( new Float(2.2f), doc.getBoost( \"id\" ) );\n    assertEquals( null, doc.getBoost( \"ab\" ) );\n    // Boost is the product of each value\n    assertEquals( new Float(3*4*5), doc.getBoost( \"cat\" ) );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getFieldValue( \"id\") );\n    assertEquals( \"kitten\", doc.getFieldValue( \"name\") );\n    assertEquals( \"a&b\", doc.getFieldValue( \"ab\") ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getFieldValues( \"cat\" );\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    \n    SolrInputDocument doc = handler.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    \n    SolrInputDocument doc = handler.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( new Float(5.5f), doc.getBoost(null) );\n    assertEquals( null, doc.getBoost( \"name\" ) );\n    assertEquals( new Float(2.2f), doc.getBoost( \"id\" ) );\n    assertEquals( null, doc.getBoost( \"ab\" ) );\n    // Boost is the product of each value\n    assertEquals( new Float(3*4*5), doc.getBoost( \"cat\" ) );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getFieldValue( \"id\") );\n    assertEquals( \"kitten\", doc.getFieldValue( \"name\") );\n    assertEquals( \"a&b\", doc.getFieldValue( \"ab\") ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getFieldValues( \"cat\" );\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    \n    SolrInputDocument doc = handler.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["a76eb9a31b3f158d4803594a76191193a920c2dd"],"a76eb9a31b3f158d4803594a76191193a920c2dd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"a76eb9a31b3f158d4803594a76191193a920c2dd":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a76eb9a31b3f158d4803594a76191193a920c2dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}