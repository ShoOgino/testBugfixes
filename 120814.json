{"path":"contrib/db/bdb/src/java/org/apache/lucene/store/db/File#exists(DbDirectory).mjava","commits":[{"id":"87fc6f159522f12e67225691468cbf3d11be8590","date":1136423057,"type":1,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb/src/java/org/apache/lucene/store/db/File#exists(DbDirectory).mjava","pathOld":"contrib/db/src/java/org/apache/lucene/store/db/File#exists(DbDirectory).mjava","sourceNew":"    protected boolean exists(DbDirectory directory)\n        throws IOException\n    {\n        Db files = directory.files;\n        DbTxn txn = directory.txn;\n        int flags = directory.flags;\n\n        try {\n            if (files.get(txn, key, data, flags) == DbConstants.DB_NOTFOUND)\n                return false;\n        } catch (DatabaseException e) {\n            throw new IOException(e.getMessage());\n        }\n        \n        byte[] bytes = data.getData();\n        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);\n        DataInputStream in = new DataInputStream(buffer);\n\n        length = in.readLong();\n        timeModified = in.readLong();\n        in.close();\n\n        uuid = new byte[16];\n        System.arraycopy(bytes, 16, uuid, 0, 16);\n\n        return true;\n    }\n\n","sourceOld":"    protected boolean exists(DbDirectory directory)\n        throws IOException\n    {\n        Db files = directory.files;\n        DbTxn txn = directory.txn;\n        int flags = directory.flags;\n\n        try {\n            if (files.get(txn, key, data, flags) == DbConstants.DB_NOTFOUND)\n                return false;\n        } catch (DatabaseException e) {\n            throw new IOException(e.getMessage());\n        }\n        \n        byte[] bytes = data.getData();\n        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);\n        DataInputStream in = new DataInputStream(buffer);\n\n        length = in.readLong();\n        timeModified = in.readLong();\n        in.close();\n\n        uuid = new byte[16];\n        System.arraycopy(bytes, 16, uuid, 0, 16);\n\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/db/bdb/src/java/org/apache/lucene/store/db/File#exists(DbDirectory).mjava","pathOld":"contrib/db/bdb/src/java/org/apache/lucene/store/db/File#exists(DbDirectory).mjava","sourceNew":"    protected boolean exists(DbDirectory directory)\n        throws IOException\n    {\n        Db files = directory.files;\n        DbTxn txn = directory.txn;\n        int flags = directory.flags;\n\n        try {\n            if (files.get(txn, key, data, flags) == DbConstants.DB_NOTFOUND)\n                return false;\n        } catch (DatabaseException e) {\n            throw new IOException(e.getMessage());\n        }\n        \n        byte[] bytes = data.getData();\n        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);\n        DataInputStream in = new DataInputStream(buffer);\n\n        length = in.readLong();\n        timeModified = in.readLong();\n        in.close();\n\n        uuid = new byte[16];\n        System.arraycopy(bytes, 16, uuid, 0, 16);\n\n        return true;\n    }\n\n","sourceOld":"    protected boolean exists(DbDirectory directory)\n        throws IOException\n    {\n        Db files = directory.files;\n        DbTxn txn = directory.txn;\n        int flags = directory.flags;\n\n        try {\n            if (files.get(txn, key, data, flags) == DbConstants.DB_NOTFOUND)\n                return false;\n        } catch (DatabaseException e) {\n            throw new IOException(e.getMessage());\n        }\n        \n        byte[] bytes = data.getData();\n        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);\n        DataInputStream in = new DataInputStream(buffer);\n\n        length = in.readLong();\n        timeModified = in.readLong();\n        in.close();\n\n        uuid = new byte[16];\n        System.arraycopy(bytes, 16, uuid, 0, 16);\n\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87fc6f159522f12e67225691468cbf3d11be8590":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["87fc6f159522f12e67225691468cbf3d11be8590"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87fc6f159522f12e67225691468cbf3d11be8590"],"87fc6f159522f12e67225691468cbf3d11be8590":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}