{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testOps().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testOps() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    // Index documents\n    CdcrTestsUtil.indexRandomDocs(100, sourceSolrClient);\n    double opsAll = 0.0;\n    NamedList ops = null;\n\n    // calculate ops\n    int itr = 10;\n    while (itr-- > 0 && opsAll == 0.0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n\n    // Delete 10 documents: 10-19\n    List<String> ids;\n    for (int id = 0; id < 50; id++) {\n      ids = new ArrayList<>();\n      ids.add(Integer.toString(id));\n      sourceSolrClient.deleteById(ids, 1);\n      int dbq_id = 50 + id;\n      sourceSolrClient.deleteByQuery(\"id:\" + dbq_id, 1);\n    }\n\n    itr = 10;\n    while (itr-- > 0) {\n      NamedList rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.OPS).getResponse();\n      NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n      ops = (NamedList) collections.get(TARGET_COLLECTION);\n      opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n      Thread.sleep(250); // wait for cdcr to complete and check\n    }\n    // asserts ops values\n    opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertTrue(opsAll > 0);\n    assertTrue(opsAdds > 0);\n    assertTrue(opsDeletes > 0);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}