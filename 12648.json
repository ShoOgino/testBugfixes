{"path":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","commits":[{"id":"603175ca08914b73fa328e1ac07c772f8103ecd0","date":1363642166,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,TopDocs).mjava","sourceNew":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, TopDocs topDocs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[topDocs.scoreDocs.length];\n      for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n        int docid = topDocs.scoreDocs[i].doc;\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[topDocs.scoreDocs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424b0811c7309a660798cd4e2939a8adee546665","date":1495551772,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":null,"sourceOld":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":null,"sourceOld":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","424b0811c7309a660798cd4e2939a8adee546665"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"424b0811c7309a660798cd4e2939a8adee546665":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424b0811c7309a660798cd4e2939a8adee546665"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["603175ca08914b73fa328e1ac07c772f8103ecd0"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"603175ca08914b73fa328e1ac07c772f8103ecd0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"424b0811c7309a660798cd4e2939a8adee546665":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["603175ca08914b73fa328e1ac07c772f8103ecd0"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e9017cf144952056066919f1ebc7897ff9bd71b1","424b0811c7309a660798cd4e2939a8adee546665"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}