{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    cluster.createCollection(\"waitforstate\", 1, 1, \"config\", new HashMap<>());\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, DocCollection::isFullyActive);\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27b43f9a8cc600a073ced9342cb6882853856049","date":1463221077,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    cluster.createCollection(\"waitforstate\", 1, 1, \"config\", new HashMap<>());\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, DocCollection::isFullyActive);\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWaitForStateChecksCurrentState().mjava","sourceNew":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // several goes, to check that we're not getting delayed state changes\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27b43f9a8cc600a073ced9342cb6882853856049":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"7b366e7dd3172289251a86be96031af4002cd19c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27b43f9a8cc600a073ced9342cb6882853856049"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"27b43f9a8cc600a073ced9342cb6882853856049":["0ad30c6a479e764150a3316e57263319775f1df2"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["27b43f9a8cc600a073ced9342cb6882853856049"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7b366e7dd3172289251a86be96031af4002cd19c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}