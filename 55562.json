{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"06584e6e98d592b34e1329b384182f368d2025e8":["00743482822ec0841b0344a37944b666e6a0228d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"00743482822ec0841b0344a37944b666e6a0228d":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["d572389229127c297dd1fa5ce4758e1cec41e799"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","833a7987bc1c94455fde83e3311f72bddedcfb93"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"00743482822ec0841b0344a37944b666e6a0228d":["06584e6e98d592b34e1329b384182f368d2025e8"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","00743482822ec0841b0344a37944b666e6a0228d","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}