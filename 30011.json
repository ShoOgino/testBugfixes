{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","commits":[{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  private int extractBatchSize(StreamExpression expression, StreamFactory factory) throws IOException {\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    if(null == batchSizeParam || null == batchSizeParam.getParameter() || !(batchSizeParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a 'batchSize' parameter of type positive integer but didn't find one\",expression));\n    }\n    \n    String batchSizeStr = ((StreamExpressionValue)batchSizeParam.getParameter()).getValue();\n    return parseBatchSize(batchSizeStr, expression);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","sourceNew":"  private int extractBatchSize(StreamExpression expression, StreamFactory factory) throws IOException {\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    if(batchSizeParam == null) {\n      // Sensible default batch size\n      return 250;\n    }\n    String batchSizeStr = ((StreamExpressionValue)batchSizeParam.getParameter()).getValue();\n    return parseBatchSize(batchSizeStr, expression);\n  }\n\n","sourceOld":"  private int extractBatchSize(StreamExpression expression, StreamFactory factory) throws IOException {\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    if(null == batchSizeParam || null == batchSizeParam.getParameter() || !(batchSizeParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a 'batchSize' parameter of type positive integer but didn't find one\",expression));\n    }\n    \n    String batchSizeStr = ((StreamExpressionValue)batchSizeParam.getParameter()).getValue();\n    return parseBatchSize(batchSizeStr, expression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#extractBatchSize(StreamExpression,StreamFactory).mjava","sourceNew":"  private int extractBatchSize(StreamExpression expression, StreamFactory factory) throws IOException {\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    if(batchSizeParam == null) {\n      // Sensible default batch size\n      return 250;\n    }\n    String batchSizeStr = ((StreamExpressionValue)batchSizeParam.getParameter()).getValue();\n    return parseBatchSize(batchSizeStr, expression);\n  }\n\n","sourceOld":"  private int extractBatchSize(StreamExpression expression, StreamFactory factory) throws IOException {\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    if(null == batchSizeParam || null == batchSizeParam.getParameter() || !(batchSizeParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a 'batchSize' parameter of type positive integer but didn't find one\",expression));\n    }\n    \n    String batchSizeStr = ((StreamExpressionValue)batchSizeParam.getParameter()).getValue();\n    return parseBatchSize(batchSizeStr, expression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["a027750b86452a8dcd054ac993d54b203dae9102"],"7107555998ea86d6f61e2ad770687d674fa8e012":["a027750b86452a8dcd054ac993d54b203dae9102","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a027750b86452a8dcd054ac993d54b203dae9102":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a027750b86452a8dcd054ac993d54b203dae9102"],"a027750b86452a8dcd054ac993d54b203dae9102":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}