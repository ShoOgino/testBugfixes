{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","pathOld":"/dev/null","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","pathOld":"/dev/null","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","pathOld":"/dev/null","sourceNew":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#rollback(long).mjava","sourceNew":null,"sourceOld":"  // This could mess with any readers or reverse readers that are open, or anything that might try to do a log lookup.\n  // This should only be used to roll back buffered updates, not actually applied updates.\n  public void rollback(long pos) throws IOException {\n    synchronized (this) {\n      assert snapshot_size == pos;\n      fos.flush();\n      raf.setLength(pos);\n      fos.setWritten(pos);\n      assert fos.size() == pos;\n      numRecords = snapshot_numRecords;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1455c941cc4ce652efc776fc23471b0e499246f6"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}