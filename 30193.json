{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkImpacts(Impacts,int).mjava","commits":[{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkImpacts(Impacts,int).mjava","pathOld":"/dev/null","sourceNew":"  static void checkImpacts(Impacts impacts, int lastTarget) {\n    final int numLevels = impacts.numLevels();\n    if (numLevels < 1) {\n      throw new RuntimeException(\"The number of levels must be >= 1, got \" + numLevels);\n    }\n\n    int docIdUpTo0 = impacts.getDocIdUpTo(0);\n    if (docIdUpTo0 < lastTarget) {\n      throw new RuntimeException(\"getDocIdUpTo returned \" + docIdUpTo0 + \" on level 0, which is less than the target \" + lastTarget);\n    }\n\n    for (int level = 1; level < numLevels; ++level) {\n      int docIdUpTo = impacts.getDocIdUpTo(level);\n      int previousDocIdUpTo = impacts.getDocIdUpTo(level - 1);\n      if (docIdUpTo < previousDocIdUpTo) {\n        throw new RuntimeException(\"Decreasing return for getDocIdUpTo: level \" + (level-1) + \" returned \" + previousDocIdUpTo\n            + \" but level \" + level + \" returned \" + docIdUpTo + \" for target \" + lastTarget);\n      }\n    }\n\n    for (int level = 0; level < numLevels; ++level) {\n      List<Impact> perLevelImpacts = impacts.getImpacts(level);\n      if (perLevelImpacts.isEmpty()) {\n        throw new RuntimeException(\"Got empty list of impacts on level \" + level);\n      }\n      Impact first = perLevelImpacts.get(0);\n      if (first.freq < 1) {\n        throw new RuntimeException(\"First impact had a freq <= 0: \" + first);\n      }\n      if (first.norm == 0) {\n        throw new RuntimeException(\"First impact had a norm == 0: \" + first);\n      }\n      // Impacts must be in increasing order of norm AND freq\n      Impact previous = first;\n      for (int i = 1; i < perLevelImpacts.size(); ++i) {\n        Impact impact = perLevelImpacts.get(i);\n        if (impact.freq <= previous.freq || Long.compareUnsigned(impact.norm, previous.norm) <= 0) {\n          throw new RuntimeException(\"Impacts are not ordered or contain dups, got \" + previous + \" then \" + impact);\n        }\n      }\n      if (level > 0) {\n        // Make sure that impacts at level N trigger better scores than an level N-1\n        Iterator<Impact> previousIt = impacts.getImpacts(level-1).iterator();\n        previous = previousIt.next();\n        Iterator<Impact> it = perLevelImpacts.iterator();\n        Impact impact = it.next();\n        while (previousIt.hasNext()) {\n          previous = previousIt.next();\n          if (previous.freq <= impact.freq && Long.compareUnsigned(previous.norm, impact.norm) >= 0) {\n            // previous triggers a lower score than the current impact, all good\n            continue;\n          }\n          if (it.hasNext() == false) {\n            throw new RuntimeException(\"Found impact \" + previous + \" on level \" + (level-1) + \" but no impact on level \"\n                + level + \" triggers a better score: \" + perLevelImpacts);\n          }\n          impact = it.next();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}