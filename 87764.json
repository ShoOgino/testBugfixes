{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","commits":[{"id":"4c9661df01b81c277277a01afbca7851557a2148","date":1133588656,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Randomize synonyms to later sample a subset. Uses constant random seed\n\t * for reproducability. Uses \"DRand\", a simple, fast, uniform pseudo-random\n\t * number generator with medium statistical quality (multiplicative\n\t * congruential method), producing integers in the range [Integer.MIN_VALUE,\n\t * Integer.MAX_VALUE].\n\t */\n\tprivate static void randomize(Object[] arr) {\n\t\tint seed = 1234567; // constant\n\t\tint randomState = 4*seed + 1;\n//\t\tRandom random = new Random(seed); // unnecessary overhead\n\t\tint len = arr.length;\n\t\tfor (int i=0; i < len-1; i++) {\n\t\t\trandomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n\t\t\tint r = randomState % (len-i);\n\t\t\tif (r < 0) r = -r; // e.g. -9 % 2 == -1\n//\t\t\tint r = random.nextInt(len-i);\n\t\t\t\n\t\t\t// swap arr[i, i+r]\n\t\t\tObject tmp = arr[i];\n\t\t\tarr[i] = arr[i + r];\n\t\t\tarr[i + r] = tmp;\n\t\t}\t\t\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","sourceNew":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducability. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","sourceOld":"\t/**\n\t * Randomize synonyms to later sample a subset. Uses constant random seed\n\t * for reproducability. Uses \"DRand\", a simple, fast, uniform pseudo-random\n\t * number generator with medium statistical quality (multiplicative\n\t * congruential method), producing integers in the range [Integer.MIN_VALUE,\n\t * Integer.MAX_VALUE].\n\t */\n\tprivate static void randomize(Object[] arr) {\n\t\tint seed = 1234567; // constant\n\t\tint randomState = 4*seed + 1;\n//\t\tRandom random = new Random(seed); // unnecessary overhead\n\t\tint len = arr.length;\n\t\tfor (int i=0; i < len-1; i++) {\n\t\t\trandomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n\t\t\tint r = randomState % (len-i);\n\t\t\tif (r < 0) r = -r; // e.g. -9 % 2 == -1\n//\t\t\tint r = random.nextInt(len-i);\n\t\t\t\n\t\t\t// swap arr[i, i+r]\n\t\t\tObject tmp = arr[i];\n\t\t\tarr[i] = arr[i + r];\n\t\t\tarr[i + r] = tmp;\n\t\t}\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","sourceNew":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","sourceOld":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducability. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#randomize(Object[]).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#randomize(Object[]).mjava","sourceNew":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","sourceOld":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"4c9661df01b81c277277a01afbca7851557a2148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4c9661df01b81c277277a01afbca7851557a2148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"4c9661df01b81c277277a01afbca7851557a2148":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c9661df01b81c277277a01afbca7851557a2148"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}