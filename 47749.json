{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","commits":[{"id":"4215168c7c026cd898f2d98bb6aa5b0df9856696","date":1092688246,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8304cab93007ba9115d28465ad04ec5e4c1c5aa9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuffer).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuffer buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}