{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(PointWriter,long,int,int,byte[]).mjava","sourceNew":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":"  private int getMaxDocId(PointWriter p, long size, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.getReader(0, size)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","sourceNew":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = pointValue.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","sourceNew":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        int offset = dimension * bytesPerDimension;\n        if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = pointValue.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = pointValue.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","sourceNew":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint, int dataDims, int indexDims, byte[] dataDim) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        int offset = dimension * bytesPerDimension;\n        int dataOffset = indexDims * bytesPerDimension;\n        int dataLength = (dataDims - indexDims) * bytesPerDimension;\n        if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0\n            && Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + dataOffset, packedValue.offset + dataOffset + dataLength, dataDim, 0, dataLength) == 0) {\n          int newDocID = pointValue.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        int offset = dimension * bytesPerDimension;\n        if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = pointValue.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7f06758793500ca773d0df1037290e6e404fb33"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c7f06758793500ca773d0df1037290e6e404fb33"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}