{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    log.info(\"Leader change pooled.\");\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, props.getCoreUrl()));\n  }\n\n","sourceOld":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    log.info(\"Leader change pooled.\");\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, props.getCoreUrl()));\n  }\n\n","sourceOld":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    log.info(\"Leader change pooled.\");\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, props.getCoreUrl()));\n  }\n\n","sourceOld":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    synchronized (reader.getUpdateLock()) {\n      try {\n        reader.updateCloudState(true); // get fresh copy of the state\n      final CloudState state = reader.getCloudState();\n      final CloudState newState = setShardLeader(state, collection, shardId,\n          props.getCoreUrl());\n        if (state != newState) { // if same instance was returned no need to\n                                 // update state\n          log.info(\"Announcing new leader: coll: \" + collection + \" shard: \" + shardId + \" props:\" + props);\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(newState), true);\n          \n        } else {\n          log.debug(\"State was not changed.\");\n        }\n      } catch (KeeperException e) {\n        log.warn(\"Could not announce new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(\"Could not promote new leader coll:\" + collection + \" shard:\" + shardId + \", exception: \" + e.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff0c2d6e74f185e0675b944d9bece09573db8ef","date":1329014670,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","sourceNew":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    String coreUrl = props.getCoreUrl();\n    log.info(\"Leader change pooled: \" + coreUrl);\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, coreUrl));\n  }\n\n","sourceOld":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    log.info(\"Leader change pooled.\");\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, props.getCoreUrl()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#announceLeader(String,String,ZkCoreNodeProps).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {\n    String coreUrl = props.getCoreUrl();\n    log.info(\"Leader change pooled: \" + coreUrl);\n    fifo.add(new CloudStateUpdateRequest(Op.LeaderChange, collection, shardId, coreUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8ff0c2d6e74f185e0675b944d9bece09573db8ef":["d0492616b11aace806d95ec9df44f57a60160bf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["8ff0c2d6e74f185e0675b944d9bece09573db8ef"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d0492616b11aace806d95ec9df44f57a60160bf7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0492616b11aace806d95ec9df44f57a60160bf7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"8ff0c2d6e74f185e0675b944d9bece09573db8ef":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["8ff0c2d6e74f185e0675b944d9bece09573db8ef","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}