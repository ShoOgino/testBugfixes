{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":["83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9","83c8471489eeb663dabdc354a41bea707f560bc9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b44240f64a2d6935543ff25faee750b29204eb","date":1424972040,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#wrap(DirectoryReader,Map[String,Type]).mjava","sourceNew":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","sourceOld":"  /**\n   * Wraps a provided DirectoryReader. Note that for convenience, the returned reader\n   * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})\n   * and so on. \n   */\n  public static DirectoryReader wrap(DirectoryReader in, final Map<String,Type> mapping) throws IOException {\n    return new UninvertingDirectoryReader(in, mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a04f56464afdffd4c430d6c47a0c868a38354e":["93dd449115a9247533e44bab47e8429e5dccbc6d","98b44240f64a2d6935543ff25faee750b29204eb"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["98a04f56464afdffd4c430d6c47a0c868a38354e","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["98a04f56464afdffd4c430d6c47a0c868a38354e","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["98a04f56464afdffd4c430d6c47a0c868a38354e","0e121d43b5a10f2df530f406f935102656e9c4e8"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["93dd449115a9247533e44bab47e8429e5dccbc6d","98a04f56464afdffd4c430d6c47a0c868a38354e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98b44240f64a2d6935543ff25faee750b29204eb":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"98a04f56464afdffd4c430d6c47a0c868a38354e":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["98a04f56464afdffd4c430d6c47a0c868a38354e","56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98b44240f64a2d6935543ff25faee750b29204eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"98b44240f64a2d6935543ff25faee750b29204eb":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}