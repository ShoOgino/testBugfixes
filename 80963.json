{"path":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,Query,Query,IndexSearcher,ScoreMode,OrdinalMap).mjava","commits":[{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,Query,Query,IndexSearcher,ScoreMode,OrdinalMap).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,Query,Query,IndexSearcher,ScoreMode,MultiDocValues.OrdinalMap).mjava","sourceNew":"  /**\n   * Delegates to {@link #createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, OrdinalMap, int, int)},\n   * but disables the min and max filtering.\n   *\n   * @param joinField   The {@link SortedDocValues} field containing the join values\n   * @param fromQuery   The query containing the actual user query. Also the fromQuery can only match \"from\" documents.\n   * @param toQuery     The query identifying all documents on the \"to\" side.\n   * @param searcher    The index searcher used to execute the from query\n   * @param scoreMode   Instructs how scores from the fromQuery are mapped to the returned query\n   * @param ordinalMap  The ordinal map constructed over the joinField. In case of a single segment index, no ordinal map\n   *                    needs to be provided.\n   * @return a {@link Query} instance that can be used to join documents based on the join field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String joinField,\n                                      Query fromQuery,\n                                      Query toQuery,\n                                      IndexSearcher searcher,\n                                      ScoreMode scoreMode,\n                                      OrdinalMap ordinalMap) throws IOException {\n    return createJoinQuery(joinField, fromQuery, toQuery, searcher, scoreMode, ordinalMap, 0, Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Delegates to {@link #createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, MultiDocValues.OrdinalMap, int, int)},\n   * but disables the min and max filtering.\n   *\n   * @param joinField   The {@link SortedDocValues} field containing the join values\n   * @param fromQuery   The query containing the actual user query. Also the fromQuery can only match \"from\" documents.\n   * @param toQuery     The query identifying all documents on the \"to\" side.\n   * @param searcher    The index searcher used to execute the from query\n   * @param scoreMode   Instructs how scores from the fromQuery are mapped to the returned query\n   * @param ordinalMap  The ordinal map constructed over the joinField. In case of a single segment index, no ordinal map\n   *                    needs to be provided.\n   * @return a {@link Query} instance that can be used to join documents based on the join field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String joinField,\n                                      Query fromQuery,\n                                      Query toQuery,\n                                      IndexSearcher searcher,\n                                      ScoreMode scoreMode,\n                                      MultiDocValues.OrdinalMap ordinalMap) throws IOException {\n    return createJoinQuery(joinField, fromQuery, toQuery, searcher, scoreMode, ordinalMap, 0, Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,Query,Query,IndexSearcher,ScoreMode,OrdinalMap).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,Query,Query,IndexSearcher,ScoreMode,MultiDocValues.OrdinalMap).mjava","sourceNew":"  /**\n   * Delegates to {@link #createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, OrdinalMap, int, int)},\n   * but disables the min and max filtering.\n   *\n   * @param joinField   The {@link SortedDocValues} field containing the join values\n   * @param fromQuery   The query containing the actual user query. Also the fromQuery can only match \"from\" documents.\n   * @param toQuery     The query identifying all documents on the \"to\" side.\n   * @param searcher    The index searcher used to execute the from query\n   * @param scoreMode   Instructs how scores from the fromQuery are mapped to the returned query\n   * @param ordinalMap  The ordinal map constructed over the joinField. In case of a single segment index, no ordinal map\n   *                    needs to be provided.\n   * @return a {@link Query} instance that can be used to join documents based on the join field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String joinField,\n                                      Query fromQuery,\n                                      Query toQuery,\n                                      IndexSearcher searcher,\n                                      ScoreMode scoreMode,\n                                      OrdinalMap ordinalMap) throws IOException {\n    return createJoinQuery(joinField, fromQuery, toQuery, searcher, scoreMode, ordinalMap, 0, Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Delegates to {@link #createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, MultiDocValues.OrdinalMap, int, int)},\n   * but disables the min and max filtering.\n   *\n   * @param joinField   The {@link SortedDocValues} field containing the join values\n   * @param fromQuery   The query containing the actual user query. Also the fromQuery can only match \"from\" documents.\n   * @param toQuery     The query identifying all documents on the \"to\" side.\n   * @param searcher    The index searcher used to execute the from query\n   * @param scoreMode   Instructs how scores from the fromQuery are mapped to the returned query\n   * @param ordinalMap  The ordinal map constructed over the joinField. In case of a single segment index, no ordinal map\n   *                    needs to be provided.\n   * @return a {@link Query} instance that can be used to join documents based on the join field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String joinField,\n                                      Query fromQuery,\n                                      Query toQuery,\n                                      IndexSearcher searcher,\n                                      ScoreMode scoreMode,\n                                      MultiDocValues.OrdinalMap ordinalMap) throws IOException {\n    return createJoinQuery(joinField, fromQuery, toQuery, searcher, scoreMode, ordinalMap, 0, Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"957c610636f393a85a38f1af670540028db13e6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","957c610636f393a85a38f1af670540028db13e6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["957c610636f393a85a38f1af670540028db13e6b"]},"commit2Childs":{"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["957c610636f393a85a38f1af670540028db13e6b","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}