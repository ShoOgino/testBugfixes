{"path":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","commits":[{"id":"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3","date":1162241591,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"/dev/null","sourceNew":"\t// Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n    // larger than the buffer size), and see that it returns the bytes we expect.\n\t// Our input comes from a dynamically generated \"file\" -\n    // see MyBufferedIndexInput below.\n    public void testReadBytes() throws Exception {\n    \tMyBufferedIndexInput input = new MyBufferedIndexInput();\n    \tint pos=0;\n    \t// gradually increasing size:\n    \tfor(int size=1; size<BufferedIndexInput.BUFFER_SIZE*10; size=size+size/200+1){\n    \t\tcheckReadBytes(input, size, pos);\n    \t\tpos+=size;\n    \t}\n    \t// wildly fluctuating size:\n    \tfor(long i=0; i<1000; i++){\n    \t\t// The following function generates a fluctuating (but repeatable)\n    \t\t// size, sometimes small (<100) but sometimes large (>10000)\n    \t\tint size1 = (int)( i%7 + 7*(i%5)+ 7*5*(i%3) + 5*5*3*(i%2));\n    \t\tint size2 = (int)( i%11 + 11*(i%7)+ 11*7*(i%5) + 11*7*5*(i%3) + 11*7*5*3*(i%2) );\n    \t\tint size = (i%3==0)?size2*10:size1; \n    \t\tcheckReadBytes(input, size, pos);\n    \t\tpos+=size;\n    \t}\n    \t// constant small size (7 bytes):\n    \tfor(int i=0; i<BufferedIndexInput.BUFFER_SIZE; i++){\n    \t\tcheckReadBytes(input, 7, pos);\n    \t\tpos+=7;\n    \t}\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["37cdff042fc21a4f3d9c437c1022deac5d3bab72"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37cdff042fc21a4f3d9c437c1022deac5d3bab72","date":1247767655,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize), inputBufferSize, r);\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize), inputBufferSize, r);\n  }\n\n","sourceOld":"\t// Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n    // larger than the buffer size), and see that it returns the bytes we expect.\n\t// Our input comes from a dynamically generated \"file\" -\n    // see MyBufferedIndexInput below.\n    public void testReadBytes() throws Exception {\n    \tMyBufferedIndexInput input = new MyBufferedIndexInput();\n    \tint pos=0;\n    \t// gradually increasing size:\n    \tfor(int size=1; size<BufferedIndexInput.BUFFER_SIZE*10; size=size+size/200+1){\n    \t\tcheckReadBytes(input, size, pos);\n    \t\tpos+=size;\n    \t}\n    \t// wildly fluctuating size:\n    \tfor(long i=0; i<1000; i++){\n    \t\t// The following function generates a fluctuating (but repeatable)\n    \t\t// size, sometimes small (<100) but sometimes large (>10000)\n    \t\tint size1 = (int)( i%7 + 7*(i%5)+ 7*5*(i%3) + 5*5*3*(i%2));\n    \t\tint size2 = (int)( i%11 + 11*(i%7)+ 11*7*(i%5) + 11*7*5*(i%3) + 11*7*5*3*(i%2) );\n    \t\tint size = (i%3==0)?size2*10:size1; \n    \t\tcheckReadBytes(input, size, pos);\n    \t\tpos+=size;\n    \t}\n    \t// constant small size (7 bytes):\n    \tfor(int i=0; i<BufferedIndexInput.BUFFER_SIZE; i++){\n    \t\tcheckReadBytes(input, 7, pos);\n    \t\tpos+=7;\n    \t}\n    }\n\n","bugFix":["e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"bugIntro":["1e538cbd7f572f646f36c73053aea561d95c2cb2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8","date":1254593002,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, FSDirectory.DEFAULT_READ_CHUNK_SIZE), inputBufferSize, r);\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, FSDirectory.DEFAULT_READ_CHUNK_SIZE), inputBufferSize, r);\n  }\n\n","sourceOld":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize), inputBufferSize, r);\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize), inputBufferSize, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","sourceOld":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, FSDirectory.DEFAULT_READ_CHUNK_SIZE), inputBufferSize, r);\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n    // run test with chunk size of 100 MB - default\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, FSDirectory.DEFAULT_READ_CHUNK_SIZE), inputBufferSize, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","sourceOld":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["37cdff042fc21a4f3d9c437c1022deac5d3bab72"],"37cdff042fc21a4f3d9c437c1022deac5d3bab72":["e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3":["37cdff042fc21a4f3d9c437c1022deac5d3bab72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"37cdff042fc21a4f3d9c437c1022deac5d3bab72":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}