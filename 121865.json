{"path":"solr/core/src/java/org/apache/solr/util/TimeZoneUtils#getTimeZone(String).mjava","commits":[{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeZoneUtils#getTimeZone(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is provided as a replacement for TimeZone.getTimeZone but \n   * with out the anoying behavior of returning \"GMT\" for gibberish input.\n   * <p>\n   * This method will return null unless the input is either:\n   * </p>\n   * <ul>\n   *  <li>Included in the set of known TimeZone IDs\n   *  <li>A \"CustomID\" specified as a numeric offset from \"GMT\"</li>\n   * </ul>\n   * \n   * @param ID Either a TimeZone ID found in KNOWN_TIMEZONE_IDS, or a \"CustomID\" specified as a GMT offset.\n   * @return A TImeZone object corrisponding to the input, or null if no such TimeZone is supported.\n   * @see #KNOWN_TIMEZONE_IDS\n   * @see TimeZone\n   */\n  public static final TimeZone getTimeZone(final String ID) {\n    if (null == ID) return null;\n    if (KNOWN_TIMEZONE_IDS.contains(ID)) return TimeZone.getTimeZone(ID);\n\n    Matcher matcher = CUSTOM_ID_REGEX.matcher(ID);\n    if (matcher.matches()) {\n      int hour = Integer.parseInt(matcher.group(1));\n      if (hour < 0 || 23 < hour) return null;\n      \n      final String minStr = matcher.group(2);\n      if (null != minStr) {\n        int min = Integer.parseInt(minStr);\n        if (min < 0 || 59 < min) return null;\n      }\n      return TimeZone.getTimeZone(ID);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81118fd68df3f6e9f79307e6e294d4842748388e","date":1335306627,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeZoneUtils#getTimeZone(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TimeZoneUtils#getTimeZone(String).mjava","sourceNew":"  /**\n   * This method is provided as a replacement for TimeZone.getTimeZone but \n   * without the annoying behavior of returning \"GMT\" for gibberish input.\n   * <p>\n   * This method will return null unless the input is either:\n   * </p>\n   * <ul>\n   *  <li>Included in the set of known TimeZone IDs</li>\n   *  <li>A \"CustomID\" specified as a numeric offset from \"GMT\"</li>\n   * </ul>\n   * \n   * @param ID Either a TimeZone ID found in KNOWN_TIMEZONE_IDS, or a \"CustomID\" specified as a GMT offset.\n   * @return A TimeZone object corresponding to the input, or null if no such TimeZone is supported.\n   * @see #KNOWN_TIMEZONE_IDS\n   * @see TimeZone\n   */\n  public static final TimeZone getTimeZone(final String ID) {\n    if (null == ID) return null;\n    if (KNOWN_TIMEZONE_IDS.contains(ID)) return TimeZone.getTimeZone(ID);\n\n    Matcher matcher = CUSTOM_ID_REGEX.matcher(ID);\n    if (matcher.matches()) {\n      int hour = Integer.parseInt(matcher.group(1));\n      if (hour < 0 || 23 < hour) return null;\n      \n      final String minStr = matcher.group(2);\n      if (null != minStr) {\n        int min = Integer.parseInt(minStr);\n        if (min < 0 || 59 < min) return null;\n      }\n      return TimeZone.getTimeZone(ID);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * This method is provided as a replacement for TimeZone.getTimeZone but \n   * with out the anoying behavior of returning \"GMT\" for gibberish input.\n   * <p>\n   * This method will return null unless the input is either:\n   * </p>\n   * <ul>\n   *  <li>Included in the set of known TimeZone IDs\n   *  <li>A \"CustomID\" specified as a numeric offset from \"GMT\"</li>\n   * </ul>\n   * \n   * @param ID Either a TimeZone ID found in KNOWN_TIMEZONE_IDS, or a \"CustomID\" specified as a GMT offset.\n   * @return A TImeZone object corrisponding to the input, or null if no such TimeZone is supported.\n   * @see #KNOWN_TIMEZONE_IDS\n   * @see TimeZone\n   */\n  public static final TimeZone getTimeZone(final String ID) {\n    if (null == ID) return null;\n    if (KNOWN_TIMEZONE_IDS.contains(ID)) return TimeZone.getTimeZone(ID);\n\n    Matcher matcher = CUSTOM_ID_REGEX.matcher(ID);\n    if (matcher.matches()) {\n      int hour = Integer.parseInt(matcher.group(1));\n      if (hour < 0 || 23 < hour) return null;\n      \n      final String minStr = matcher.group(2);\n      if (null != minStr) {\n        int min = Integer.parseInt(minStr);\n        if (min < 0 || 59 < min) return null;\n      }\n      return TimeZone.getTimeZone(ID);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81118fd68df3f6e9f79307e6e294d4842748388e":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81118fd68df3f6e9f79307e6e294d4842748388e"]},"commit2Childs":{"81118fd68df3f6e9f79307e6e294d4842748388e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["81118fd68df3f6e9f79307e6e294d4842748388e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}