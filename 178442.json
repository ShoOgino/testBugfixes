{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits deletedDocs = MultiFields.getDeletedDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, deletedDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits deletedDocs = MultiFields.getDeletedDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, deletedDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"/dev/null","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fea68ff83c1db2f720597dfcea5bee943a35f35","date":1317817445,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b","date":1317820981,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(getOrdinalCache) {\n      Integer res = getOrdinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(getOrdinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      getOrdinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["7fea68ff83c1db2f720597dfcea5bee943a35f35"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7fea68ff83c1db2f720597dfcea5bee943a35f35","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}