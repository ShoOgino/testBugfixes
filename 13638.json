{"path":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      DocIdSet set = get(in, context);\n      if (set == null) {\n        // do not apply acceptDocs yet, we want the cached filter to not take them into account\n        set = in.getDocIdSet(context, null);\n        if (policy.shouldCache(in, context, set)) {\n          set = docIdSetToCache(set, context.reader());\n          if (set == null) {\n            // null values are not supported\n            set = DocIdSet.EMPTY;\n          }\n          // it might happen that another thread computed the same set in parallel\n          // although this might incur some CPU overhead, it is probably better\n          // this way than trying to lock and preventing other filters to be\n          // computed at the same time?\n          putIfAbsent(in, context, set);\n        }\n      }\n      return set == DocIdSet.EMPTY ? null : BitsFilteredDocIdSet.wrap(set, acceptDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e633e75d4ea3f5819388fd102b6c54f185e72ec2","date":1418639529,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(in);\n      }\n\n      DocIdSet set = get(in, context);\n      if (set == null) {\n        // do not apply acceptDocs yet, we want the cached filter to not take them into account\n        set = in.getDocIdSet(context, null);\n        if (policy.shouldCache(in, context, set)) {\n          set = docIdSetToCache(set, context.reader());\n          if (set == null) {\n            // null values are not supported\n            set = DocIdSet.EMPTY;\n          }\n          // it might happen that another thread computed the same set in parallel\n          // although this might incur some CPU overhead, it is probably better\n          // this way than trying to lock and preventing other filters to be\n          // computed at the same time?\n          putIfAbsent(in, context, set);\n        }\n      }\n      return set == DocIdSet.EMPTY ? null : BitsFilteredDocIdSet.wrap(set, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      DocIdSet set = get(in, context);\n      if (set == null) {\n        // do not apply acceptDocs yet, we want the cached filter to not take them into account\n        set = in.getDocIdSet(context, null);\n        if (policy.shouldCache(in, context, set)) {\n          set = docIdSetToCache(set, context.reader());\n          if (set == null) {\n            // null values are not supported\n            set = DocIdSet.EMPTY;\n          }\n          // it might happen that another thread computed the same set in parallel\n          // although this might incur some CPU overhead, it is probably better\n          // this way than trying to lock and preventing other filters to be\n          // computed at the same time?\n          putIfAbsent(in, context, set);\n        }\n      }\n      return set == DocIdSet.EMPTY ? null : BitsFilteredDocIdSet.wrap(set, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(in);\n      }\n\n      DocIdSet set = get(in, context);\n      if (set == null) {\n        // do not apply acceptDocs yet, we want the cached filter to not take them into account\n        set = in.getDocIdSet(context, null);\n        if (policy.shouldCache(in, context, set)) {\n          set = docIdSetToCache(set, context.reader());\n          if (set == null) {\n            // null values are not supported\n            set = DocIdSet.EMPTY;\n          }\n          // it might happen that another thread computed the same set in parallel\n          // although this might incur some CPU overhead, it is probably better\n          // this way than trying to lock and preventing other filters to be\n          // computed at the same time?\n          putIfAbsent(in, context, set);\n        }\n      }\n      return set == DocIdSet.EMPTY ? null : BitsFilteredDocIdSet.wrap(set, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.CachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(in);\n      }\n\n      DocIdSet set = get(in, context);\n      if (set == null) {\n        // do not apply acceptDocs yet, we want the cached filter to not take them into account\n        set = in.getDocIdSet(context, null);\n        if (policy.shouldCache(in, context, set)) {\n          set = docIdSetToCache(set, context.reader());\n          if (set == null) {\n            // null values are not supported\n            set = DocIdSet.EMPTY;\n          }\n          // it might happen that another thread computed the same set in parallel\n          // although this might incur some CPU overhead, it is probably better\n          // this way than trying to lock and preventing other filters to be\n          // computed at the same time?\n          putIfAbsent(in, context, set);\n        }\n      }\n      return set == DocIdSet.EMPTY ? null : BitsFilteredDocIdSet.wrap(set, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e633e75d4ea3f5819388fd102b6c54f185e72ec2","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e633e75d4ea3f5819388fd102b6c54f185e72ec2"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e633e75d4ea3f5819388fd102b6c54f185e72ec2":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["e633e75d4ea3f5819388fd102b6c54f185e72ec2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e633e75d4ea3f5819388fd102b6c54f185e72ec2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}