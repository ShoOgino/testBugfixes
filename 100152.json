{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","pathOld":"/dev/null","sourceNew":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      if ((startCmp < 0 || startCmp == 0 && nrShape.getMinLV().getLevel() <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrShape.getMaxLV().getLevel() <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      if (startCmp == 0 && endCmp == 0\n          && nrShape.getMinLV().getLevel() >= getLevel() && nrShape.getMaxLV().getLevel() >= getLevel())\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d","date":1402425682,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","sourceNew":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = nrShape.getMinLV().getLevel();\n      int nrMaxLevel = nrShape.getMaxLV().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getLVAtLevel(nrMaxLevel-1)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      if ((startCmp < 0 || startCmp == 0 && nrShape.getMinLV().getLevel() <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrShape.getMaxLV().getLevel() <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      if (startCmp == 0 && endCmp == 0\n          && nrShape.getMinLV().getLevel() >= getLevel() && nrShape.getMaxLV().getLevel() >= getLevel())\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"488b011602f8ebe953bd385cfaa010f8532a06ff","date":1402435726,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","sourceNew":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = nrShape.getMinLV().getLevel();\n      int nrMaxLevel = nrShape.getMaxLV().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getLVAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = nrShape.getMinLV().getLevel();\n      int nrMaxLevel = nrShape.getMaxLV().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getLVAtLevel(nrMaxLevel-1)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","sourceNew":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = nrShape.getMinLV().getLevel();\n      int nrMaxLevel = nrShape.getMaxLV().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getLVAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["488b011602f8ebe953bd385cfaa010f8532a06ff"],"488b011602f8ebe953bd385cfaa010f8532a06ff":["d009c4b73c08d156582c5a8e34e7e3c3f7378e8d"]},"commit2Childs":{"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d":["488b011602f8ebe953bd385cfaa010f8532a06ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["d009c4b73c08d156582c5a8e34e7e3c3f7378e8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cb53c8e9da2afe33252ee698dda412264252cfa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"488b011602f8ebe953bd385cfaa010f8532a06ff":["cb53c8e9da2afe33252ee698dda412264252cfa7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}