{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","commits":[{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(30000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea066add3bcc9f5b952f08999880ff9704e5ba48","date":1388272743,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrClient client = null;\n        try {\n          client = new HttpSolrClient(baseUrl);\n          client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (client != null) {\n            client.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea066add3bcc9f5b952f08999880ff9704e5ba48":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["88f39c3b3a16aebc5a91335341c7ad5b560e2277","a69439d0df009e0bb0038d1e427159f449dd670d"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a69439d0df009e0bb0038d1e427159f449dd670d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a69439d0df009e0bb0038d1e427159f449dd670d":["7530de27b87b961b51f01bd1299b7004d46e8823"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["ea066add3bcc9f5b952f08999880ff9704e5ba48"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a69439d0df009e0bb0038d1e427159f449dd670d"],"d82832af39f94dbb58a3130fd216ff1d49435589":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"ea066add3bcc9f5b952f08999880ff9704e5ba48":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c3e46d3417c353d7be14509cfab11b315927fe"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["ea066add3bcc9f5b952f08999880ff9704e5ba48"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["a69439d0df009e0bb0038d1e427159f449dd670d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}