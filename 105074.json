{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5","date":1480718570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n        throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n      }\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n        throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n      }\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n        throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n      }\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n        throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n      }\n      return new IntersectTermsEnum(compiled, startTerm);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5"],"a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"9856095f7afb5a607bf5e65077615ed91273508c":["2f948dd442d23baa6cbb28daf77c8db78b351329","a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a7ad0cb1d1034a969cd46af13239b4ba1a09e8f5","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}