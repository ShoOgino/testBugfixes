{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","commits":[{"id":"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7","date":1417534918,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollection(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","22859cb40e09867e7da8de84a31956c07259f82f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollection(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollection(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37e7502644cd23597431d66e301299b1ead2fb9b","date":1422636984,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollection(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","date":1426444850,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, false, leader.getName()));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, false, leader.getName()));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":["22859cb40e09867e7da8de84a31956c07259f82f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaUrl, replicaCoreNodeProps, false));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertEquals(ZkStateReader.DOWN, lirStateMap.get(\"state\"));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22859cb40e09867e7da8de84a31956c07259f82f","date":1441822065,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, leader.getName(), true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n    assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName, shardId, replicaCoreNodeProps, leader.getName(), false, true));\n    assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"bugIntro":["3e0300d1df37d7e9662d491269e91b6f66dca8bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e0300d1df37d7e9662d491269e91b6f66dca8bd","date":1443011762,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, leader.getName(), true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":["22859cb40e09867e7da8de84a31956c07259f82f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = ((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    try {\n      new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName).process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":"  /**\n   * Tests handling of different format of lir nodes\n   */\n  //TODO remove in SOLR-11812\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n\n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","sourceOld":"  /**\n   * Tests handling of lir state znodes.\n   */\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n    \n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), Replica.State.DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(Replica.State.DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#testLeaderInitiatedRecoveryCRUD().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests handling of different format of lir nodes\n   */\n  //TODO remove in SOLR-11812\n  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {\n    String testCollectionName = \"c8n_crud_1x2\";\n    String shardId = \"shard1\";\n    createCollectionRetry(testCollectionName, \"conf1\", 1, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n    CoreContainer cores = leaderJetty.getCoreContainer();\n    ZkController zkController = cores.getZkController();\n    assertNotNull(\"ZkController is null\", zkController);\n\n    Replica notLeader =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, 2, maxWaitSecsToSeeAllActive).get(0);\n\n    ZkCoreNodeProps replicaCoreNodeProps = new ZkCoreNodeProps(notLeader);\n    String replicaUrl = replicaCoreNodeProps.getCoreUrl();\n\n    MockCoreDescriptor cd = new MockCoreDescriptor() {\n      public CloudDescriptor getCloudDescriptor() {\n        return new CloudDescriptor(leader.getStr(ZkStateReader.CORE_NAME_PROP), new Properties(), this) {\n          @Override\n          public String getCoreNodeName() {\n            return leader.getName();\n          }\n          @Override\n          public boolean isLeader() {\n            return true;\n          }\n        };\n      }\n    };\n\n    zkController.updateLeaderInitiatedRecoveryState(testCollectionName, shardId, notLeader.getName(), DOWN, cd, true);\n    Map<String,Object> lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n\n    // test old non-json format handling\n    SolrZkClient zkClient = zkController.getZkClient();\n    String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName, shardId, notLeader.getName());\n    zkClient.setData(znodePath, \"down\".getBytes(StandardCharsets.UTF_8), true);\n    lirStateMap = zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName, shardId, notLeader.getName());\n    assertNotNull(lirStateMap);\n    assertSame(DOWN, Replica.State.getState((String) lirStateMap.get(ZkStateReader.STATE_PROP)));\n    zkClient.delete(znodePath, -1, false);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["37e7502644cd23597431d66e301299b1ead2fb9b"],"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"3e0300d1df37d7e9662d491269e91b6f66dca8bd":["22859cb40e09867e7da8de84a31956c07259f82f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"84f20f331d8001864545c7021812d8c6509c7593":["28288370235ed02234a64753cdbf0c6ec096304a"],"3217321f3e1d7922898c6c633d17acfa840d6875":["1088b72b3b4cc45316b7595bd09023c859cd2327","ac97ea104d893f16aab430d9904473bc1f233f3c"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["84f20f331d8001864545c7021812d8c6509c7593"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["1088b72b3b4cc45316b7595bd09023c859cd2327","3217321f3e1d7922898c6c633d17acfa840d6875"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1088b72b3b4cc45316b7595bd09023c859cd2327","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["37e7502644cd23597431d66e301299b1ead2fb9b","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"22859cb40e09867e7da8de84a31956c07259f82f":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["3e0300d1df37d7e9662d491269e91b6f66dca8bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"37e7502644cd23597431d66e301299b1ead2fb9b":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"]},"commit2Childs":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"3e0300d1df37d7e9662d491269e91b6f66dca8bd":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"84f20f331d8001864545c7021812d8c6509c7593":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["37e7502644cd23597431d66e301299b1ead2fb9b"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["84f20f331d8001864545c7021812d8c6509c7593"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"22859cb40e09867e7da8de84a31956c07259f82f":["3e0300d1df37d7e9662d491269e91b6f66dca8bd"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"37e7502644cd23597431d66e301299b1ead2fb9b":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["22859cb40e09867e7da8de84a31956c07259f82f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}