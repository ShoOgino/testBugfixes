{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","commits":[{"id":"90164923c8d1612badfdbea3fadc987a4e5bc7e6","date":1373121947,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + SolrCoreDiscoverer.CORE_PROP_FILE);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(is);\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(is);\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + SolrCoreDiscoverer.CORE_PROP_FILE);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(is);\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(is);\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    File gen = new File(test, \"segments.gen\");\n    assertTrue(\"Should be segments.gen in the dir at \" + gen.getAbsolutePath(), gen.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminCreateDiscoverTest#testCreateSavesSysProps().mjava","sourceNew":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure it's NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateSavesSysProps() throws Exception {\n\n    setupCore(coreSysProps, true);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    // Just to be sure its NOT written to the core.properties file\n    File workDir = new File(solrHomeDirectory, coreSysProps);\n    System.setProperty(\"INSTDIR_TEST\", workDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", \"data_diff\");\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, coreSysProps,\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    Properties props = new Properties();\n    File propFile = new File(solrHomeDirectory, coreSysProps + \"/\" + CorePropertiesLocator.PROPERTIES_FILENAME);\n    FileInputStream is = new FileInputStream(propFile);\n    try {\n      props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n    } finally {\n      org.apache.commons.io.IOUtils.closeQuietly(is);\n    }\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.NAME), coreSysProps);\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.CONFIG), \"${CONFIG_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.SCHEMA), \"${SCHEMA_TEST}\");\n\n    assertEquals(\"Unexpected value preserved in properties file \" + propFile.getAbsolutePath(),\n        props.getProperty(CoreAdminParams.DATA_DIR), \"${DATA_TEST}\");\n\n    assertEquals(props.size(), 4);\n    //checkOnlyKnown(propFile);\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982. Really, we should be able to just verify that the index files exist.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal).\n    File badDir = new File(workDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core if dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1","7d89d7e4e5101347833eea558851bf4209218619"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["7d89d7e4e5101347833eea558851bf4209218619"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}