{"path":"src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","commits":[{"id":"0b76616526aa00e6e6983cbd99b234605e00e3cf","date":1258472185,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"/dev/null","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1.equals(h2) == false){\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ee3516c0159528e9661e9988a585ec3baad3026","date":1258585358,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1.equals(h2) == false){\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ee3516c0159528e9661e9988a585ec3baad3026":["0b76616526aa00e6e6983cbd99b234605e00e3cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1ee3516c0159528e9661e9988a585ec3baad3026"],"0b76616526aa00e6e6983cbd99b234605e00e3cf":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1ee3516c0159528e9661e9988a585ec3baad3026":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0b76616526aa00e6e6983cbd99b234605e00e3cf"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0b76616526aa00e6e6983cbd99b234605e00e3cf":["1ee3516c0159528e9661e9988a585ec3baad3026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}