{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","commits":[{"id":"d4ddf965cea25006a6e621cc031c3bc69863ff4d","date":1474564021,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n\n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n\n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n    \n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getIntOperand(StreamExpression,String,Integer).mjava","sourceNew":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException {\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n\n    if (null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)) {\n      if (null != defaultValue) {\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue) param.getParameter()).getValue();\n    try {\n      return Integer.parseInt(nStr);\n    } catch (NumberFormatException e) {\n      if (null != defaultValue) {\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\", expression, paramName, nStr));\n    }\n  }\n\n","sourceOld":"  public int getIntOperand(StreamExpression expression, String paramName, Integer defaultValue) throws IOException{\n    StreamExpressionNamedParameter param = getNamedOperand(expression, paramName);\n\n    if(null == param || null == param.getParameter() || !(param.getParameter() instanceof StreamExpressionValue)){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single '%s' parameter of type integer but didn't find one\",expression, paramName));\n    }\n    String nStr = ((StreamExpressionValue)param.getParameter()).getValue();\n    try{\n      return Integer.parseInt(nStr);\n    }\n    catch(NumberFormatException e){\n      if(null != defaultValue){\n        return defaultValue;\n      }\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - %s '%s' is not a valid integer.\",expression, paramName, nStr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4ddf965cea25006a6e621cc031c3bc69863ff4d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","126d6ad24eed13163ba0959435d5a80e5672837c"],"804a8d5358fe7b7563b85ee7838714d720b89272":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","804a8d5358fe7b7563b85ee7838714d720b89272"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["126d6ad24eed13163ba0959435d5a80e5672837c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["126d6ad24eed13163ba0959435d5a80e5672837c","d4ddf965cea25006a6e621cc031c3bc69863ff4d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}