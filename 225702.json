{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}