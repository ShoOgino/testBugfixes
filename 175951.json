{"path":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0","date":1392228582,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"XML element <add> has invalid XML attr: \" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing rollback\");\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"XML element <add> has invalid XML attr: {}\", attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing {}\", currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing rollback\");\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"XML element <add> has invalid XML attr: \" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing rollback\");\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["042e4d934397657ba04c82b46cc5665076bc5c58","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}