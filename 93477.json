{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggesterComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          \n          // Register event listeners for this Suggester\n          core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false));\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          if (buildOnCommit || buildOnOptimize) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf2ccf302186b563c9549824a4d45db1e8cf8a0d","date":1387322051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          \n          // Register event listeners for this Suggester\n          core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false));\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          if (buildOnCommit || buildOnOptimize) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggesterComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          \n          // Register event listeners for this Suggester\n          core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false));\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          if (buildOnCommit || buildOnOptimize) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          \n          // Register event listeners for this Suggester\n          core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false));\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          if (buildOnCommit || buildOnOptimize) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (!core.isReloaded()) {\n            // Register first searcher event listeners for this Suggester unless it's a core reload\n            core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false, buildOnStartup, false)); \n          }\n          \n          if (buildOnCommit || buildOnOptimize || core.isReloaded()) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded()));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          \n          // Register event listeners for this Suggester\n          core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false));\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          if (buildOnCommit || buildOnOptimize) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            LOG.info(\"Registering searcher listener for suggester: \" + suggester.getName() + \" - \" + listener);\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (!core.isReloaded()) {\n            // Register first searcher event listeners for this Suggester unless it's a core reload\n            core.registerFirstSearcherListener(new SuggesterListener(core, suggester, false, false, buildOnStartup, false)); \n          }\n          \n          if (buildOnCommit || buildOnOptimize || core.isReloaded()) {\n            LOG.info(\"Registering newSearcher listener for suggester: \" + suggester.getName());\n            core.registerNewSearcherListener(new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded()));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            log.info(\"Registering searcher listener for suggester: \" + suggester.getName() + \" - \" + listener);\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            LOG.info(\"Registering searcher listener for suggester: \" + suggester.getName() + \" - \" + listener);\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            if (log.isInfoEnabled()) {\n              log.info(\"Registering searcher listener for suggester: {} = {}\", suggester.getName(), listener);\n            }\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            log.info(\"Registering searcher listener for suggester: \" + suggester.getName() + \" - \" + listener);\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            if (log.isInfoEnabled()) {\n              log.info(\"Registering searcher listener for suggester: {} = {}\", suggester.getName(), listener);\n            }\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing SuggestComponent\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {\n          NamedList suggesterParams = (NamedList) initParams.getVal(i);\n          SolrSuggester suggester = new SolrSuggester();\n          String dictionary = suggester.init(suggesterParams, core);\n          if (dictionary != null) {\n            boolean isDefault = dictionary.equals(DEFAULT_DICT_NAME);\n            if (isDefault && !hasDefault) {\n              hasDefault = true;\n            } else if (isDefault){\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n            suggesters.put(dictionary, suggester);\n          } else {\n            if (!hasDefault){\n              suggesters.put(DEFAULT_DICT_NAME, suggester);\n              hasDefault = true;\n            } else {\n              throw new RuntimeException(\"More than one dictionary is missing name.\");\n            }\n          }\n          boolean buildOnStartup;\n          Object buildOnStartupObj = suggesterParams.get(BUILD_ON_STARTUP_LABEL);\n          if (buildOnStartupObj == null) {\n            File storeFile = suggester.getStoreFile();\n            buildOnStartup = storeFile == null || !storeFile.exists();\n          } else {\n            buildOnStartup = Boolean.parseBoolean((String) buildOnStartupObj);\n          }\n          boolean buildOnCommit = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_COMMIT_LABEL));\n          boolean buildOnOptimize = Boolean.parseBoolean((String) suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));\n          \n          if (buildOnCommit || buildOnOptimize || buildOnStartup) {\n            SuggesterListener listener = new SuggesterListener(core, suggester, buildOnCommit, buildOnOptimize, buildOnStartup, core.isReloaded());\n            if (log.isInfoEnabled()) {\n              log.info(\"Registering searcher listener for suggester: {} = {}\", suggester.getName(), listener);\n            }\n            core.registerFirstSearcherListener(listener);\n            core.registerNewSearcherListener(listener);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"]},"commit2Childs":{"7f2e96099703c24c0c63d27806ba7020626b649b":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}