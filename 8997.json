{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator operator) {\n    DefaultOperatorAttribute attr = getQueryConfigHandler().getAttribute(DefaultOperatorAttribute.class);\n    attr.setOperator(operator);\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator operator) {\n    DefaultOperatorAttribute attr = getQueryConfigHandler().getAttribute(DefaultOperatorAttribute.class);\n    attr.setOperator(operator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":5,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(StandardQueryConfigHandler.Operator).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(StandardQueryConfigHandler.Operator operator) {\n    getQueryConfigHandler().set(ConfigurationKeys.DEFAULT_OPERATOR, operator);\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator operator) {\n    DefaultOperatorAttribute attr = getQueryConfigHandler().getAttribute(DefaultOperatorAttribute.class);\n    attr.setOperator(operator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator operator) {\n    DefaultOperatorAttribute attr = getQueryConfigHandler().getAttribute(DefaultOperatorAttribute.class);\n    attr.setOperator(operator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setDefaultOperator(Operator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser. In default mode (\n   * {@link Operator#OR}) terms without any modifiers are considered optional:\n   * for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In {@link Operator#AND} mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator operator) {\n    DefaultOperatorAttribute attr = getQueryConfigHandler().getAttribute(DefaultOperatorAttribute.class);\n    attr.setOperator(operator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}