{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVarType#addViolatingReplicas(Suggestion.ViolationCtx).mjava","sourceNew":"  public void addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void addViolatingReplicas(Suggestion.ViolationCtx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","sourceNew":"  public boolean addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public void addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","sourceNew":"  public boolean addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#addViolatingReplicas(Violation.Ctx).mjava","sourceNew":null,"sourceOld":"  public boolean addViolatingReplicas(Violation.Ctx ctx) {\n    String node = ctx.currentViolation.node;\n    for (Row row : ctx.allRows) {\n      if (node.equals(row.node)) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, String> withCollectionMap = (Map<String, String>) row.getVal(\"withCollection\");\n        if (withCollectionMap != null) {\n          row.forEachReplica(r -> {\n            String withCollection = withCollectionMap.get(r.getCollection());\n            if (withCollection != null) {\n              // test whether this row has at least 1 replica of withCollection, else there is a violation\n              Set<String> uniqueCollections = new HashSet<>();\n              row.forEachReplica(replicaInfo -> uniqueCollections.add(replicaInfo.getCollection()));\n              if (!uniqueCollections.contains(withCollection)) {\n                ctx.currentViolation.addReplica(new Violation.ReplicaInfoAndErr(r).withDelta(1.0d));\n              }\n            }\n          });\n          ctx.currentViolation.replicaCountDelta = (double) ctx.currentViolation.getViolatingReplicas().size();\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}