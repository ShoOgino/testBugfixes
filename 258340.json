{"path":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap#build(IndexReader.CacheKey,TermsEnum[],long[],float).mjava","commits":[{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap#build(IndexReader.CacheKey,TermsEnum[],long[],float).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates an ordinal map that allows mapping ords to/from a merged\n   * space from <code>subs</code>.\n   * @param owner a cache key\n   * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need\n   *             not be dense (e.g. can be FilteredTermsEnums}.\n   * @param weights a weight for each sub. This is ideally correlated with\n   *             the number of unique terms that each sub introduces compared\n   *             to the other subs\n   * @throws IOException if an I/O error occurred.\n   */\n  public static OrdinalMap build(IndexReader.CacheKey owner, TermsEnum subs[], long[] weights, float acceptableOverheadRatio) throws IOException {\n    if (subs.length != weights.length) {\n      throw new IllegalArgumentException(\"subs and weights must have the same length\");\n    }\n\n    // enums are not sorted, so let's sort to save memory\n    final SegmentMap segmentMap = new SegmentMap(weights);\n    return new OrdinalMap(owner, subs, segmentMap, acceptableOverheadRatio);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap#build(IndexReader.CacheKey,TermsEnum[],long[],float).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates an ordinal map that allows mapping ords to/from a merged\n   * space from <code>subs</code>.\n   * @param owner a cache key\n   * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need\n   *             not be dense (e.g. can be FilteredTermsEnums}.\n   * @param weights a weight for each sub. This is ideally correlated with\n   *             the number of unique terms that each sub introduces compared\n   *             to the other subs\n   * @throws IOException if an I/O error occurred.\n   */\n  public static OrdinalMap build(IndexReader.CacheKey owner, TermsEnum subs[], long[] weights, float acceptableOverheadRatio) throws IOException {\n    if (subs.length != weights.length) {\n      throw new IllegalArgumentException(\"subs and weights must have the same length\");\n    }\n\n    // enums are not sorted, so let's sort to save memory\n    final SegmentMap segmentMap = new SegmentMap(weights);\n    return new OrdinalMap(owner, subs, segmentMap, acceptableOverheadRatio);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"957c610636f393a85a38f1af670540028db13e6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","957c610636f393a85a38f1af670540028db13e6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["957c610636f393a85a38f1af670540028db13e6b"]},"commit2Childs":{"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["957c610636f393a85a38f1af670540028db13e6b","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}