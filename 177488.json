{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient(myClient);\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient(myClient);\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient(myClient);\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient(myClient);\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient(myClient);\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p>\n   *          \"host1:2181\"\n   *          <p>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   *          \n   * @deprecated use {@link Builder} instead.\n   */\n  @Deprecated\n  public CloudSolrClient(String zkHost) {\n    this.stateProvider = new ZkClientClusterStateProvider(zkHost);\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbClient = new LBHttpSolrClient.Builder()\n          .withHttpClient(myClient)\n          .build();\n      this.lbClient.setRequestWriter(new BinaryRequestWriter());\n      this.lbClient.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      this.directUpdatesToLeadersOnly = false;\n      shutdownLBHttpSolrServer = true;\n      lbClient.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"63a1978c6710c767fa084741e3d6424840003a62":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3eaeb36333664e8cb92108ef03f68a7b90beb759","63a1978c6710c767fa084741e3d6424840003a62"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["bafca15d8e408346a67f4282ad1143b88023893b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["3eaeb36333664e8cb92108ef03f68a7b90beb759","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["63a1978c6710c767fa084741e3d6424840003a62","e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"bafca15d8e408346a67f4282ad1143b88023893b":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}