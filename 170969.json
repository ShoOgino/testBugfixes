{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(6000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460e835293fb6c26202eea1ba4ac24739db1755b","date":1544540322,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(6000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0abaca9e5481b5c3660805111683e8ce53bef3","date":1544554124,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(6000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    listenerEventLatch = new CountDownLatch(1);\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction should have been init'ed w/in a reasonable amount of time\",\n               actionInitCalled.await(10, TimeUnit.SECONDS));\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    long prevTimestamp = capturedEvents.get(0).timestamp;\n\n    // reset the trigger and captured events\n    listenerEventLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(8000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    listenerEventLatch = new CountDownLatch(1);\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction was not init'ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    long prevTimestamp = capturedEvents.get(0).timestamp;\n\n    // reset the trigger and captured events\n    listenerEventLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    listenerEventLatch = new CountDownLatch(1);\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction should have been init'ed w/in a reasonable amount of time\",\n               actionInitCalled.await(10, TimeUnit.SECONDS));\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    long prevTimestamp = capturedEvents.get(0).timestamp;\n\n    // reset the trigger and captured events\n    listenerEventLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    listenerEventLatch = new CountDownLatch(1);\n    waitForSeconds = 1;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_cooldown_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_cooldown_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction was not init'ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    long prevTimestamp = capturedEvents.get(0).timestamp;\n\n    // reset the trigger and captured events\n    listenerEventLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(\"the listener didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(capturedEvents);\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"460e835293fb6c26202eea1ba4ac24739db1755b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","460e835293fb6c26202eea1ba4ac24739db1755b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"]},"commit2Childs":{"460e835293fb6c26202eea1ba4ac24739db1755b":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["460e835293fb6c26202eea1ba4ac24739db1755b","7e0abaca9e5481b5c3660805111683e8ce53bef3"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3f504512a03d978990cbff30db0522b354e846db"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}