{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null || \n              reader.getDocsWithField(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null || \n              reader.getDocsWithField(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","sourceNew":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null || \n              reader.getDocsWithField(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","sourceNew":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null || \n              reader.getDocsWithField(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReaderSanity(LeafReader).mjava","sourceNew":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  // used by TestUtil.checkReader to check some things really unrelated to the index,\n  // just looking for bugs in indexreader implementations.\n  private static void checkReaderSanity(LeafReader reader) throws IOException {\n    for (FieldInfo info : reader.getFieldInfos()) {\n      \n      // reader shouldn't return normValues if the field does not have them\n      if (!info.hasNorms()) {\n        if (reader.getNormValues(info.name) != null) {\n          throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n        }\n      }\n      \n      // reader shouldn't return docValues if the field does not have them\n      // reader shouldn't return multiple docvalues types for the same field.\n      switch(info.getDocValuesType()) {\n        case NONE:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null || \n              reader.getSortedSetDocValues(info.name) != null || \n              reader.getDocsWithField(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" has docvalues but should omit them!\");\n          }\n          break;\n        case SORTED:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case SORTED_SET:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case BINARY:\n          if (reader.getNumericDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        case NUMERIC:\n          if (reader.getBinaryDocValues(info.name) != null ||\n              reader.getSortedDocValues(info.name) != null ||\n              reader.getSortedNumericDocValues(info.name) != null ||\n              reader.getSortedSetDocValues(info.name) != null) {\n            throw new RuntimeException(info.name + \" returns multiple docvalues types!\");\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}