{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#grow().mjava","commits":[{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#grow().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#grow().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#grow().mjava","sourceNew":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","sourceOld":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ae0982c0457fa3cfe0cda93a327c573fbe6f874","date":1507039114,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#grow().mjava","sourceNew":null,"sourceOld":"  private void grow() {\n    HashArray temp = this.hashArrays[this.hashArrays.length - 1];\n\n    for (int i = this.hashArrays.length - 1; i > 0; i--) {\n      this.hashArrays[i] = this.hashArrays[i - 1];\n    }\n\n    this.capacity *= 2;\n    this.hashArrays[0] = new HashArray(this.capacity);\n\n    for (int i = 1; i < this.hashArrays.length; i++) {\n      int[] sourceOffsetArray = this.hashArrays[i].offsets;\n      int[] sourceCidsArray = this.hashArrays[i].cids;\n\n      for (int k = 0; k < sourceOffsetArray.length; k++) {\n\n        for (int j = 0; j < i && sourceOffsetArray[k] != 0; j++) {\n          int[] targetOffsetArray = this.hashArrays[j].offsets;\n          int[] targetCidsArray = this.hashArrays[j].cids;\n\n          int newIndex = indexFor(stringHashCode(\n              this.labelRepository, sourceOffsetArray[k]),\n              targetOffsetArray.length);\n          if (targetOffsetArray[newIndex] == 0) {\n            targetOffsetArray[newIndex] = sourceOffsetArray[k];\n            targetCidsArray[newIndex] = sourceCidsArray[k];\n            sourceOffsetArray[k] = 0;\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i < temp.offsets.length; i++) {\n      int offset = temp.offsets[i];\n      if (offset > 0) {\n        int hash = stringHashCode(this.labelRepository, offset);\n        addLabelOffset(hash, temp.cids[i], offset);\n      }\n    }\n\n    CollisionMap oldCollisionMap = this.collisionMap;\n    this.collisionMap = new CollisionMap(oldCollisionMap.capacity(),\n        this.labelRepository);\n    this.threshold = (int) (this.capacity * this.loadFactor);\n\n    Iterator<CollisionMap.Entry> it = oldCollisionMap.entryIterator();\n    while (it.hasNext()) {\n      CollisionMap.Entry e = it.next();\n      addLabelOffset(stringHashCode(this.labelRepository, e.offset),\n          e.cid, e.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"]},"commit2Childs":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}