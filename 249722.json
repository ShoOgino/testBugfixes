{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#getInstance(SolrResourceLoader,String,String,List[Feature],List[Normalizer],String,List[Feature],Map[String,Object]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#getInstance(SolrResourceLoader,String,String,List[Feature],List[Normalizer],String,List[Feature],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static LTRScoringModel getInstance(SolrResourceLoader solrResourceLoader,\n      String className, String name, List<Feature> features,\n      List<Normalizer> norms,\n      String featureStoreName, List<Feature> allFeatures,\n      Map<String,Object> params) throws ModelException {\n    final LTRScoringModel model;\n    try {\n      // create an instance of the model\n      model = solrResourceLoader.newInstance(\n          className,\n          LTRScoringModel.class,\n          new String[0], // no sub packages\n          new Class[] { String.class, List.class, List.class, String.class, List.class, Map.class },\n          new Object[] { name, features, norms, featureStoreName, allFeatures, params });\n      if (params != null) {\n        SolrPluginUtils.invokeSetters(model, params.entrySet());\n      }\n    } catch (final Exception e) {\n      throw new ModelException(\"Model type does not exist \" + className, e);\n    }\n    model.validate();\n    return model;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#getInstance(SolrResourceLoader,String,String,List[Feature],List[Normalizer],String,List[Feature],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static LTRScoringModel getInstance(SolrResourceLoader solrResourceLoader,\n      String className, String name, List<Feature> features,\n      List<Normalizer> norms,\n      String featureStoreName, List<Feature> allFeatures,\n      Map<String,Object> params) throws ModelException {\n    final LTRScoringModel model;\n    try {\n      // create an instance of the model\n      model = solrResourceLoader.newInstance(\n          className,\n          LTRScoringModel.class,\n          new String[0], // no sub packages\n          new Class[] { String.class, List.class, List.class, String.class, List.class, Map.class },\n          new Object[] { name, features, norms, featureStoreName, allFeatures, params });\n      if (params != null) {\n        SolrPluginUtils.invokeSetters(model, params.entrySet());\n      }\n    } catch (final Exception e) {\n      throw new ModelException(\"Model type does not exist \" + className, e);\n    }\n    model.validate();\n    return model;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#getInstance(SolrResourceLoader,String,String,List[Feature],List[Normalizer],String,List[Feature],Map[String,Object]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#getInstance(SolrResourceLoader,String,String,List[Feature],List[Normalizer],String,List[Feature],Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static LTRScoringModel getInstance(SolrResourceLoader solrResourceLoader,\n      String className, String name, List<Feature> features,\n      List<Normalizer> norms,\n      String featureStoreName, List<Feature> allFeatures,\n      Map<String,Object> params) throws ModelException {\n    final LTRScoringModel model;\n    try {\n      // create an instance of the model\n      model = solrResourceLoader.newInstance(\n          className,\n          LTRScoringModel.class,\n          new String[0], // no sub packages\n          new Class[] { String.class, List.class, List.class, String.class, List.class, Map.class },\n          new Object[] { name, features, norms, featureStoreName, allFeatures, params });\n      if (params != null) {\n        SolrPluginUtils.invokeSetters(model, params.entrySet());\n      }\n    } catch (final Exception e) {\n      throw new ModelException(\"Model type does not exist \" + className, e);\n    }\n    model.validate();\n    return model;\n  }\n\n","sourceOld":"  public static LTRScoringModel getInstance(SolrResourceLoader solrResourceLoader,\n      String className, String name, List<Feature> features,\n      List<Normalizer> norms,\n      String featureStoreName, List<Feature> allFeatures,\n      Map<String,Object> params) throws ModelException {\n    final LTRScoringModel model;\n    try {\n      // create an instance of the model\n      model = solrResourceLoader.newInstance(\n          className,\n          LTRScoringModel.class,\n          new String[0], // no sub packages\n          new Class[] { String.class, List.class, List.class, String.class, List.class, Map.class },\n          new Object[] { name, features, norms, featureStoreName, allFeatures, params });\n      if (params != null) {\n        SolrPluginUtils.invokeSetters(model, params.entrySet());\n      }\n    } catch (final Exception e) {\n      throw new ModelException(\"Model type does not exist \" + className, e);\n    }\n    model.validate();\n    return model;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}