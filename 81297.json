{"path":"src/java/org/apache/solr/handler/admin/PluginInfoHandler#getSolrInfoBeans(boolean).mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/PluginInfoHandler#getSolrInfoBeans(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getSolrInfoBeans( boolean stats )\n  {\n    SimpleOrderedMap<Object> list = new SimpleOrderedMap<Object>();\n    for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) \n    {\n      SimpleOrderedMap<Object> category = new SimpleOrderedMap<Object>();\n      list.add( cat.name(), category );\n      Map<String, SolrInfoMBean> reg = SolrInfoRegistry.getRegistry();\n      synchronized(reg) {\n        for (Map.Entry<String,SolrInfoMBean> entry : reg.entrySet()) {\n          SolrInfoMBean m = entry.getValue();\n          if (m.getCategory() != cat) continue;\n      \n          String na = \"Not Declared\";\n          SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n          category.add( entry.getKey(), info );\n          \n          info.add( \"name\",        (m.getName()       !=null ? m.getName()        : na) );\n          info.add( \"version\",     (m.getVersion()    !=null ? m.getVersion()     : na) );\n          info.add( \"description\", (m.getDescription()!=null ? m.getDescription() : na) );\n          \n          info.add( \"sourceId\",    (m.getSourceId()   !=null ? m.getSourceId()    : na) );\n          info.add( \"source\",      (m.getSource()     !=null ? m.getSource()      : na) );\n        \n          URL[] urls = m.getDocs();\n          if ((urls != null) && (urls.length > 0)) {\n            ArrayList<String> docs = new ArrayList<String>(urls.length);\n            for( URL u : urls ) {\n              docs.add( u.toExternalForm() );\n            }\n            info.add( \"docs\", docs );\n          }\n        \n          if( stats ) {\n            info.add( \"stats\", m.getStatistics() );\n          }\n        }\n      }  \n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fdf17f8627d28530569cf25c837b5735ba719740"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/PluginInfoHandler#getSolrInfoBeans(SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/admin/PluginInfoHandler#getSolrInfoBeans(boolean).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getSolrInfoBeans( SolrCore core, boolean stats )\n  {\n    SimpleOrderedMap<Object> list = new SimpleOrderedMap<Object>();\n    for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) \n    {\n      SimpleOrderedMap<Object> category = new SimpleOrderedMap<Object>();\n      list.add( cat.name(), category );\n      Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n      synchronized(reg) {\n        for (Map.Entry<String,SolrInfoMBean> entry : reg.entrySet()) {\n          SolrInfoMBean m = entry.getValue();\n          if (m.getCategory() != cat) continue;\n      \n          String na = \"Not Declared\";\n          SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n          category.add( entry.getKey(), info );\n          \n          info.add( \"name\",        (m.getName()       !=null ? m.getName()        : na) );\n          info.add( \"version\",     (m.getVersion()    !=null ? m.getVersion()     : na) );\n          info.add( \"description\", (m.getDescription()!=null ? m.getDescription() : na) );\n          \n          info.add( \"sourceId\",    (m.getSourceId()   !=null ? m.getSourceId()    : na) );\n          info.add( \"source\",      (m.getSource()     !=null ? m.getSource()      : na) );\n        \n          URL[] urls = m.getDocs();\n          if ((urls != null) && (urls.length > 0)) {\n            ArrayList<String> docs = new ArrayList<String>(urls.length);\n            for( URL u : urls ) {\n              docs.add( u.toExternalForm() );\n            }\n            info.add( \"docs\", docs );\n          }\n        \n          if( stats ) {\n            info.add( \"stats\", m.getStatistics() );\n          }\n        }\n      }  \n    }\n    return list;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getSolrInfoBeans( boolean stats )\n  {\n    SimpleOrderedMap<Object> list = new SimpleOrderedMap<Object>();\n    for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) \n    {\n      SimpleOrderedMap<Object> category = new SimpleOrderedMap<Object>();\n      list.add( cat.name(), category );\n      Map<String, SolrInfoMBean> reg = SolrInfoRegistry.getRegistry();\n      synchronized(reg) {\n        for (Map.Entry<String,SolrInfoMBean> entry : reg.entrySet()) {\n          SolrInfoMBean m = entry.getValue();\n          if (m.getCategory() != cat) continue;\n      \n          String na = \"Not Declared\";\n          SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n          category.add( entry.getKey(), info );\n          \n          info.add( \"name\",        (m.getName()       !=null ? m.getName()        : na) );\n          info.add( \"version\",     (m.getVersion()    !=null ? m.getVersion()     : na) );\n          info.add( \"description\", (m.getDescription()!=null ? m.getDescription() : na) );\n          \n          info.add( \"sourceId\",    (m.getSourceId()   !=null ? m.getSourceId()    : na) );\n          info.add( \"source\",      (m.getSource()     !=null ? m.getSource()      : na) );\n        \n          URL[] urls = m.getDocs();\n          if ((urls != null) && (urls.length > 0)) {\n            ArrayList<String> docs = new ArrayList<String>(urls.length);\n            for( URL u : urls ) {\n              docs.add( u.toExternalForm() );\n            }\n            info.add( \"docs\", docs );\n          }\n        \n          if( stats ) {\n            info.add( \"stats\", m.getStatistics() );\n          }\n        }\n      }  \n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["2070bf73ffa1039a505000f99ea245884ff19e11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d6338c87060be5f66757a94945975f3bbd377a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}