{"path":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","sourceNew":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","sourceNew":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","sourceNew":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(LeafReader).mjava","sourceNew":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** \n   * Returns a TermsEnum that implements ord, or null if no terms in field.\n   * <p>\n   *  we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   * </p>\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class \n   */\n  public TermsEnum getOrdTermsEnum(LeafReader reader) throws IOException {\n    // NOTE: see LUCENE-6529 before attempting to optimize this method to\n    // return a TermsEnum directly from the reader if it already supports ord().\n\n    assert null != indexedTermsArray;\n    \n    if (0 == indexedTermsArray.length) {\n      return null;\n    } else {\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}