{"path":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","commits":[{"id":"c6d82c04c0bc088fae82f28ef47cb25a164f47fd","date":1422552161,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","pathOld":"/dev/null","sourceNew":"  static boolean checkIfTimedout(final Configuration conf, final long recoveryTimeout,\n      final int nbAttempt, final Path p, final long startWaiting) {\n    if (recoveryTimeout < System.nanoTime()) {\n      log.warn(\"Cannot recoverLease after trying for \" +\n        conf.getInt(\"solr.hdfs.lease.recovery.timeout\", 900000) +\n        \"ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","sourceNew":"  static boolean checkIfTimedout(final Configuration conf, final long recoveryTimeout,\n      final int nbAttempt, final Path p, final long startWaiting) {\n    if (recoveryTimeout < System.nanoTime()) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Cannot recoverLease after trying for \" +\n            conf.getInt(\"solr.hdfs.lease.recovery.timeout\", 900000) +\n            \"ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; \" +\n            getLogMessageDetail(nbAttempt, p, startWaiting));\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  static boolean checkIfTimedout(final Configuration conf, final long recoveryTimeout,\n      final int nbAttempt, final Path p, final long startWaiting) {\n    if (recoveryTimeout < System.nanoTime()) {\n      log.warn(\"Cannot recoverLease after trying for \" +\n        conf.getInt(\"solr.hdfs.lease.recovery.timeout\", 900000) +\n        \"ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#checkIfTimedout(Configuration,long,int,Path,long).mjava","sourceNew":"  static boolean checkIfTimedout(final Configuration conf, final long recoveryTimeout,\n      final int nbAttempt, final Path p, final long startWaiting) {\n    if (recoveryTimeout < System.nanoTime()) {\n      log.warn(\"Cannot recoverLease after trying for {}ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; {}\"\n          , conf.getInt(\"solr.hdfs.lease.recovery.timeout\", 900000)\n          , getLogMessageDetail(nbAttempt, p, startWaiting));\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  static boolean checkIfTimedout(final Configuration conf, final long recoveryTimeout,\n      final int nbAttempt, final Path p, final long startWaiting) {\n    if (recoveryTimeout < System.nanoTime()) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Cannot recoverLease after trying for \" +\n            conf.getInt(\"solr.hdfs.lease.recovery.timeout\", 900000) +\n            \"ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; \" +\n            getLogMessageDetail(nbAttempt, p, startWaiting));\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["c6d82c04c0bc088fae82f28ef47cb25a164f47fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c6d82c04c0bc088fae82f28ef47cb25a164f47fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d82c04c0bc088fae82f28ef47cb25a164f47fd"],"c6d82c04c0bc088fae82f28ef47cb25a164f47fd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}