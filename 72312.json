{"path":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMatching().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMatching().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testMatching().mjava","sourceNew":"  public void testMatching() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","sourceOld":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMatching().mjava","sourceNew":null,"sourceOld":"  public void testMatching() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}