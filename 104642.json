{"path":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","commits":[{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,Filter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    int maxDoc = searcher.maxDoc();\n    long[] bits = termAllGroupHeadsCollector.retrieveGroupHeads(maxDoc).getBits();\n    return new BitDocSet(new OpenBitSet(bits, bits.length));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, luceneFilter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    int maxDoc = searcher.maxDoc();\n    long[] bits = termAllGroupHeadsCollector.retrieveGroupHeads(maxDoc).getBits();\n    return new BitDocSet(new OpenBitSet(bits, bits.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    int maxDoc = searcher.maxDoc();\n    long[] bits = termAllGroupHeadsCollector.retrieveGroupHeads(maxDoc).getBits();\n    return new BitDocSet(new OpenBitSet(bits, bits.length));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(termAllGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    int maxDoc = searcher.maxDoc();\n    long[] bits = termAllGroupHeadsCollector.retrieveGroupHeads(maxDoc).getBits();\n    return new BitDocSet(new OpenBitSet(bits, bits.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aec1849055a2ada9ab66fe871645565085cd5462","date":1400041327,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap<Object,Object>(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(termAllGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap<Object,Object>(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(termAllGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap<Object,Object>(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    AbstractAllGroupHeadsCollector termAllGroupHeadsCollector =\n        TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, termAllGroupHeadsCollector);\n    } else {\n      collectors.add(termAllGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(termAllGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap<Object,Object>(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AbstractAllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94a2f0740fa3e6af59f239fb06573aafd52cbfc","date":1491306729,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = AllGroupHeadsCollector.newCollector(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector\n          = AllGroupHeadsCollector.newCollector(new TermGroupSelector(firstCommand.getKey()), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = AllGroupHeadsCollector.newCollector(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector\n          = AllGroupHeadsCollector.newCollector(new TermGroupSelector(firstCommand.getKey()), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = new FunctionAllGroupHeadsCollector(vs, new HashMap(), firstCommand.getSortWithinGroup());\n    } else {\n      allGroupHeadsCollector = TermAllGroupHeadsCollector.create(firstCommand.getKey(), firstCommand.getSortWithinGroup());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeGroupedDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = AllGroupHeadsCollector.newCollector(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector\n          = AllGroupHeadsCollector.newCollector(new TermGroupSelector(firstCommand.getKey()), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","sourceOld":"  private DocSet computeGroupedDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    Command firstCommand = commands.get(0);\n    String field = firstCommand.getKey();\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType fieldType = sf.getType();\n    \n    final AllGroupHeadsCollector allGroupHeadsCollector;\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(sf, null);\n      allGroupHeadsCollector = AllGroupHeadsCollector.newCollector(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          firstCommand.getWithinGroupSort());\n    } else {\n      allGroupHeadsCollector\n          = AllGroupHeadsCollector.newCollector(new TermGroupSelector(firstCommand.getKey()), firstCommand.getWithinGroupSort());\n    }\n    if (collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, allGroupHeadsCollector);\n    } else {\n      collectors.add(allGroupHeadsCollector);\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()])));\n    }\n\n    return new BitDocSet(allGroupHeadsCollector.retrieveGroupHeads(searcher.maxDoc()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"aec1849055a2ada9ab66fe871645565085cd5462":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"20e94e61fe5291647346b70437617e6b6c370408":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f8247163846f78e14d325499507cc0a7d5821e2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","20e94e61fe5291647346b70437617e6b6c370408"],"2f8247163846f78e14d325499507cc0a7d5821e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["20e94e61fe5291647346b70437617e6b6c370408"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["7ae958a739da1866696f442384393ba2f13e33e5"],"d94a2f0740fa3e6af59f239fb06573aafd52cbfc":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["2f8247163846f78e14d325499507cc0a7d5821e2"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","aec1849055a2ada9ab66fe871645565085cd5462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"7ae958a739da1866696f442384393ba2f13e33e5":["d94a2f0740fa3e6af59f239fb06573aafd52cbfc"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"aec1849055a2ada9ab66fe871645565085cd5462":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","3d81baa64023bbb9b43f6d929ee168b105940d30"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"2f8247163846f78e14d325499507cc0a7d5821e2":["407687e67faf6e1f02a211ca078d8e3eed631027","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d94a2f0740fa3e6af59f239fb06573aafd52cbfc"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["aec1849055a2ada9ab66fe871645565085cd5462","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94a2f0740fa3e6af59f239fb06573aafd52cbfc":["7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"7ae958a739da1866696f442384393ba2f13e33e5":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","407687e67faf6e1f02a211ca078d8e3eed631027","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}