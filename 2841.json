{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String).mjava","commits":[{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        httpPost.addHeader(new BasicHeader(\"user\", username));\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      log.info(\"Uploading configset with user {}\", username);\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0709b256ed89906e7b5f558ba1a675826f0a858f","date":1600796219,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        httpPost.addHeader(new BasicHeader(\"user\", username));\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      log.info(\"Uploading configset with user {}\", username);\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        httpPost.addHeader(new BasicHeader(\"user\", username));\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      log.info(\"Uploading configset with user {}\", username);\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0709b256ed89906e7b5f558ba1a675826f0a858f":["c7612891097d4751617c396cdd7a092833799147"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0709b256ed89906e7b5f558ba1a675826f0a858f"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7612891097d4751617c396cdd7a092833799147"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}