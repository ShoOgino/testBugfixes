{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}