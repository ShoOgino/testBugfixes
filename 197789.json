{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#getResponse(InputStream).mjava","commits":[{"id":"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac","date":1452194543,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#getResponse(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  String getResponse(InputStream is) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    byte[] buf = new byte[100000];\n    for (;;) {\n      int n = 0;\n      try {\n         n = is.read(buf);\n      } catch (IOException e) {\n        // a real HTTP client probably wouldn't try to read past the end and would thus\n        // not get an exception until the *next* http request.\n        log.error(\"CAUGHT IOException, but already read \" + sb.length() + \" : \" + getChain(e));\n      }\n      if (n <= 0) break;\n      sb.append(new String(buf, 0, n, StandardCharsets.UTF_8));\n      log.info(\"BUFFER=\" + sb.toString());\n      break;  // for now, assume we got whole response in one read... otherwise we could block when trying to read again\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#getResponse(InputStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#getResponse(InputStream).mjava","sourceNew":"  String getResponse(InputStream is) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    byte[] buf = new byte[100000];\n    for (;;) {\n      int n = 0;\n      try {\n         n = is.read(buf);\n      } catch (IOException e) {\n        // a real HTTP client probably wouldn't try to read past the end and would thus\n        // not get an exception until the *next* http request.\n        log.error(\"CAUGHT IOException, but already read {} : {}\", sb.length(), getChain(e));\n      }\n      if (n <= 0) break;\n      sb.append(new String(buf, 0, n, StandardCharsets.UTF_8));\n      log.info(\"BUFFER={}\", sb);\n      break;  // for now, assume we got whole response in one read... otherwise we could block when trying to read again\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  String getResponse(InputStream is) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    byte[] buf = new byte[100000];\n    for (;;) {\n      int n = 0;\n      try {\n         n = is.read(buf);\n      } catch (IOException e) {\n        // a real HTTP client probably wouldn't try to read past the end and would thus\n        // not get an exception until the *next* http request.\n        log.error(\"CAUGHT IOException, but already read \" + sb.length() + \" : \" + getChain(e));\n      }\n      if (n <= 0) break;\n      sb.append(new String(buf, 0, n, StandardCharsets.UTF_8));\n      log.info(\"BUFFER=\" + sb.toString());\n      break;  // for now, assume we got whole response in one read... otherwise we could block when trying to read again\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}