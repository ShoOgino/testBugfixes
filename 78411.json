{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length() == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.charsNeededForFullPath());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current.trim(1);\n    } while (!pathPolicy.shouldAdd(current) && current.length() > 0);\n    isParent = true;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current = current.subpath(current.length - 1);\n    } while (!pathPolicy.shouldAdd(current) && current.length > 0);\n    isParent = true;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length() == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.charsNeededForFullPath());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current.trim(1);\n    } while (!pathPolicy.shouldAdd(current) && current.length() > 0);\n    isParent = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current = current.subpath(current.length - 1);\n    } while (!pathPolicy.shouldAdd(current) && current.length > 0);\n    isParent = true;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    current = current.subpath(current.length - 1);\n    isParent = true;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current = current.subpath(current.length - 1);\n    } while (!pathPolicy.shouldAdd(current) && current.length > 0);\n    isParent = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    current = current.subpath(current.length - 1);\n    isParent = true;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    do {\n      // skip all parent categories which are not accepted by PathPolicy\n      current = current.subpath(current.length - 1);\n    } while (!pathPolicy.shouldAdd(current) && current.length > 0);\n    isParent = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    current = current.subpath(current.length - 1);\n    isParent = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/DrillDownStream#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (current.length == 0) {\n      if (!categories.hasNext()) {\n        return false; // no more categories\n      }\n      current = categories.next();\n      termAttribute.resizeBuffer(current.fullPathLength());\n      isParent = false;\n    }\n\n    // copy current as drill-down term (it's either the leaf node or PathPolicy\n    // accepted it.\n    int nChars = indexingParams.drillDownTermText(current, termAttribute.buffer());\n    termAttribute.setLength(nChars);\n    addAdditionalAttributes(current, isParent);\n    \n    // prepare current for next call by trimming the last component (parents)\n    current = current.subpath(current.length - 1);\n    isParent = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["66644845192a1c92d87d5324cc0b5af16ad31b42","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}