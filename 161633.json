{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","commits":[{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(GeneralField).mjava","sourceNew":"  @Override\n  public Object toObject(StorableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(GeneralField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","sourceNew":"  @Override\n  public Object toObject(StorableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#toObject(StorableField).mjava","sourceNew":"  @Override\n  public Object toObject(IndexableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object toObject(StorableField f) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytes = f.binaryValue();\n      if (bytes==null) return badFieldString(f);\n      switch (type) {\n        case INTEGER:\n          return toInt(bytes.bytes, bytes.offset);\n        case FLOAT:\n          return Float.intBitsToFloat(toInt(bytes.bytes, bytes.offset));\n        case LONG:\n          return toLong(bytes.bytes, bytes.offset);\n        case DOUBLE:\n          return Double.longBitsToDouble(toLong(bytes.bytes, bytes.offset));\n        case DATE:\n          return new Date(toLong(bytes.bytes, bytes.offset));\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","409324b31a1419d7c05a38211168cf317e39be77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}