{"path":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","commits":[{"id":"e789a6ee3a5fa41394cbed2293ff68c3712c32a9","date":1283533946,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","pathOld":"/dev/null","sourceNew":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","pathOld":"/dev/null","sourceNew":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","pathOld":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","sourceNew":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","pathOld":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","sourceNew":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","pathOld":"solr/src/java/org/apache/solr/util/LongPriorityQueue#upHeap().mjava","sourceNew":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":"  private void upHeap() {\n    int i = size;\n    long node = heap[i];\t\t\t  // save bottom node\n    int j = i >>> 1;\n    while (j > 0 && node < heap[j]) {\n      heap[i] = heap[j];\t\t\t  // shift parents down\n      i = j;\n      j = j >>> 1;\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e789a6ee3a5fa41394cbed2293ff68c3712c32a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9"],"c26f00b574427b55127e869b935845554afde1fa":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e789a6ee3a5fa41394cbed2293ff68c3712c32a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e789a6ee3a5fa41394cbed2293ff68c3712c32a9":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}