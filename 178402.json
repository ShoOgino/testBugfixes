{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","commits":[{"id":"ea32f6d2e2c9c129b68b8e35c8276025343e1c48","date":1533140931,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldName, DocValuesType dvType) {\n    for (SortField sortField : indexSort.getSort()) {\n      if (sortField.getField().equals(fieldName)) {\n        switch (dvType) {\n          case NUMERIC:\n            if (sortField.getType().equals(SortField.Type.INT) == false &&\n                  sortField.getType().equals(SortField.Type.LONG) == false &&\n                  sortField.getType().equals(SortField.Type.FLOAT) == false &&\n                  sortField.getType().equals(SortField.Type.DOUBLE) == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case BINARY:\n            throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n\n          case SORTED:\n            if (sortField.getType().equals(SortField.Type.STRING) == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case SORTED_NUMERIC:\n            if (sortField instanceof SortedNumericSortField == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case SORTED_SET:\n            if (sortField instanceof SortedSetSortField == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          default:\n            throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","sourceOld":"  private void validateIndexSortDVType(Sort indexSort, String fieldName, DocValuesType dvType) {\n    for (SortField sortField : indexSort.getSort()) {\n      if (sortField.getField().equals(fieldName)) {\n        switch (dvType) {\n          case NUMERIC:\n            if (sortField.getType().equals(SortField.Type.INT) == false &&\n                  sortField.getType().equals(SortField.Type.LONG) == false &&\n                  sortField.getType().equals(SortField.Type.FLOAT) == false &&\n                  sortField.getType().equals(SortField.Type.DOUBLE) == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case BINARY:\n            throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n\n          case SORTED:\n            if (sortField.getType().equals(SortField.Type.STRING) == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case SORTED_NUMERIC:\n            if (sortField instanceof SortedNumericSortField == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          case SORTED_SET:\n            if (sortField instanceof SortedSetSortField == false) {\n              throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n            }\n            break;\n\n          default:\n            throw new IllegalArgumentException(\"invalid doc value type:\" + dvType + \" for sortField:\" + sortField);\n        }\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","sourceOld":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":5,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","sourceOld":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["773bf150032d3ef6c95997a154fb914b82875cb8","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["773bf150032d3ef6c95997a154fb914b82875cb8"],"773bf150032d3ef6c95997a154fb914b82875cb8":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"773bf150032d3ef6c95997a154fb914b82875cb8":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}