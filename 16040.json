{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard, \"|\", true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"241163c8f5d129a8327eb3950d20bb4f065b8a14","date":1363612901,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard, \"|\", true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b92ffe30c50bb08699200b62c40420378ac3df","date":1423881454,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(ShardRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(ShardRequest sreq, String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      preferCurrentHostForDistributedReq(sreq, urls);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.makeURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304ef848381e39ff6cf3e7af6127733a6f4db389","date":1482353305,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String,String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard, String preferredHostAddress) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      if (preferredHostAddress != null && urls.size() > 1) {\n        preferCurrentHostForDistributedReq(preferredHostAddress, urls);\n      }\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"/dev/null","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df9c9814bf0485db9001f5d37a2528bfc5f1970","date":1591077658,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardRequestor#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandler.httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardRequestor#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls == null) {\n      urls = httpShardHandler.httpShardHandlerFactory.buildURLList(shard);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["6df9c9814bf0485db9001f5d37a2528bfc5f1970"],"51b92ffe30c50bb08699200b62c40420378ac3df":["241163c8f5d129a8327eb3950d20bb4f065b8a14"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"241163c8f5d129a8327eb3950d20bb4f065b8a14":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"6df9c9814bf0485db9001f5d37a2528bfc5f1970":["304ef848381e39ff6cf3e7af6127733a6f4db389"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["51b92ffe30c50bb08699200b62c40420378ac3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["51b92ffe30c50bb08699200b62c40420378ac3df","304ef848381e39ff6cf3e7af6127733a6f4db389"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51b92ffe30c50bb08699200b62c40420378ac3df":["304ef848381e39ff6cf3e7af6127733a6f4db389","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["241163c8f5d129a8327eb3950d20bb4f065b8a14"],"c26f00b574427b55127e869b935845554afde1fa":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"241163c8f5d129a8327eb3950d20bb4f065b8a14":["51b92ffe30c50bb08699200b62c40420378ac3df"],"6df9c9814bf0485db9001f5d37a2528bfc5f1970":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"304ef848381e39ff6cf3e7af6127733a6f4db389":["6df9c9814bf0485db9001f5d37a2528bfc5f1970","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}