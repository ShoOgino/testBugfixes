{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}