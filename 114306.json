{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      SparseDISI.writeBitSet(values, maxDoc, data);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feec55b6e9aaab41be57a5001b31fa14c3925ae4","date":1476170434,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      SparseDISI.writeBitSet(values, maxDoc, data);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = normsProducer.getNorms(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["feec55b6e9aaab41be57a5001b31fa14c3925ae4","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}