{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","commits":[{"id":"bac376b231e863caf32616640dab691c011a72a3","date":1516206557,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687","date":1546536444,"type":4,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bac376b231e863caf32616640dab691c011a72a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bac376b231e863caf32616640dab691c011a72a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","bac376b231e863caf32616640dab691c011a72a3"],"bac376b231e863caf32616640dab691c011a72a3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}