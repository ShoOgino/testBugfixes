{"path":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass());\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["135617f99f71cb15d4edaaf67b7002daebfa2cd2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135617f99f71cb15d4edaaf67b7002daebfa2cd2","date":1208349515,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass());\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      SolrServer client = new CommonsHttpSolrServer(\"http://333.333.333.333:8080/solr/\");\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["135617f99f71cb15d4edaaf67b7002daebfa2cd2"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135617f99f71cb15d4edaaf67b7002daebfa2cd2":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["135617f99f71cb15d4edaaf67b7002daebfa2cd2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135617f99f71cb15d4edaaf67b7002daebfa2cd2":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}