{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#doTokenize(int,char[],int,int,boolean).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#doTokenize(int,char[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tokenize input sentence.\n   * @param offset offset of sentence in original input text\n   * @param sentence sentence to tokenize\n   * @return list of Token\n   */\n  public List<Token> doTokenize(int offset, char[] sentence, int sentenceOffset, int sentenceLength, boolean discardPunctuation) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    \n    ViterbiNode[][][] lattice;\n    try {\n      lattice = viterbi.build(sentence, sentenceOffset, sentenceLength);\n    } catch (IOException impossible) {\n      throw new RuntimeException(impossible);\n    }\n    List<ViterbiNode> bestPath = viterbi.search(lattice);\n    for (ViterbiNode node : bestPath) {\n      int wordId = node.getWordId();\n      if (node.getType() == Type.KNOWN && wordId == -1){ // Do not include BOS/EOS \n        continue;\n      } else if (discardPunctuation && node.getLength() > 0 && isPunctuation(node.getSurfaceForm()[node.getOffset()])) {\n        continue; // Do not emit punctuation\n      }\n      Token token = new Token(wordId, node.getSurfaceForm(), node.getOffset(), node.getLength(), node.getType(), offset + node.getStartIndex(), dictionaryMap.get(node.getType()));\t// Pass different dictionary based on the type of node\n      result.add(token);\n    }\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":4,"author":"Christian Moen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#doTokenize(int,char[],int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tokenize input sentence.\n   * @param offset offset of sentence in original input text\n   * @param sentence sentence to tokenize\n   * @return list of Token\n   */\n  public List<Token> doTokenize(int offset, char[] sentence, int sentenceOffset, int sentenceLength, boolean discardPunctuation) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    \n    ViterbiNode[][][] lattice;\n    try {\n      lattice = viterbi.build(sentence, sentenceOffset, sentenceLength);\n    } catch (IOException impossible) {\n      throw new RuntimeException(impossible);\n    }\n    List<ViterbiNode> bestPath = viterbi.search(lattice);\n    for (ViterbiNode node : bestPath) {\n      int wordId = node.getWordId();\n      if (node.getType() == Type.KNOWN && wordId == -1){ // Do not include BOS/EOS \n        continue;\n      } else if (discardPunctuation && node.getLength() > 0 && isPunctuation(node.getSurfaceForm()[node.getOffset()])) {\n        continue; // Do not emit punctuation\n      }\n      Token token = new Token(wordId, node.getSurfaceForm(), node.getOffset(), node.getLength(), node.getType(), offset + node.getStartIndex(), dictionaryMap.get(node.getType()));\t// Pass different dictionary based on the type of node\n      result.add(token);\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#doTokenize(int,char[],int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tokenize input sentence.\n   * @param offset offset of sentence in original input text\n   * @param sentence sentence to tokenize\n   * @return list of Token\n   */\n  public List<Token> doTokenize(int offset, char[] sentence, int sentenceOffset, int sentenceLength, boolean discardPunctuation) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    \n    ViterbiNode[][][] lattice;\n    try {\n      lattice = viterbi.build(sentence, sentenceOffset, sentenceLength);\n    } catch (IOException impossible) {\n      throw new RuntimeException(impossible);\n    }\n    List<ViterbiNode> bestPath = viterbi.search(lattice);\n    for (ViterbiNode node : bestPath) {\n      int wordId = node.getWordId();\n      if (node.getType() == Type.KNOWN && wordId == -1){ // Do not include BOS/EOS \n        continue;\n      } else if (discardPunctuation && node.getLength() > 0 && isPunctuation(node.getSurfaceForm()[node.getOffset()])) {\n        continue; // Do not emit punctuation\n      }\n      Token token = new Token(wordId, node.getSurfaceForm(), node.getOffset(), node.getLength(), node.getType(), offset + node.getStartIndex(), dictionaryMap.get(node.getType()));\t// Pass different dictionary based on the type of node\n      result.add(token);\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0984ad47974c2d5d354519ddb2aa8358973a6271"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}