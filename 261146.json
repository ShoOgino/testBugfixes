{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        if (extent >= Math.PI)\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea1a3e0b93787916a1002c2be9f1043b6575ea69","date":1429103360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            if (topLat == bottomLat)\n                return new GeoDegenerateLatitudeZone(topLat);\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (leftLon == rightLon)\n            return new GeoDegenerateLongitudeSlice(leftLon);\n\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          \n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        if (leftLon == rightLon) {\n          if (topLat == bottomLat)\n            return new GeoDegeneratePoint(topLat, leftLon);\n          return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n        }\n        if (extent >= Math.PI) {\n          if (topLat == bottomLat) {\n            return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n          }\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        }\n        if (topLat == bottomLat)\n          return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","sourceOld":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        if (extent >= Math.PI)\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            if (topLat == bottomLat) {\n                if (topLat == Math.PI * 0.5 || topLat == -Math.PI * 0.5)\n                    return new GeoDegeneratePoint(topLat,0.0);\n                return new GeoDegenerateLatitudeZone(topLat);\n            }\n            if (topLat == Math.PI * 0.5)\n                return new GeoNorthLatitudeZone(bottomLat);\n            else if (bottomLat == -Math.PI * 0.5)\n                return new GeoSouthLatitudeZone(topLat);\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        //System.err.println(\" not latitude zone\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (leftLon == rightLon)\n            return new GeoDegenerateLongitudeSlice(leftLon);\n\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          \n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        //System.err.println(\" not longitude slice\");\n        if (leftLon == rightLon) {\n          if (topLat == bottomLat)\n            return new GeoDegeneratePoint(topLat, leftLon);\n          return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n        }\n        //System.err.println(\" not vertical line\");\n        if (extent >= Math.PI) {\n          if (topLat == bottomLat) {\n            //System.err.println(\" wide degenerate line\");\n            return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n          }\n          if (topLat == Math.PI * 0.5) {\n            return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n          } else if (bottomLat == -Math.PI * 0.5) {\n            return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n          }\n          //System.err.println(\" wide rect\");\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        }\n        if (topLat == bottomLat) {\n          //System.err.println(\" horizontal line\");\n          return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n        }\n        if (topLat == Math.PI * 0.5) {\n            return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n        } else if (bottomLat == -Math.PI * 0.5) {\n            return new GeoSouthRectangle(topLat, leftLon, rightLon);\n        }\n        //System.err.println(\" rectangle\");\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","sourceOld":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            if (topLat == bottomLat)\n                return new GeoDegenerateLatitudeZone(topLat);\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (leftLon == rightLon)\n            return new GeoDegenerateLongitudeSlice(leftLon);\n\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          \n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        if (leftLon == rightLon) {\n          if (topLat == bottomLat)\n            return new GeoDegeneratePoint(topLat, leftLon);\n          return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n        }\n        if (extent >= Math.PI) {\n          if (topLat == bottomLat) {\n            return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n          }\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        }\n        if (topLat == bottomLat)\n          return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (leftLon == -Math.PI && rightLon == Math.PI) {\n      if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n        return new GeoWorld();\n      if (topLat == bottomLat) {\n        if (topLat == Math.PI * 0.5 || topLat == -Math.PI * 0.5)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (topLat == Math.PI * 0.5)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (bottomLat == -Math.PI * 0.5)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (leftLon == rightLon)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (leftLon == rightLon) {\n      if (topLat == bottomLat)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (topLat == bottomLat) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (topLat == Math.PI * 0.5) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (bottomLat == -Math.PI * 0.5) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (topLat == bottomLat) {\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (topLat == Math.PI * 0.5) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (bottomLat == -Math.PI * 0.5) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"    /** Create a geobbox of the right kind given the specified bounds.\n     *@param topLat is the top latitude\n     *@param bottomLat is the bottom latitude\n     *@param leftLon is the left longitude\n     *@param rightLon is the right longitude\n     *@return a GeoBBox corresponding to what was specified.\n     */\n    public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n        //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n        if (topLat > Math.PI * 0.5)\n            topLat = Math.PI * 0.5;\n        if (bottomLat < -Math.PI * 0.5)\n            bottomLat = -Math.PI * 0.5;\n        if (leftLon < -Math.PI)\n            leftLon = -Math.PI;\n        if (rightLon > Math.PI)\n            rightLon = Math.PI;\n        if (leftLon == -Math.PI && rightLon == Math.PI) {\n            if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n                return new GeoWorld();\n            if (topLat == bottomLat) {\n                if (topLat == Math.PI * 0.5 || topLat == -Math.PI * 0.5)\n                    return new GeoDegeneratePoint(topLat,0.0);\n                return new GeoDegenerateLatitudeZone(topLat);\n            }\n            if (topLat == Math.PI * 0.5)\n                return new GeoNorthLatitudeZone(bottomLat);\n            else if (bottomLat == -Math.PI * 0.5)\n                return new GeoSouthLatitudeZone(topLat);\n            return new GeoLatitudeZone(topLat, bottomLat);\n        }\n        //System.err.println(\" not latitude zone\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0)\n          extent += Math.PI * 2.0;\n        if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n          if (leftLon == rightLon)\n            return new GeoDegenerateLongitudeSlice(leftLon);\n\n          if (extent >= Math.PI)\n            return new GeoWideLongitudeSlice(leftLon, rightLon);\n          \n          return new GeoLongitudeSlice(leftLon, rightLon);\n        }\n        //System.err.println(\" not longitude slice\");\n        if (leftLon == rightLon) {\n          if (topLat == bottomLat)\n            return new GeoDegeneratePoint(topLat, leftLon);\n          return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n        }\n        //System.err.println(\" not vertical line\");\n        if (extent >= Math.PI) {\n          if (topLat == bottomLat) {\n            //System.err.println(\" wide degenerate line\");\n            return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n          }\n          if (topLat == Math.PI * 0.5) {\n            return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n          } else if (bottomLat == -Math.PI * 0.5) {\n            return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n          }\n          //System.err.println(\" wide rect\");\n          return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n        }\n        if (topLat == bottomLat) {\n          //System.err.println(\" horizontal line\");\n          return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n        }\n        if (topLat == Math.PI * 0.5) {\n            return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n        } else if (bottomLat == -Math.PI * 0.5) {\n            return new GeoSouthRectangle(topLat, leftLon, rightLon);\n        }\n        //System.err.println(\" rectangle\");\n        return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7","date":1430770405,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld();\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (leftLon == -Math.PI && rightLon == Math.PI) {\n      if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5)\n        return new GeoWorld();\n      if (topLat == bottomLat) {\n        if (topLat == Math.PI * 0.5 || topLat == -Math.PI * 0.5)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (topLat == Math.PI * 0.5)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (bottomLat == -Math.PI * 0.5)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (leftLon == rightLon)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (leftLon == rightLon) {\n      if (topLat == bottomLat)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (topLat == bottomLat) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (topLat == Math.PI * 0.5) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (bottomLat == -Math.PI * 0.5) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (topLat == bottomLat) {\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (topLat == Math.PI * 0.5) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (bottomLat == -Math.PI * 0.5) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":["098b5036c89446805f69a16e53f6d22f10ae5766","098b5036c89446805f69a16e53f6d22f10ae5766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld();\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld();\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxFactory#makeGeoBBox(double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld();\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(topLat);\n      return new GeoLatitudeZone(topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(leftLon, rightLon);\n\n      return new GeoLongitudeSlice(leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(topLat, leftLon);\n      return new GeoDegenerateVerticalLine(topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["ea1a3e0b93787916a1002c2be9f1043b6575ea69"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7"],"851e4197476b684154a7b65f996f535522e67400":["ea1a3e0b93787916a1002c2be9f1043b6575ea69"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}