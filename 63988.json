{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#getFacetResponse(SolrParams).mjava","commits":[{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#getFacetResponse(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**     \n   * We ignore {@link QueryResponse#getJsonFacetingResponse()} because it isn't as useful for\n   * doing a \"deep equals\" comparison across requests\n   */\n  private NamedList getFacetResponse(final SolrParams params) {\n    try {\n      final QueryResponse rsp = (new QueryRequest(params)).process(getRandClient(random()));\n      assertNotNull(params + \" is null rsp?\", rsp);\n      final NamedList topNamedList = rsp.getResponse();\n      assertNotNull(params + \" is null topNamedList?\", topNamedList);\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      \n      return facetResponse;\n      \n    } catch (Exception e) {\n      throw new RuntimeException(\"query failed: \" + params + \": \" + \n                                 e.getMessage(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#getFacetResponse(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#getFacetResponse(SolrParams).mjava","sourceNew":"  /**     \n   * We ignore {@link QueryResponse#getJsonFacetingResponse()} because it isn't as useful for\n   * doing a \"deep equals\" comparison across requests\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  private NamedList getFacetResponse(final SolrParams params) {\n    try {\n      final QueryResponse rsp = (new QueryRequest(params)).process(getRandClient(random()));\n      assertNotNull(params + \" is null rsp?\", rsp);\n      final NamedList topNamedList = rsp.getResponse();\n      assertNotNull(params + \" is null topNamedList?\", topNamedList);\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      \n      return facetResponse;\n      \n    } catch (Exception e) {\n      throw new RuntimeException(\"query failed: \" + params + \": \" + \n                                 e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**     \n   * We ignore {@link QueryResponse#getJsonFacetingResponse()} because it isn't as useful for\n   * doing a \"deep equals\" comparison across requests\n   */\n  private NamedList getFacetResponse(final SolrParams params) {\n    try {\n      final QueryResponse rsp = (new QueryRequest(params)).process(getRandClient(random()));\n      assertNotNull(params + \" is null rsp?\", rsp);\n      final NamedList topNamedList = rsp.getResponse();\n      assertNotNull(params + \" is null topNamedList?\", topNamedList);\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      \n      return facetResponse;\n      \n    } catch (Exception e) {\n      throw new RuntimeException(\"query failed: \" + params + \": \" + \n                                 e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}