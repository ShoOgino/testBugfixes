{"path":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, 1000,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d0583a022cc74a11592b8d071d9aeee87b81df3","date":1287461866,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, 1000,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e9ce820cd3ed9efb959c181daaafd22f0c70143","1e9ce820cd3ed9efb959c181daaafd22f0c70143","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\r\n  public void testReadConfigName() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    try {\r\n      server.run();\r\n\r\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n\r\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\r\n      String actualConfigName = \"firstConfig\";\r\n\r\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\r\n      \r\n      ZkNodeProps props = new ZkNodeProps();\r\n      props.put(\"configName\", actualConfigName);\r\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      zkClient.close();\r\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\r\n          \"localhost\", \"8983\", \"/solr\");\r\n      try {\r\n        String configName = zkController.readConfigName(COLLECTION_NAME);\r\n        assertEquals(configName, actualConfigName);\r\n      } finally {\r\n        zkController.close();\r\n      }\r\n    } finally {\r\n\r\n      server.shutdown();\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d0583a022cc74a11592b8d071d9aeee87b81df3":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c26f00b574427b55127e869b935845554afde1fa":["bed62fe6383040eaff2ec720cdc55bb1462c61da","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d0583a022cc74a11592b8d071d9aeee87b81df3"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d0583a022cc74a11592b8d071d9aeee87b81df3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["9d0583a022cc74a11592b8d071d9aeee87b81df3"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["9d0583a022cc74a11592b8d071d9aeee87b81df3"],"9d0583a022cc74a11592b8d071d9aeee87b81df3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}