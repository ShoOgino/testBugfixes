{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","date":1335212037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final MutableFieldInfos infos = new MutableFieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos.Builder infos = new FieldInfos.Builder(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final MutableFieldInfos infos = new MutableFieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos.Builder infos = new FieldInfos.Builder(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":null,"sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos.Builder infos = new FieldInfos.Builder(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":null,"sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos.Builder infos = new FieldInfos.Builder(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":null,"sourceOld":"  DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    assert globalFieldMap.get() != null;\n    final DocumentsWriterPerThread dwpt = threadState.dwpt;\n    if (!closed) {\n      final FieldInfos.Builder infos = new FieldInfos.Builder(globalFieldMap.get());\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","a851824c09818632c94eba41e60ef5e72e323c8e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a851824c09818632c94eba41e60ef5e72e323c8e":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7af110b00ea8df9429309d83e38e0533d82e144f"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["a851824c09818632c94eba41e60ef5e72e323c8e"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}