{"path":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","commits":[{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","sourceNew":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","sourceOld":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      if (tenum != null) tenum.close();            \n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","sourceNew":null,"sourceOld":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","sourceNew":null,"sourceOld":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","sourceNew":null,"sourceOld":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/NumberedTermsEnum[UnInvertedField]#skipTo(BytesRef).mjava","sourceNew":null,"sourceOld":"  public BytesRef skipTo(BytesRef target) throws IOException {\n\n    // already here\n    if (termText != null && termText.equals(target)) return termText;\n\n    if (tenum == null) {\n      return null;\n    }\n\n    int startIdx = Arrays.binarySearch(tindex.index,target);\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n    \n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      TermsEnum.SeekStatus seekStatus = tenum.seek(target);\n      assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && termText != null && termText.compareTo(target)<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      TermsEnum.SeekStatus seekStatus = tenum.seek(tindex.index[startIdx]);\n      assert seekStatus == TermsEnum.SeekStatus.FOUND;\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be non-null since it's in the index\n    }\n\n    while (termText != null && termText.compareTo(target) < 0) {\n      next();\n    }\n\n    return termText;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["28427ef110c4c5bf5b4057731b83110bd1e13724","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["28427ef110c4c5bf5b4057731b83110bd1e13724","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28427ef110c4c5bf5b4057731b83110bd1e13724"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"45669a651c970812a680841b97a77cce06af559f":["5f4e87790277826a2aea119328600dfb07761f32","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"5f4e87790277826a2aea119328600dfb07761f32":["45669a651c970812a680841b97a77cce06af559f"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}