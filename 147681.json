{"path":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["1da8d55113b689b06716246649de6f62430f15c0","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e9bbb27241bcf9645bb2f724c137537aa69918a"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}