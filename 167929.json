{"path":"backwards/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/TopScoreDocCollector#newTopDocs(ScoreDoc[],int).mjava","sourceNew":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","sourceOld":"  @Override\n  protected TopDocs newTopDocs(ScoreDoc[] results, int start) {\n    if (results == null) {\n      return EMPTY_TOPDOCS;\n    }\n    \n    // We need to compute maxScore in order to set it in TopDocs. If start == 0,\n    // it means the largest element is already in results, use its score as\n    // maxScore. Otherwise pop everything else, until the largest element is\n    // extracted and use its score as maxScore.\n    float maxScore = Float.NaN;\n    if (start == 0) {\n      maxScore = results[0].score;\n    } else {\n      for (int i = pq.size(); i > 1; i--) { pq.pop(); }\n      maxScore = pq.pop().score;\n    }\n    \n    return new TopDocs(totalHits, results, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}