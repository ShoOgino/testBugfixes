{"path":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","commits":[{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: maxBlockSize plus the max non-causal lookahead\n   *  of your codec must be less than 256.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    if (maxBlockSize > MAX_BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"maxBlockSize must be <= \" + MAX_BLOCK_SIZE + \"; got \" + maxBlockSize);\n    }\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: maxBlockSize plus the max non-causal lookahead\n   *  of your codec must be less than 256.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    if (maxBlockSize > MAX_BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"maxBlockSize must be <= \" + MAX_BLOCK_SIZE + \"; got \" + maxBlockSize);\n    }\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403fdca7693ef4212494b59ca9e73661615f170c","date":1297453315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","sourceNew":"  /** NOTE: maxBlockSize must be the maximum block size \n   *  plus the max non-causal lookahead of your codec.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":"  /** NOTE: maxBlockSize plus the max non-causal lookahead\n   *  of your codec must be less than 256.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    if (maxBlockSize > MAX_BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"maxBlockSize must be <= \" + MAX_BLOCK_SIZE + \"; got \" + maxBlockSize);\n    }\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","sourceNew":"  /** NOTE: maxBlockSize must be the maximum block size \n   *  plus the max non-causal lookahead of your codec.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":"  /** NOTE: maxBlockSize plus the max non-causal lookahead\n   *  of your codec must be less than 256.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    if (maxBlockSize > MAX_BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"maxBlockSize must be <= \" + MAX_BLOCK_SIZE + \"; got \" + maxBlockSize);\n    }\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","sourceNew":"  /** NOTE: maxBlockSize must be the maximum block size \n   *  plus the max non-causal lookahead of your codec.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":"  /** NOTE: maxBlockSize plus the max non-causal lookahead\n   *  of your codec must be less than 256.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    if (maxBlockSize > MAX_BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"maxBlockSize must be <= \" + MAX_BLOCK_SIZE + \"; got \" + maxBlockSize);\n    }\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexOutput#VariableIntBlockIndexOutput(IndexOutput,int).mjava","sourceNew":"  /** NOTE: maxBlockSize must be the maximum block size \n   *  plus the max non-causal lookahead of your codec.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","sourceOld":"  /** NOTE: maxBlockSize must be the maximum block size \n   *  plus the max non-causal lookahead of your codec.  EG Simple9\n   *  requires lookahead=1 because on seeing the Nth value\n   *  it knows it must now encode the N-1 values before it. */\n  protected VariableIntBlockIndexOutput(IndexOutput out, int maxBlockSize) throws IOException {\n    this.out = out;\n    out.writeInt(maxBlockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","403fdca7693ef4212494b59ca9e73661615f170c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"403fdca7693ef4212494b59ca9e73661615f170c":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["403fdca7693ef4212494b59ca9e73661615f170c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","403fdca7693ef4212494b59ca9e73661615f170c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["f1bdbf92da222965b46c0a942c3857ba56e5c638","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","403fdca7693ef4212494b59ca9e73661615f170c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"403fdca7693ef4212494b59ca9e73661615f170c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a0ae5e3ed1232483b7b8a014f175a5fe43595982","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}