{"path":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","commits":[{"id":"ca70fffb953aae4d27efbfc28758033a317f39b1","date":1396371342,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params) \n    throws SolrServerException, InterruptedException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params) \n    throws SolrServerException, InterruptedException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params) \n    throws SolrServerException, InterruptedException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params) \n    throws SolrServerException, InterruptedException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final long giveUpAfter = System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {\n      Thread.sleep(Math.min(5000, giveUpAfter - System.currentTimeMillis()));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is garunteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cloudClient.query(params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cloudClient.query(params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c92ac83d1c2f8811300bb0df797465cca0aa8e92","date":1579710745,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribDocExpirationUpdateProcessorTest#waitForNoResults(int,SolrParams).mjava","sourceNew":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final QueryRequest req = setAuthIfNeeded(new QueryRequest(params));\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    long numFound = req.process(cluster.getSolrClient(), COLLECTION).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      \n      numFound = req.process(cluster.getSolrClient(), COLLECTION).getResults().getNumFound();\n    }\n\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","sourceOld":"  /**\n   * Executes a query over and over against the cloudClient every 5 seconds \n   * until the numFound is 0 or the maxTimeLimitSeconds is exceeded. \n   * Query is guaranteed to be executed at least once.\n   */\n  private void waitForNoResults(int maxTimeLimitSeconds,\n                                SolrParams params)\n      throws SolrServerException, InterruptedException, IOException {\n\n    final TimeOut timeout = new TimeOut(maxTimeLimitSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    long numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    while (0L < numFound && ! timeout.hasTimedOut()) {\n      Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      numFound = cluster.getSolrClient().query(COLLECTION, params).getResults().getNumFound();\n    }\n    assertEquals(\"Give up waiting for no results: \" + params,\n                 0L, numFound);\n  }\n\n","bugFix":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ca70fffb953aae4d27efbfc28758033a317f39b1"],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bcf9886c8ff537aafde14de48ebf744f5673f08b","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ca70fffb953aae4d27efbfc28758033a317f39b1","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["ca70fffb953aae4d27efbfc28758033a317f39b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca70fffb953aae4d27efbfc28758033a317f39b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["0158ced21948b6626f733c1c42c1e18d94449789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"0158ced21948b6626f733c1c42c1e18d94449789":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","ca70fffb953aae4d27efbfc28758033a317f39b1"],"ca70fffb953aae4d27efbfc28758033a317f39b1":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0158ced21948b6626f733c1c42c1e18d94449789":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}