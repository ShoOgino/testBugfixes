{"path":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","pathOld":"/dev/null","sourceNew":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundent end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","sourceNew":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundant end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","sourceOld":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundent end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","sourceNew":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundant end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","sourceOld":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundent end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud#testSanityRandomUnsetBit().mjava","sourceNew":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundant end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","sourceOld":"  /** sanity check that randomUnsetBit works as expected \n   * @see #randomUnsetBit\n   */\n  public void testSanityRandomUnsetBit() {\n    final int max = atLeast(100);\n    BitSet bits = new BitSet(max+1);\n    for (int i = 0; i <= max; i++) {\n      assertFalse(\"how is bitset already full? iter=\"+i+\" card=\"+bits.cardinality()+\"/max=\"+max,\n                  bits.cardinality() == max+1);\n      final int nextBit = randomUnsetBit(random(), bits, max);\n      assertTrue(\"nextBit shouldn't be negative yet: \" + nextBit,\n                 0 <= nextBit);\n      assertTrue(\"nextBit can't exceed max: \" + nextBit,\n                 nextBit <= max);\n      assertFalse(\"expect unset: \" + nextBit, bits.get(nextBit));\n      bits.set(nextBit);\n    }\n    \n    assertEquals(\"why isn't bitset full?\", max+1, bits.cardinality());\n\n    final int firstClearBit = bits.nextClearBit(0);\n    assertTrue(\"why is there a clear bit? = \" + firstClearBit,\n               max < firstClearBit);\n    assertEquals(\"why is a bit set above max?\",\n                 -1, bits.nextSetBit(max+1));\n    \n    assertEquals(\"wrong nextBit at end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n    assertEquals(\"wrong nextBit at redundent end of all iters\", -1,\n                 randomUnsetBit(random(), bits, max));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}