{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new DocValuesField(\"docId\", i, DocValues.Type.VAR_INTS));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c1f75cbc80446a0380e76b64210cdf8e3858d7","date":1359394908,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":null,"sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["55d38708477d49511977195bad066d9ced001005"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"55d38708477d49511977195bad066d9ced001005":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fe33227f6805edab2036cbb80645cc4e2d1fa424","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"55d38708477d49511977195bad066d9ced001005":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}