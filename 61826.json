{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"/dev/null","sourceNew":"  public final void deleteFile(String file)\n       throws IOException {\n    try {\n      directory.deleteFile(file);\t\t  // try to delete each file\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(file)) {\n        if (infoStream != null)\n          infoStream.println(\"IndexFileDeleter: unable to remove file \\\"\" + file + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        addDeletableFile(file);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65fde38a949fadb9cf6008bc632c72c2ada2393d","date":1170531935,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String file)\n       throws IOException {\n    try {\n      directory.deleteFile(file);\t\t  // try to delete each file\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(file)) {\n        if (infoStream != null)\n          infoStream.println(\"IndexFileDeleter: unable to remove file \\\"\" + file + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        addDeletableFile(file);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  public final void deleteFile(String file)\n       throws IOException {\n    try {\n      directory.deleteFile(file);\t\t  // try to delete each file\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(file)) {\n        if (infoStream != null)\n          infoStream.println(\"IndexFileDeleter: unable to remove file \\\"\" + file + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        addDeletableFile(file);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  private void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  void deleteFile(String file)\n       throws IOException {\n    try {\n      directory.deleteFile(file);\t\t  // try to delete each file\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(file)) {\n        if (infoStream != null)\n          infoStream.println(\"IndexFileDeleter: unable to remove file \\\"\" + file + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        addDeletableFile(file);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4868f9b75c9b2ca1a952583aec66eae66206a721","date":1262624951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["8b6187898fc4413ccd18229711786550a280383c"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4868f9b75c9b2ca1a952583aec66eae66206a721":["ef82ff03e4016c705811b2658e81471a645c0e49"],"65fde38a949fadb9cf6008bc632c72c2ada2393d":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8b6187898fc4413ccd18229711786550a280383c":["65fde38a949fadb9cf6008bc632c72c2ada2393d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4868f9b75c9b2ca1a952583aec66eae66206a721"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["ef82ff03e4016c705811b2658e81471a645c0e49"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["65fde38a949fadb9cf6008bc632c72c2ada2393d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4868f9b75c9b2ca1a952583aec66eae66206a721"],"4868f9b75c9b2ca1a952583aec66eae66206a721":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"65fde38a949fadb9cf6008bc632c72c2ada2393d":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}