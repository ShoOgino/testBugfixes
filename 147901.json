{"path":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"687e86054415a85f912c6eaa38f995038e5c1cd8","date":1336447427,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_31, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_40, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_50, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_40, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_31, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_40, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_50, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_40, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_40, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_50, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_40, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_40, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_50, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_40, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in TurkishAnalyzer's class, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = TurkishAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in TurkishAnalyzer's class, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = TurkishAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    System.out.println(\"DEFAULT_VERSION = \" + ana1.getVersion().name());\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0, ana1.getVersion());\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_4_0, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0_0, ana1.getVersion());\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    System.out.println(\"DEFAULT_VERSION = \" + ana1.getVersion().name());\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0, ana1.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","date":1410373276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0_0_ALPHA, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0_0_ALPHA, ana1.getVersion());\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0_0, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0_0, ana1.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getLatestSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"text40\");\n    ana = (TokenizerChain) type.getIndexAnalyzer();\n    assertEquals(Version.LUCENE_4_0_0_ALPHA, (ana.getTokenizerFactory()).getLuceneMatchVersion());\n    assertEquals(Version.LUCENE_5_0_0, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzerDefault\");\n    Analyzer ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(DEFAULT_VERSION, ana1.getVersion());\n\n    type = schema.getFieldType(\"textTurkishAnalyzer40\");\n    ana1 = type.getIndexAnalyzer();\n    assertTrue(ana1 instanceof TurkishAnalyzer);\n    assertEquals(Version.LUCENE_4_0_0_ALPHA, ana1.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"057a1793765d068ea9302f1a29e21734ee58d41e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"08970e5b8411182a29412c177eff67ec1110095b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["057a1793765d068ea9302f1a29e21734ee58d41e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["08970e5b8411182a29412c177eff67ec1110095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"c26f00b574427b55127e869b935845554afde1fa":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"057a1793765d068ea9302f1a29e21734ee58d41e":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["057a1793765d068ea9302f1a29e21734ee58d41e"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}