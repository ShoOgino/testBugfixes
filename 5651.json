{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"/dev/null","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      new BKDWriter(dir, \"bkd\", 1, 16, 1000000, 0.001);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n      assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      new BKDWriter(dir, \"bkd\", 1, 16, 1000000, 0.001);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n      assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, randomPointCount());\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, randomPointCount(true), true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, randomPointCount());\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d902d9e126b838f492796a117a4d9e532d597a","date":1458810839,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, 0, true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, randomPointCount(true), true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 1, 16, 1000000, 0.001, 0, true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 16, 1000000, 0.001, 0, true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 1, 16, 1000000, 0.001, 0);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 1, 16, 1000000, 0.001, 0, true);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTooLittleHeap().mjava","sourceNew":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", new BKDConfig(1, 1, 16, 1000000), 0.001, 0);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","sourceOld":"  public void testTooLittleHeap() throws Exception { \n    try (Directory dir = getDirectory(0)) {\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new BKDWriter(1, dir, \"bkd\", 1, 1, 16, 1000000, 0.001, 0);\n      });\n      assertTrue(expected.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["05fe562aa248790944d43cdd478f512572835ba0"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"f6652c943595e92c187ee904c382863013eae28f":["f3d902d9e126b838f492796a117a4d9e532d597a"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["f6652c943595e92c187ee904c382863013eae28f"],"05fe562aa248790944d43cdd478f512572835ba0":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["05fe562aa248790944d43cdd478f512572835ba0","251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"f3d902d9e126b838f492796a117a4d9e532d597a":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"05fe562aa248790944d43cdd478f512572835ba0":["251c5b33f0a2c8988550b63c78ed22b0e84524e5","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["05fe562aa248790944d43cdd478f512572835ba0"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["f3d902d9e126b838f492796a117a4d9e532d597a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"f3d902d9e126b838f492796a117a4d9e532d597a":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}