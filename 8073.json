{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        assert !next.isActive() || next.perThread.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        assert !next.isActive() || next.perThread.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isActive() || next.dwpt.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        assert !next.isActive() || next.perThread.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isActive() || next.dwpt.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isActive() || next.dwpt.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isActive() || next.dwpt.deleteQueue == queue;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadStateCount();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadState();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#assertActiveDeleteQueue(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    for (final DocumentsWriterPerThread next : perThreadPool) {\n        assert next.deleteQueue == queue : \"numDocs: \" + next.getNumDocsInRAM();\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean assertActiveDeleteQueue(DocumentsWriterDeleteQueue queue) {\n    final int limit = perThreadPool.getActiveThreadStateCount();\n    for (int i = 0; i < limit; i++) {\n      final ThreadState next = perThreadPool.getThreadState(i);\n      next.lock();\n      try {\n        assert !next.isInitialized() || next.dwpt.deleteQueue == queue : \"isInitialized: \" + next.isInitialized() + \" numDocs: \" + (next.isInitialized() ? next.dwpt.getNumDocsInRAM() : 0) ;\n      } finally {\n        next.unlock();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"7af110b00ea8df9429309d83e38e0533d82e144f":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["7af110b00ea8df9429309d83e38e0533d82e144f"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","c02b804ab16489b95429791a2d8fb0e0728354d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}