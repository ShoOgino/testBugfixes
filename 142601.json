{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","commits":[{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}