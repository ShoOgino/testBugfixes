{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","commits":[{"id":"5970b51908f2c85110be62688f463faf06cc5e3d","date":1327209285,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRefreshAndRefCount() throws Exception {\n    Directory dir = new RAMDirectory(); // no need for random directories here\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.commit();\n\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertEquals(\"wrong refCount\", 1, taxoReader.getRefCount());\n\n    taxoReader.incRef();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.addCategory(new CategoryPath(\"a\", \"b\"));\n    taxoWriter.commit();\n    taxoReader.refresh();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.close();\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRefreshAndRefCount() throws Exception {\n    Directory dir = new RAMDirectory(); // no need for random directories here\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.commit();\n\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertEquals(\"wrong refCount\", 1, taxoReader.getRefCount());\n\n    taxoReader.incRef();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.addCategory(new CategoryPath(\"a\", \"b\"));\n    taxoWriter.commit();\n    taxoReader.refresh();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.close();\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRefreshAndRefCount() throws Exception {\n    Directory dir = new RAMDirectory(); // no need for random directories here\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.commit();\n\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertEquals(\"wrong refCount\", 1, taxoReader.getRefCount());\n\n    taxoReader.incRef();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.addCategory(new CategoryPath(\"a\", \"b\"));\n    taxoWriter.commit();\n    taxoReader.refresh();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.close();\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testRefreshAndRefCount().mjava","sourceNew":"  @Test\n  public void testRefreshAndRefCount() throws Exception {\n    Directory dir = new RAMDirectory(); // no need for random directories here\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.commit();\n\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertEquals(\"wrong refCount\", 1, taxoReader.getRefCount());\n\n    taxoReader.incRef();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.addCategory(new CategoryPath(\"a\", \"b\"));\n    taxoWriter.commit();\n    taxoReader.refresh();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.close();\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRefreshAndRefCount() throws Exception {\n    Directory dir = new RAMDirectory(); // no need for random directories here\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.commit();\n\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertEquals(\"wrong refCount\", 1, taxoReader.getRefCount());\n\n    taxoReader.incRef();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.addCategory(new CategoryPath(\"a\", \"b\"));\n    taxoWriter.commit();\n    taxoReader.refresh();\n    assertEquals(\"wrong refCount\", 2, taxoReader.getRefCount());\n\n    taxoWriter.close();\n    taxoReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5970b51908f2c85110be62688f463faf06cc5e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5970b51908f2c85110be62688f463faf06cc5e3d"],"5970b51908f2c85110be62688f463faf06cc5e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5970b51908f2c85110be62688f463faf06cc5e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5970b51908f2c85110be62688f463faf06cc5e3d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"5970b51908f2c85110be62688f463faf06cc5e3d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}