{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","commits":[{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract(iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = copyMultiTermQuery(mtq);\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      String field = null;\n      if(mtq instanceof TermRangeQuery) {\n        field = ((TermRangeQuery)mtq).getField();\n      } else if (mtq instanceof PrefixQuery) {\n        field = ((PrefixQuery) mtq).getPrefix().field();\n      } else if (mtq instanceof WildcardQuery) {\n        field = ((WildcardQuery) mtq).getTerm().field();\n      } else if (mtq instanceof FuzzyQuery) {\n        field = ((FuzzyQuery) mtq).getTerm().field();\n      }\n      if (field != null) {\n        IndexReader ir = getReaderForField(field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<SpanQuery> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<SpanQuery>(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<SpanQuery> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract((Query) iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = copyMultiTermQuery(mtq);\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      String field = null;\n      if(mtq instanceof TermRangeQuery) {\n        field = ((TermRangeQuery)mtq).getField();\n      } else if (mtq instanceof PrefixQuery) {\n        field = ((PrefixQuery) mtq).getPrefix().field();\n      } else if (mtq instanceof WildcardQuery) {\n        field = ((WildcardQuery) mtq).getTerm().field();\n      } else if (mtq instanceof FuzzyQuery) {\n        field = ((FuzzyQuery) mtq).getTerm().field();\n      }\n      if (field != null) {\n        IndexReader ir = getReaderForField(field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = (Term[]) termArrays.get(i);\n          List disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery((SpanQuery[]) disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21e5613e6b876549fd7085e18207b01ee74130e3","date":1258201542,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract(iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = (MultiTermQuery) mtq.clone();\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      FakeReader fReader = new FakeReader();\n      MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE.rewrite(fReader, mtq);\n      if (fReader.field != null) {\n        IndexReader ir = getReaderForField(fReader.field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<SpanQuery> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<SpanQuery>(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<SpanQuery> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract(iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = copyMultiTermQuery(mtq);\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      String field = null;\n      if(mtq instanceof TermRangeQuery) {\n        field = ((TermRangeQuery)mtq).getField();\n      } else if (mtq instanceof PrefixQuery) {\n        field = ((PrefixQuery) mtq).getPrefix().field();\n      } else if (mtq instanceof WildcardQuery) {\n        field = ((WildcardQuery) mtq).getTerm().field();\n      } else if (mtq instanceof FuzzyQuery) {\n        field = ((FuzzyQuery) mtq).getTerm().field();\n      }\n      if (field != null) {\n        IndexReader ir = getReaderForField(field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<SpanQuery> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<SpanQuery>(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<SpanQuery> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extract(Query,Map[String,WeightedSpanTerm]).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract(iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = (MultiTermQuery) mtq.clone();\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      FakeReader fReader = new FakeReader();\n      MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE.rewrite(fReader, mtq);\n      if (fReader.field != null) {\n        IndexReader ir = getReaderForField(fReader.field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<SpanQuery> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<SpanQuery>(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<SpanQuery> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param query\n   *          Query to extract Terms from\n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @throws IOException\n   */\n  private void extract(Query query, Map<String,WeightedSpanTerm> terms) throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          extract(queryClauses[i].getQuery(), terms);\n        }\n      }\n    } else if (query instanceof PhraseQuery) {\n      PhraseQuery phraseQuery = ((PhraseQuery) query);\n      Term[] phraseQueryTerms = phraseQuery.getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n      int slop = phraseQuery.getSlop();\n      int[] positions = phraseQuery.getPositions();\n      // add largest position increment to slop\n      if (positions.length > 0) {\n        int lastPos = positions[0];\n        int largestInc = 0;\n        int sz = positions.length;\n        for (int i = 1; i < sz; i++) {\n          int pos = positions[i];\n          int inc = pos - lastPos;\n          if (inc > largestInc) {\n            largestInc = inc;\n          }\n          lastPos = pos;\n        }\n        if(largestInc > 1) {\n          slop += largestInc;\n        }\n      }\n\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      extractWeightedSpanTerms(terms, sp);\n    } else if (query instanceof TermQuery) {\n      extractWeightedTerms(terms, query);\n    } else if (query instanceof SpanQuery) {\n      extractWeightedSpanTerms(terms, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      extract(((FilteredQuery) query).getQuery(), terms);\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {\n        extract(iterator.next(), terms);\n      }\n    } else if (query instanceof MultiTermQuery && expandMultiTermQuery) {\n      MultiTermQuery mtq = ((MultiTermQuery)query);\n      if(mtq.getRewriteMethod() != MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE) {\n        mtq = (MultiTermQuery) mtq.clone();\n        mtq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = mtq;\n      }\n      FakeReader fReader = new FakeReader();\n      MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE.rewrite(fReader, mtq);\n      if (fReader.field != null) {\n        IndexReader ir = getReaderForField(fReader.field);\n        extract(query.rewrite(ir), terms);\n      }\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<SpanQuery> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<SpanQuery>(termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<SpanQuery> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps, inorder);\n        sp.setBoost(query.getBoost());\n        extractWeightedSpanTerms(terms, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21e5613e6b876549fd7085e18207b01ee74130e3":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["21e5613e6b876549fd7085e18207b01ee74130e3"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["21e5613e6b876549fd7085e18207b01ee74130e3"],"21e5613e6b876549fd7085e18207b01ee74130e3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}