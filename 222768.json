{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    //Codec.DEBUG = true;\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    //Codec.DEBUG = true;\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = SegmentReader.getOnlySegmentReader(dir);\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\");\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir, false));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterClone().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1579: Ensure that on a cloned reader, segments\n  // reuse the doc values arrays in FieldCache\n  public void testFieldCacheReuseAfterClone() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    // Open reader\n    IndexReader r = getOnlySegmentReader(IndexReader.open(dir));\n    final int[] ints = FieldCache.DEFAULT.getInts(r, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Clone reader\n    IndexReader r2 = (IndexReader) r.clone();\n    r.close();\n    assertTrue(r2 != r);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(r2, \"number\", false);\n    r2.close();\n\n    assertEquals(1, ints2.length);\n    assertEquals(17, ints2[0]);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["382fe3a6ca9745891afebda9b9a57cc158305545","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["382fe3a6ca9745891afebda9b9a57cc158305545"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"382fe3a6ca9745891afebda9b9a57cc158305545":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["382fe3a6ca9745891afebda9b9a57cc158305545","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"382fe3a6ca9745891afebda9b9a57cc158305545":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["382fe3a6ca9745891afebda9b9a57cc158305545"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}