{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,Directory).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {\n    // make sure searching sees right # hits\n    DirectoryReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    StoredDocument d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n\n    // fully merge\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    doTestHits(hits, 34, searcher.getIndexReader());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}