{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateAccount().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateAccount().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateAccount().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateAccount(GDataAccount)'\n     */\n    public void testUpdateAccount() throws StorageException {\n        GDataAccount account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"somepass\");\n\n        Storage storage = this.controller.getStorage();\n        try {\n            storage.updateAccount(account);\n            fail(\"Account does not exist\");\n        } catch (Exception e) {\n            //\n        }\n        try {\n            storage.updateAccount(null);\n            fail(\"Account is null\");\n        } catch (Exception e) {\n            //\n        }\n        storage.storeAccount(account);\n        ObjectContainer container = getContainer();\n        Query q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        ObjectSet set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"newPass\");\n        storage.updateAccount(account);\n        container.close();\n        container = getContainer();\n        q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        container.close();\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateAccount(GDataAccount)'\n     */\n    public void testUpdateAccount() throws StorageException {\n        GDataAccount account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"somepass\");\n\n        Storage storage = this.controller.getStorage();\n        try {\n            storage.updateAccount(account);\n            fail(\"Account does not exist\");\n        } catch (Exception e) {\n            //\n        }\n        try {\n            storage.updateAccount(null);\n            fail(\"Account is null\");\n        } catch (Exception e) {\n            //\n        }\n        storage.storeAccount(account);\n        ObjectContainer container = getContainer();\n        Query q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        ObjectSet set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"newPass\");\n        storage.updateAccount(account);\n        container.close();\n        container = getContainer();\n        q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        container.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateAccount().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testUpdateAccount().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateAccount(GDataAccount)'\n     */\n    public void testUpdateAccount() throws StorageException {\n        GDataAccount account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"somepass\");\n\n        Storage storage = this.controller.getStorage();\n        try {\n            storage.updateAccount(account);\n            fail(\"Account does not exist\");\n        } catch (Exception e) {\n            //\n        }\n        try {\n            storage.updateAccount(null);\n            fail(\"Account is null\");\n        } catch (Exception e) {\n            //\n        }\n        storage.storeAccount(account);\n        ObjectContainer container = getContainer();\n        Query q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        ObjectSet set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"newPass\");\n        storage.updateAccount(account);\n        container.close();\n        container = getContainer();\n        q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        container.close();\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateAccount(GDataAccount)'\n     */\n    public void testUpdateAccount() throws StorageException {\n        GDataAccount account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"somepass\");\n\n        Storage storage = this.controller.getStorage();\n        try {\n            storage.updateAccount(account);\n            fail(\"Account does not exist\");\n        } catch (Exception e) {\n            //\n        }\n        try {\n            storage.updateAccount(null);\n            fail(\"Account is null\");\n        } catch (Exception e) {\n            //\n        }\n        storage.storeAccount(account);\n        ObjectContainer container = getContainer();\n        Query q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        ObjectSet set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        account = new GDataAccount();\n        account.setName(\"simon\");\n        account.setPassword(\"newPass\");\n        storage.updateAccount(account);\n        container.close();\n        container = getContainer();\n        q = container.query();\n        q.constrain(GDataAccount.class);\n        q.descend(\"name\").constrain(account.getName());\n        set = q.execute();\n        assertEquals(1, set.size());\n        assertEquals(account.getPassword(), ((GDataAccount) set.next())\n                .getPassword());\n        container.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}