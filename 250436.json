{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","commits":[{"id":"1596015c8bad249c0b9a52182de1d47e1d56fdde","date":1412350121,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.info(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.debug(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.info(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.debug(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.info(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.debug(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.info(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.debug(\"Added new OnReconnect listener {}\", listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n  public void addOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      synchronized (reconnectListeners) {\n        reconnectListeners.add(listener);\n        log.debug(\"Added new OnReconnect listener \"+listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"1596015c8bad249c0b9a52182de1d47e1d56fdde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","962cd4f5e313777f35da8f521265323e84184929"],"ad4957cde742defe6db19689abdc267c5d948066":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1596015c8bad249c0b9a52182de1d47e1d56fdde"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["1596015c8bad249c0b9a52182de1d47e1d56fdde"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1596015c8bad249c0b9a52182de1d47e1d56fdde":["d9a47902d6207303f5ed3e7aaca62ca33433af66","29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1596015c8bad249c0b9a52182de1d47e1d56fdde","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad4957cde742defe6db19689abdc267c5d948066","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}