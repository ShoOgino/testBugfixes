{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","commits":[{"id":"e7b27dde701ae80df8bea8eb554d31e4e8bc6126","date":1354814363,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b43aca0f70aef9b914114574de1d0916ad2a32b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b43aca0f70aef9b914114574de1d0916ad2a32b","date":1360908147,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","sourceNew":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","bugFix":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","sourceNew":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","sourceNew":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Cell cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Node cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnap(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#gridSnapp(Shape).mjava","sourceNew":"  protected Rectangle gridSnap(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Cell cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","sourceOld":"  protected Rectangle gridSnapp(Shape snapMe) {\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(snapMe, detailLevel, false, true);\n\n    //calc bounding box of cells.\n    double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;\n    double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;\n    for (Cell cell : cells) {\n      assert cell.getLevel() <= detailLevel;\n      Rectangle cellR = cell.getShape().getBoundingBox();\n\n      minX = Math.min(minX, cellR.getMinX());\n      maxX = Math.max(maxX, cellR.getMaxX());\n      minY = Math.min(minY, cellR.getMinY());\n      maxY = Math.max(maxY, cellR.getMaxY());\n    }\n    return ctx.makeRectangle(minX, maxX, minY, maxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["6b43aca0f70aef9b914114574de1d0916ad2a32b"]},"commit2Childs":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["3b41f996b22bd5518650f897d050088ff808ec03","407687e67faf6e1f02a211ca078d8e3eed631027","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["3b41f996b22bd5518650f897d050088ff808ec03","8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}