{"path":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#testGet().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#testGet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGet() throws Exception {\n    NamedList<Object> rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\")));\n    assertNotNull(rsp);\n    // default format is LIST\n    NamedList<Object> data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertTrue(\"timestamps\", lst.size() > 0);\n      // 3 metrics, so the total size of values is 3 * the size of timestamps\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(lst.size() * 3, entry.size());\n    });\n\n    // get STRING\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"string\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertEquals(\"timestamps\", 1, lst.size());\n      String timestampString = (String)lst.get(0);\n      String[] timestamps = timestampString.split((\"\\n\"));\n      assertTrue(timestampString, timestamps.length > 1);\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        String[] values = valString.split(\"\\n\");\n        assertEquals(valString, timestamps.length, values.length);\n      });\n    });\n\n    // get GRAPH\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"graph\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>) v;\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        byte[] img = Base64.base64ToByteArray(valString);\n        try {\n          ImageIO.read(new ByteArrayInputStream(img));\n        } catch (IOException e) {\n          fail(\"Error reading image data: \" + e.toString());\n        }\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#testGet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#testGet().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testGet() throws Exception {\n    NamedList<Object> rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\")));\n    assertNotNull(rsp);\n    // default format is LIST\n    NamedList<Object> data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertTrue(\"timestamps\", lst.size() > 0);\n      // 3 metrics, so the total size of values is 3 * the size of timestamps\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(lst.size() * 3, entry.size());\n    });\n\n    // get STRING\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"string\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertEquals(\"timestamps\", 1, lst.size());\n      String timestampString = (String)lst.get(0);\n      String[] timestamps = timestampString.split((\"\\n\"));\n      assertTrue(timestampString, timestamps.length > 1);\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        String[] values = valString.split(\"\\n\");\n        assertEquals(valString, timestamps.length, values.length);\n      });\n    });\n\n    // get GRAPH\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"graph\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>) v;\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        byte[] img = Base64.base64ToByteArray(valString);\n        try {\n          ImageIO.read(new ByteArrayInputStream(img));\n        } catch (IOException e) {\n          fail(\"Error reading image data: \" + e.toString());\n        }\n      });\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testGet() throws Exception {\n    NamedList<Object> rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\")));\n    assertNotNull(rsp);\n    // default format is LIST\n    NamedList<Object> data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertTrue(\"timestamps\", lst.size() > 0);\n      // 3 metrics, so the total size of values is 3 * the size of timestamps\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(lst.size() * 3, entry.size());\n    });\n\n    // get STRING\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"string\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>)v;\n      List<Object> lst = entry.getAll(\"timestamps\");\n      assertNotNull(lst);\n      assertEquals(\"timestamps\", 1, lst.size());\n      String timestampString = (String)lst.get(0);\n      String[] timestamps = timestampString.split((\"\\n\"));\n      assertTrue(timestampString, timestamps.length > 1);\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        String[] values = valString.split(\"\\n\");\n        assertEquals(valString, timestamps.length, values.length);\n      });\n    });\n\n    // get GRAPH\n    rsp = solrClient.request(createHistoryRequest(params(\n        CommonParams.ACTION, \"get\", CommonParams.NAME, \"solr.jvm\", \"format\", \"graph\")));\n    data = (NamedList<Object>)rsp.findRecursive(\"metrics\", \"solr.jvm\", \"data\");\n    assertNotNull(data);\n    data.forEach((k, v) -> {\n      NamedList<Object> entry = (NamedList<Object>) v;\n      entry = (NamedList<Object>)entry.get(\"values\");\n      assertNotNull(entry);\n      assertEquals(3, entry.size());\n      entry.forEach((vk, vv) -> {\n        String valString = (String)vv;\n        byte[] img = Base64.base64ToByteArray(valString);\n        try {\n          ImageIO.read(new ByteArrayInputStream(img));\n        } catch (IOException e) {\n          fail(\"Error reading image data: \" + e.toString());\n        }\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}