{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"/dev/null","sourceNew":"  /** Calendar utility method:\n   * Converts to calendar to ISO-8601, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n   public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized because I only expect this to be used in tests / debugging.\n      //  Borrow code from Solr DateUtil, and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Converts to calendar to ISO-8601, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n   public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized because I only expect this to be used in tests / debugging.\n      //  Borrow code from Solr DateUtil, and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}