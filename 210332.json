{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","commits":[{"id":"1cff1deb788b9babb942b20707a93e1ab902ce37","date":1380805349,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues(\"f1\").get(0));\n    assertEquals(3, reader.leaves().get(0).reader().getNumericDocValues(\"f2\").get(0));\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    if (VERBOSE) {\n      System.out.println(\"TEST: now close\");\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    if (VERBOSE) {\n      System.out.println(\"TEST: now close\");\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdatesOrder().mjava","sourceNew":"  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    if (VERBOSE) {\n      System.out.println(\"TEST: now close\");\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatesOrder() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"upd\", \"t1\", Store.NO));\n    doc.add(new StringField(\"upd\", \"t2\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 2L); // update f1 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f2\", 2L); // update f2 to 2\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f1\", 3L); // update f1 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t2\"), \"f2\", 3L); // update f2 to 3\n    writer.updateNumericDocValue(new Term(\"upd\", \"t1\"), \"f1\", 4L); // update f1 to 4 (but not f2)\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f1\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(4, dvs.longValue());\n    dvs = reader.leaves().get(0).reader().getNumericDocValues(\"f2\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(3, dvs.longValue());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cff1deb788b9babb942b20707a93e1ab902ce37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d0ef034a4f10871667ae75181537775ddcf8ade4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1cff1deb788b9babb942b20707a93e1ab902ce37":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}