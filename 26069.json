{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","commits":[{"id":"94b4f4bf8892e6006d66f4231d6d1873bbe56e73","date":1352661595,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be3b141eed4372b3eb04def61ab79f86f572f481"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcfdd006d8e0ee1f9d39bfa02050e41531ab5940","date":1352720203,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    if (maxMergeThreads > cms.getMaxMergeCount()) {\n      cms.setMaxMergeCount(maxMergeCount);\n    }\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["be3b141eed4372b3eb04def61ab79f86f572f481"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    if (maxMergeThreads > cms.getMaxMergeCount()) {\n      cms.setMaxMergeCount(maxMergeCount);\n    }\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be3b141eed4372b3eb04def61ab79f86f572f481","date":1372468407,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    if (maxMergeThreads > cms.getMaxMergeCount()) {\n      cms.setMaxMergeCount(maxMergeCount);\n    }\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","bugFix":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73","dcfdd006d8e0ee1f9d39bfa02050e41531ab5940"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    if (maxMergeThreads > cms.getMaxMergeCount()) {\n      cms.setMaxMergeCount(maxMergeCount);\n    }\n    cms.setMaxThreadCount(maxMergeThreads);\n    cms.setMaxMergeCount(maxMergeCount);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = _TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = _TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.shutdown(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    try {\n      w.commit();\n    } finally {\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    w.shutdown(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    try {\n      w.commit();\n    } finally {\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    try {\n      w.commit();\n    } finally {\n      w.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaxMergeCount().mjava","sourceNew":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(MergeSource mergeSource, MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(mergeSource, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          mergeSource.onMergeFinished(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    try {\n      w.commit();\n    } finally {\n      w.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4544\n  public void testMaxMergeCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);\n\n    final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);\n    final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);\n    final CountDownLatch enoughMergesWaiting = new CountDownLatch(maxMergeCount);\n    final AtomicInteger runningMergeCount = new AtomicInteger(0);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxMergeCount=\" + maxMergeCount + \" maxMergeThreads=\" + maxMergeThreads);\n    }\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n      @Override\n      protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n        try {\n          // Stall all incoming merges until we see\n          // maxMergeCount:\n          int count = runningMergeCount.incrementAndGet();\n          try {\n            assertTrue(\"count=\" + count + \" vs maxMergeCount=\" + maxMergeCount, count <= maxMergeCount);\n            enoughMergesWaiting.countDown();\n\n            // Stall this merge until we see exactly\n            // maxMergeCount merges waiting\n            while (true) {\n              if (enoughMergesWaiting.await(10, TimeUnit.MILLISECONDS) || failed.get()) {\n                break;\n              }\n            }\n            // Then sleep a bit to give a chance for the bug\n            // (too many pending merges) to appear:\n            Thread.sleep(20);\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n        } catch (Throwable t) {\n          failed.set(true);\n          writer.mergeFinish(merge);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    cms.setMaxMergesAndThreads(maxMergeCount, maxMergeThreads);\n    iwc.setMergeScheduler(cms);\n    iwc.setMaxBufferedDocs(2);\n\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    iwc.setMergePolicy(tmp);\n    tmp.setMaxMergeAtOnce(2);\n    tmp.setSegmentsPerTier(2);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"field\", TextField.TYPE_NOT_STORED));\n    while(enoughMergesWaiting.getCount() != 0 && !failed.get()) {\n      for(int i=0;i<10;i++) {\n        w.addDocument(doc);\n      }\n    }\n    try {\n      w.commit();\n    } finally {\n      w.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["dcfdd006d8e0ee1f9d39bfa02050e41531ab5940","be3b141eed4372b3eb04def61ab79f86f572f481"],"dcfdd006d8e0ee1f9d39bfa02050e41531ab5940":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"6613659748fe4411a7dcf85266e55db1f95f7315":["be3b141eed4372b3eb04def61ab79f86f572f481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dcfdd006d8e0ee1f9d39bfa02050e41531ab5940"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"be3b141eed4372b3eb04def61ab79f86f572f481":["dcfdd006d8e0ee1f9d39bfa02050e41531ab5940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["dcfdd006d8e0ee1f9d39bfa02050e41531ab5940"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"dcfdd006d8e0ee1f9d39bfa02050e41531ab5940":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","be3b141eed4372b3eb04def61ab79f86f572f481"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["89697e7abc9807639c384eecf5a2a6eef1080426"],"be3b141eed4372b3eb04def61ab79f86f572f481":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}