{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","commits":[{"id":"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa","date":1493907698,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    final Set<String> hiddenSysProps = cores.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":["0d6879a535f14bc53be7c86de58142558c4f9eee","d6b8086d510892eddfabded3e60641cbe8bd7884","1607f0f76f30bb38ce4c6bf5542e7423babcf0aa","0265144286422ad99682a00904cc2536b79c8535","816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":["1d5f160125c0bc785bf95466c3633984b77845d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d5f160125c0bc785bf95466c3633984b77845d0","date":1585162097,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"462c81bfb611619a4867328837e70c876bd5a94f","date":1588355232,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, SolrMetricManager.ResolutionStrategy.IGNORE, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7b5fca5c4207413bd78695e460f6eb81bc2e99","date":1588356568,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, SolrMetricManager.ResolutionStrategy.IGNORE, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad14379f15be20a5f4871be82a276e5e69731fc","date":1599578304,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, SolrMetricManager.ResolutionStrategy.IGNORE, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap(map -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.putNoEx(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, SolrMetricManager.ResolutionStrategy.IGNORE, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    metricManager = coresInit.getMetricManager();\n    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n    final Set<String> hiddenSysProps = coresInit.getConfig().getMetricsConfig().getHiddenSysProps();\n    try {\n      metricManager.registerAll(registryName, new AltBufferPoolMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"buffers\");\n      metricManager.registerAll(registryName, new ClassLoadingGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"classes\");\n      metricManager.registerAll(registryName, new OperatingSystemMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"os\");\n      metricManager.registerAll(registryName, new GarbageCollectorMetricSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"gc\");\n      metricManager.registerAll(registryName, new MemoryUsageGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"memory\");\n      metricManager.registerAll(registryName, new ThreadStatesGaugeSet(), SolrMetricManager.ResolutionStrategy.IGNORE, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registryName, sysprops, metricTag, SolrMetricManager.ResolutionStrategy.IGNORE, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"462c81bfb611619a4867328837e70c876bd5a94f":["1d5f160125c0bc785bf95466c3633984b77845d0"],"1d5f160125c0bc785bf95466c3633984b77845d0":["43564cbb30b064675027cfb569564e8531096e97"],"bfc52860e6d13d034226a760813c59d984c6817a":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"43564cbb30b064675027cfb569564e8531096e97":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","bfc52860e6d13d034226a760813c59d984c6817a"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["462c81bfb611619a4867328837e70c876bd5a94f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bad14379f15be20a5f4871be82a276e5e69731fc":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["bad14379f15be20a5f4871be82a276e5e69731fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"462c81bfb611619a4867328837e70c876bd5a94f":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"1d5f160125c0bc785bf95466c3633984b77845d0":["462c81bfb611619a4867328837e70c876bd5a94f"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["1d5f160125c0bc785bf95466c3633984b77845d0"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["bad14379f15be20a5f4871be82a276e5e69731fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"bad14379f15be20a5f4871be82a276e5e69731fc":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}