{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","commits":[{"id":"b25aad9e32a4ea939af5033914bd68e852a5f13d","date":1476113868,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f14bb42d99cee711a55c826169b4c4bdab714ad","date":1497183903,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e322d5186d76764c8638aa79f72fd42a5aed70ef","date":1542622177,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return a tokenizer or tokenfilter here, this makes no sense\n        assertTrue(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#doTestCharFilter(String).mjava","sourceNew":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 3, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestCharFilter(String charfilter) throws IOException {\n    Class<? extends CharFilterFactory> factoryClazz = CharFilterFactory.lookupClass(charfilter);\n    CharFilterFactory factory = (CharFilterFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(assertingTokenizer, null, factory);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["b25aad9e32a4ea939af5033914bd68e852a5f13d","4f14bb42d99cee711a55c826169b4c4bdab714ad"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b25aad9e32a4ea939af5033914bd68e852a5f13d","4f14bb42d99cee711a55c826169b4c4bdab714ad"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b25aad9e32a4ea939af5033914bd68e852a5f13d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"4f14bb42d99cee711a55c826169b4c4bdab714ad":["b25aad9e32a4ea939af5033914bd68e852a5f13d"]},"commit2Childs":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b25aad9e32a4ea939af5033914bd68e852a5f13d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4f14bb42d99cee711a55c826169b4c4bdab714ad"],"28288370235ed02234a64753cdbf0c6ec096304a":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4f14bb42d99cee711a55c826169b4c4bdab714ad":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}