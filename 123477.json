{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      LeafSimScorer leafScorer = simScorer == null ? null\n          : new LeafSimScorer(simScorer, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE);\n      return new IntervalScorer(this, intervals, leafScorer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      LeafSimScorer leafScorer = simScorer == null ? null\n          : new LeafSimScorer(simScorer, context.reader(), field, scoreMode.needsScores());\n      return new IntervalScorer(this, intervals, leafScorer);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      LeafSimScorer leafScorer = simScorer == null ? null\n          : new LeafSimScorer(simScorer, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE);\n      return new IntervalScorer(this, intervals, leafScorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      return new IntervalScorer(this, intervals, intervalsSource.minExtent(), boost, scoreFunction);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      LeafSimScorer leafScorer = simScorer == null ? null\n          : new LeafSimScorer(simScorer, context.reader(), field, scoreMode.needsScores());\n      return new IntervalScorer(this, intervals, leafScorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      return new IntervalScorer(this, intervals, intervalsSource.minExtent(), boost, scoreFunction);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      IntervalIterator intervals = intervalsSource.intervals(field, context);\n      if (intervals == null)\n        return null;\n      return new IntervalScorer(this, intervals, intervalsSource.minExtent(), boost, scoreFunction);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["361b1afc99f68598c73d37074aec089c9c951586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"361b1afc99f68598c73d37074aec089c9c951586":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}