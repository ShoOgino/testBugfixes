{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#getMergedFieldInfos(IndexReader).mjava","commits":[{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader.\n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final Builder builder = new Builder(new FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader. \n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df509dda57128bbee86f84ad975b6e6a1b9f6463","date":1542404709,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader.\n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<LeafReaderContext> leaves = reader.leaves();\n    if (leaves.isEmpty()) {\n      return FieldInfos.EMPTY;\n    } else if (leaves.size() == 1) {\n      return leaves.get(0).reader().getFieldInfos();\n    } else {\n      final String softDeletesField = leaves.stream()\n          .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n          .filter(Objects::nonNull)\n          .findAny().orElse(null);\n      final Builder builder = new Builder(new FieldNumbers(softDeletesField));\n      for (final LeafReaderContext ctx : leaves) {\n        builder.add(ctx.reader().getFieldInfos());\n      }\n      return builder.finish();\n    }\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader.\n   *  <p>\n   *  NOTE: the returned field numbers will likely not\n   *  correspond to the actual field numbers in the underlying\n   *  readers, and codec metadata ({@link FieldInfo#getAttribute(String)}\n   *  will be unavailable.\n   */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final String softDeletesField = reader.leaves().stream()\n        .map(l -> l.reader().getFieldInfos().getSoftDeletesField())\n        .filter(Objects::nonNull)\n        .findAny().orElse(null);\n    final Builder builder = new Builder(new FieldNumbers(softDeletesField));\n    for(final LeafReaderContext ctx : reader.leaves()) {\n      builder.add(ctx.reader().getFieldInfos());\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df509dda57128bbee86f84ad975b6e6a1b9f6463":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df509dda57128bbee86f84ad975b6e6a1b9f6463"]},"commit2Childs":{"df509dda57128bbee86f84ad975b6e6a1b9f6463":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["df509dda57128bbee86f84ad975b6e6a1b9f6463"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}