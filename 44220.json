{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","commits":[{"id":"09fb4238d56f62faff1f0c866bee53facad482ec","date":1394631888,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** checks condition of the concatenation of two strings */\n  // note: this is pretty stupid, we really should subtract strip from the condition up front and just check the stem\n  // but this is a little bit more complicated.\n  private boolean checkCondition(int condition, char c1[], int c1off, int c1len, char c2[], int c2off, int c2len) {\n    if (condition != 0) {\n      CharacterRunAutomaton pattern = dictionary.patterns.get(condition);\n      int state = pattern.getInitialState();\n      for (int i = c1off; i < c1off + c1len; i++) {\n        state = pattern.step(state, c1[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      for (int i = c2off; i < c2off + c2len; i++) {\n        state = pattern.step(state, c2[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      return pattern.isAccept(state);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","sourceNew":"  /** checks condition of the concatenation of two strings */\n  // note: this is pretty stupid, we really should subtract strip from the condition up front and just check the stem\n  // but this is a little bit more complicated.\n  private boolean checkCondition(int condition, char c1[], int c1off, int c1len, char c2[], int c2off, int c2len) {\n    if (condition != 0) {\n      CharacterRunAutomaton pattern = dictionary.patterns.get(condition);\n      int state = 0;\n      for (int i = c1off; i < c1off + c1len; i++) {\n        state = pattern.step(state, c1[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      for (int i = c2off; i < c2off + c2len; i++) {\n        state = pattern.step(state, c2[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      return pattern.isAccept(state);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** checks condition of the concatenation of two strings */\n  // note: this is pretty stupid, we really should subtract strip from the condition up front and just check the stem\n  // but this is a little bit more complicated.\n  private boolean checkCondition(int condition, char c1[], int c1off, int c1len, char c2[], int c2off, int c2len) {\n    if (condition != 0) {\n      CharacterRunAutomaton pattern = dictionary.patterns.get(condition);\n      int state = pattern.getInitialState();\n      for (int i = c1off; i < c1off + c1len; i++) {\n        state = pattern.step(state, c1[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      for (int i = c2off; i < c2off + c2len; i++) {\n        state = pattern.step(state, c2[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      return pattern.isAccept(state);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#checkCondition(int,char[],int,int,char[],int,int).mjava","sourceNew":"  /** checks condition of the concatenation of two strings */\n  // note: this is pretty stupid, we really should subtract strip from the condition up front and just check the stem\n  // but this is a little bit more complicated.\n  private boolean checkCondition(int condition, char c1[], int c1off, int c1len, char c2[], int c2off, int c2len) {\n    if (condition != 0) {\n      CharacterRunAutomaton pattern = dictionary.patterns.get(condition);\n      int state = 0;\n      for (int i = c1off; i < c1off + c1len; i++) {\n        state = pattern.step(state, c1[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      for (int i = c2off; i < c2off + c2len; i++) {\n        state = pattern.step(state, c2[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      return pattern.isAccept(state);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** checks condition of the concatenation of two strings */\n  // note: this is pretty stupid, we really should subtract strip from the condition up front and just check the stem\n  // but this is a little bit more complicated.\n  private boolean checkCondition(int condition, char c1[], int c1off, int c1len, char c2[], int c2off, int c2len) {\n    if (condition != 0) {\n      CharacterRunAutomaton pattern = dictionary.patterns.get(condition);\n      int state = pattern.getInitialState();\n      for (int i = c1off; i < c1off + c1len; i++) {\n        state = pattern.step(state, c1[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      for (int i = c2off; i < c2off + c2len; i++) {\n        state = pattern.step(state, c2[i]);\n        if (state == -1) {\n          return false;\n        }\n      }\n      return pattern.isAccept(state);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["09fb4238d56f62faff1f0c866bee53facad482ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09fb4238d56f62faff1f0c866bee53facad482ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09fb4238d56f62faff1f0c866bee53facad482ec","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09fb4238d56f62faff1f0c866bee53facad482ec"],"09fb4238d56f62faff1f0c866bee53facad482ec":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}