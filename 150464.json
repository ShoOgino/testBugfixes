{"path":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,Directory).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,Directory).mjava","pathOld":"/dev/null","sourceNew":"  // test advanceTo, mixed with getting or not getting positions\n  // test that custom/null skipDocs work\n  // test: direct flex compared to flex on non flex on flex\n  // test with flex on one index and non-flex on the other\n  //   (two dirs above)\n  // temporarily force pre-flex emulation on flex emulation\n  //   on pre-flex segment (in back compat test)\n  // a sub-reader that has nonzero doc count but 100% are deleted\n  // foreign bitdocs\n  // advancing in DocsEnum, then next'ing, nextPosition'ing\n  // mutlti-reader w/ empty sub-reader\n  //   - eg from merge that had all del docs\n  //   - eg from empty flush\n  // make sure we test empty field (no terms)\n  //  created from empty field in doc, but also, from\n  //  removing all docs that had the field\n  // test 1 vs many segment index\n  // test multireader vs dir reader\n  // test bulk read api\n  // wrap reader as \"external\" reader -- double emulation test\n  public static void verifyFlexVsPreFlex(Random rand, Directory d) throws Exception {\n    IndexReader r = IndexReader.open(d);\n    verifyFlexVsPreFlex(rand, r);\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,Directory).mjava","sourceNew":null,"sourceOld":"  // test advanceTo, mixed with getting or not getting positions\n  // test that custom/null skipDocs work\n  // test: direct flex compared to flex on non flex on flex\n  // test with flex on one index and non-flex on the other\n  //   (two dirs above)\n  // temporarily force pre-flex emulation on flex emulation\n  //   on pre-flex segment (in back compat test)\n  // a sub-reader that has nonzero doc count but 100% are deleted\n  // foreign bitdocs\n  // advancing in DocsEnum, then next'ing, nextPosition'ing\n  // mutlti-reader w/ empty sub-reader\n  //   - eg from merge that had all del docs\n  //   - eg from empty flush\n  // make sure we test empty field (no terms)\n  //  created from empty field in doc, but also, from\n  //  removing all docs that had the field\n  // test 1 vs many segment index\n  // test multireader vs dir reader\n  // test bulk read api\n  // wrap reader as \"external\" reader -- double emulation test\n  public static void verifyFlexVsPreFlex(Random rand, Directory d) throws Exception {\n    IndexReader r = IndexReader.open(d);\n    verifyFlexVsPreFlex(rand, r);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,Directory).mjava","sourceNew":null,"sourceOld":"  // test advanceTo, mixed with getting or not getting positions\n  // test that custom/null skipDocs work\n  // test: direct flex compared to flex on non flex on flex\n  // test with flex on one index and non-flex on the other\n  //   (two dirs above)\n  // temporarily force pre-flex emulation on flex emulation\n  //   on pre-flex segment (in back compat test)\n  // a sub-reader that has nonzero doc count but 100% are deleted\n  // foreign bitdocs\n  // advancing in DocsEnum, then next'ing, nextPosition'ing\n  // mutlti-reader w/ empty sub-reader\n  //   - eg from merge that had all del docs\n  //   - eg from empty flush\n  // make sure we test empty field (no terms)\n  //  created from empty field in doc, but also, from\n  //  removing all docs that had the field\n  // test 1 vs many segment index\n  // test multireader vs dir reader\n  // test bulk read api\n  // wrap reader as \"external\" reader -- double emulation test\n  public static void verifyFlexVsPreFlex(Random rand, Directory d) throws Exception {\n    IndexReader r = IndexReader.open(d);\n    verifyFlexVsPreFlex(rand, r);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}