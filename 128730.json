{"path":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378c2b88b7dfbe3eeee469dc111ca860c2d73f35","date":1472215536,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          int valuesDocID = values.docID();\n          if (valuesDocID < doc) {\n            valuesDocID = values.advance(doc);\n          }\n          long value;\n          if (valuesDocID == doc) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          int valuesDocID = values.docID();\n          if (valuesDocID < doc) {\n            valuesDocID = values.advance(doc);\n          }\n          long value;\n          if (valuesDocID == doc) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          int valuesDocID = values.docID();\n          if (valuesDocID < doc) {\n            valuesDocID = values.advance(doc);\n          }\n          long value;\n          if (valuesDocID == doc) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        public void collect(int doc) {\n          list.add(new ScoreDoc(doc+base, (float)values.get(doc)));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          int valuesDocID = values.docID();\n          if (valuesDocID < doc) {\n            valuesDocID = values.advance(doc);\n          }\n          long value;\n          if (valuesDocID == doc) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          int valuesDocID = values.docID();\n          if (valuesDocID < doc) {\n            valuesDocID = values.advance(doc);\n          }\n          long value;\n          if (valuesDocID == doc) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd81b9f1e22432a668756e938bfb0835c1abb11b","date":1546254331,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), \"sort_i\");\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {}\n        \n        public void collect(int doc) throws IOException {\n          long value;\n          if (values.advanceExact(doc)) {\n            value = values.longValue();\n          } else {\n            value = 0;\n          }\n          list.add(new ScoreDoc(doc+base, (float) value));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"378c2b88b7dfbe3eeee469dc111ca860c2d73f35":["901e951cec2e6af4e503209a6721c8834db23279"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["901e951cec2e6af4e503209a6721c8834db23279","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["378c2b88b7dfbe3eeee469dc111ca860c2d73f35"],"901e951cec2e6af4e503209a6721c8834db23279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["901e951cec2e6af4e503209a6721c8834db23279","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd81b9f1e22432a668756e938bfb0835c1abb11b"]},"commit2Childs":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["bd81b9f1e22432a668756e938bfb0835c1abb11b"],"378c2b88b7dfbe3eeee469dc111ca860c2d73f35":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901e951cec2e6af4e503209a6721c8834db23279"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"901e951cec2e6af4e503209a6721c8834db23279":["378c2b88b7dfbe3eeee469dc111ca860c2d73f35","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}