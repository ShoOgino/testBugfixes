{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}