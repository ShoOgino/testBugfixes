{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","commits":[{"id":"4e622d1d7e4496e3a8c1709c84e5be91ced69889","date":1311534411,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.size()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6f4911f0dc139426f96861ac1f2f05a0fe837c6","date":1311588116,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.size()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a6f4911f0dc139426f96861ac1f2f05a0fe837c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a6f4911f0dc139426f96861ac1f2f05a0fe837c6":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"]},"commit2Childs":{"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["a6f4911f0dc139426f96861ac1f2f05a0fe837c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6f4911f0dc139426f96861ac1f2f05a0fe837c6":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}