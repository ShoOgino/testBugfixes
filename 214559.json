{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","commits":[{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"/dev/null","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"/dev/null","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"/dev/null","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Tuple tuple = new Tuple();\n\n      tuple.put(\"error\", shardError);\n      tuple.put(\"weights\", shardWeights);\n      tuple.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return tuple;\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Map map = new HashMap();\n\n      map.put(\"error\", shardError);\n      map.put(\"weights\", shardWeights);\n      map.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return new Tuple(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.LogitCall#call().mjava","sourceNew":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList res = response.getResponse();\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      @SuppressWarnings({\"unchecked\"})\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Tuple tuple = new Tuple();\n\n      tuple.put(\"error\", shardError);\n      tuple.put(\"weights\", shardWeights);\n      tuple.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return tuple;\n    }\n\n","sourceOld":"    public Tuple call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!tlogit}\");\n      params.add(\"feature\", feature);\n      params.add(\"terms\", TextLogitStream.toString(terms));\n      params.add(\"idfs\", TextLogitStream.toString(idfs));\n\n      for(Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      if(weights != null) {\n        params.add(\"weights\", TextLogitStream.toString(weights));\n      }\n\n      params.add(\"iteration\", Integer.toString(iteration));\n      params.add(\"outcome\", outcome);\n      params.add(\"positiveLabel\", Integer.toString(positiveLabel));\n      params.add(\"threshold\", Double.toString(threshold));\n      params.add(\"alpha\", Double.toString(learningRate));\n\n      QueryRequest  request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n\n      NamedList logit = (NamedList)res.get(\"logit\");\n\n      List<Double> shardWeights = (List<Double>)logit.get(\"weights\");\n      double shardError = (double)logit.get(\"error\");\n\n      Tuple tuple = new Tuple();\n\n      tuple.put(\"error\", shardError);\n      tuple.put(\"weights\", shardWeights);\n      tuple.put(\"evaluation\", logit.get(\"evaluation\"));\n\n      return tuple;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["01624b85de12fb02335810bdf325124e59040772"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"01624b85de12fb02335810bdf325124e59040772":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"b0b597c65628ca9e73913a07e81691f8229bae35":["01624b85de12fb02335810bdf325124e59040772","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["804a8d5358fe7b7563b85ee7838714d720b89272","b0b597c65628ca9e73913a07e81691f8229bae35"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"01624b85de12fb02335810bdf325124e59040772":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}