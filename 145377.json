{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","commits":[{"id":"f1be2065e7825e7d62009ea5339f317cb1274f9a","date":1510664015,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, suggestions.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30572b5bb51001316f9a67e632d09750dc627a53","date":1511445746,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, suggestions.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    if(useNodeset){\n      autoScalingjson = \"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 3}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, shard:'#EACH', nodeset :{ port : '8983'}}\" +\n          \"  ]\" +\n          \"}\";\n\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    if(useNodeset){\n      autoScalingjson = \"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 3}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, shard:'#EACH', nodeset :{ port : '8983'}}\" +\n          \"  ]\" +\n          \"}\";\n\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    if(useNodeset){\n      autoScalingjson = \"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 3}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, shard:'#EACH', nodeset :{ port : '8983'}}\" +\n          \"  ]\" +\n          \"}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    if(useNodeset){\n      autoScalingjson = \"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 3}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, shard:'#EACH', nodeset :{ port : '8983'}}\" +\n          \"  ]\" +\n          \"}\";\n\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPortSuggestions().mjava","sourceNew":null,"sourceOld":"  public void testPortSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    if(useNodeset){\n      autoScalingjson = \"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 3}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, shard:'#EACH', nodeset :{ port : '8983'}}\" +\n          \"  ]\" +\n          \"}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\"))).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testPortSuggestions.json\")));\n    assertEquals(4, suggestions.size());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      assertEquals(suggestionInfo.operation.getPath(), \"/c/c1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["f5a27e78e3d29dee02bab19ded25336471e96882","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["f5a27e78e3d29dee02bab19ded25336471e96882"],"30572b5bb51001316f9a67e632d09750dc627a53":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["30572b5bb51001316f9a67e632d09750dc627a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"30572b5bb51001316f9a67e632d09750dc627a53":["f5a27e78e3d29dee02bab19ded25336471e96882"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["30572b5bb51001316f9a67e632d09750dc627a53"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}