{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}