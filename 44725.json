{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","commits":[{"id":"90329759f82c33c8fdb14d8bc0db5e81d17934b8","date":1270913806,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = TermRangeFilter.newStringRange(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f9f2355d68aab1348539f7a1603279405e566a4":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["43b04c27924fe393e38e9f0986e32c634f261859"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["1f9f2355d68aab1348539f7a1603279405e566a4","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}