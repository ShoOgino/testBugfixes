{"path":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","commits":[{"id":"6935b9b8d197501fcc418760f4da3088ffb0ed3e","date":1082575124,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 1);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 1);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 2);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 3);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2","date":1084028779,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 1);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 1);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 2);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 1);\n    assertEquals (hits.id(0), 3);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (hits.length(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);    \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":["e04c0eb17ea72fec84603b9f7f83738d935a8e5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e04c0eb17ea72fec84603b9f7f83738d935a8e5e","date":1180566565,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = new Filter() {\n      public BitSet bits (IndexReader reader) {\n        BitSet bitset = new BitSet(5);\n        bitset.set(0, 5);\n        return bitset;\n      }\n    };\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);    \n  }\n\n","bugFix":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"bugIntro":["149f82651d1e396281d58808b8c03062649c54dd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"149f82651d1e396281d58808b8c03062649c54dd","date":1193047128,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = new Filter() {\n      public BitSet bits (IndexReader reader) {\n        BitSet bitset = new BitSet(5);\n        bitset.set(0, 5);\n        return bitset;\n      }\n    };\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":["e04c0eb17ea72fec84603b9f7f83738d935a8e5e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(\"sorter\")).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    Hits hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, new Sort(\"sorter\"));\n    assertEquals (1, hits.length());\n    assertEquals (1, hits.id(0));\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (1, hits.length());\n    assertEquals (3, hits.id(0));\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery);\n    assertEquals (0, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(\"sorter\")).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2":["6935b9b8d197501fcc418760f4da3088ffb0ed3e"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["149f82651d1e396281d58808b8c03062649c54dd"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e04c0eb17ea72fec84603b9f7f83738d935a8e5e":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"149f82651d1e396281d58808b8c03062649c54dd":["e04c0eb17ea72fec84603b9f7f83738d935a8e5e"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2"],"6935b9b8d197501fcc418760f4da3088ffb0ed3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6935b9b8d197501fcc418760f4da3088ffb0ed3e"],"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e04c0eb17ea72fec84603b9f7f83738d935a8e5e":["149f82651d1e396281d58808b8c03062649c54dd"],"6935b9b8d197501fcc418760f4da3088ffb0ed3e":["0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2"],"149f82651d1e396281d58808b8c03062649c54dd":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["e04c0eb17ea72fec84603b9f7f83738d935a8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}