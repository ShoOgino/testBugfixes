{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        File indexDir = new File(TEMP_DIR, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", Similarity.getDefault().encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a31c91eda919456f5f9237b086174385292f9935","date":1299074041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity().get(\"content\");\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        Similarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":null,"sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":null,"sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":null,"sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException {\n        Directory dir = newDirectory();\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        IndexReader reader = IndexReader.open(dir, false);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(0, \"content\", sim.encodeNormValue(2.0f));\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", sim.encodeNormValue(3.0f));\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0f3cee3d20b0c786e6fca20539454262e29edcab","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","a31c91eda919456f5f9237b086174385292f9935"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a31c91eda919456f5f9237b086174385292f9935"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a31c91eda919456f5f9237b086174385292f9935":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f2c5f0cb44df114db4228c8f77861714b5cabaea","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a31c91eda919456f5f9237b086174385292f9935","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0f3cee3d20b0c786e6fca20539454262e29edcab","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0f3cee3d20b0c786e6fca20539454262e29edcab","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f0b9507caf22f292ac0e5e59f62db4275adf4511","1291e4568eb7d9463d751627596ef14baf4c1603","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"a31c91eda919456f5f9237b086174385292f9935":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"962d04139994fce5193143ef35615499a9a96d78":[],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f0b9507caf22f292ac0e5e59f62db4275adf4511","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}