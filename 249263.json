{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"16fa358573e3c2508728b3c7c438a8c19a3f0ae4","date":1482846144,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    return metricNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf28d12ff32dc50412338f84022406e2be7d44f2","date":1483438921,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    return metricNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b16266db764c72c65ab2977b36da1436b4efbb9f","date":1483628123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["b16266db764c72c65ab2977b36da1436b4efbb9f"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["491c9672ec42582fe43960452dbd37f1c80fe0f0","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"bf28d12ff32dc50412338f84022406e2be7d44f2":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf28d12ff32dc50412338f84022406e2be7d44f2"],"b16266db764c72c65ab2977b36da1436b4efbb9f":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["bf28d12ff32dc50412338f84022406e2be7d44f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","b16266db764c72c65ab2977b36da1436b4efbb9f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"bf28d12ff32dc50412338f84022406e2be7d44f2":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"b16266db764c72c65ab2977b36da1436b4efbb9f":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["b16266db764c72c65ab2977b36da1436b4efbb9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f03e4bed5023ec3ef93a771b8888cae991cf448d","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["bf28d12ff32dc50412338f84022406e2be7d44f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}