{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91489a962261537277285219d9ee9ee40f4053c0","date":1341957256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.getTempDir(\"solr.xml\");\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.getTempDir(\"solr.xml\");\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.getTempDir(\"solr.xml\");\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = File.createTempFile(\"solr\", \".xml\", TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0","date":1356250502,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.getTempDir(\"solr.xml\");\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":["91489a962261537277285219d9ee9ee40f4053c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.getTempDir(\"solr.xml\");\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = _TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, dataDir);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, TEMP_DIR);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, createTempDir());\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, dataDir);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, dataDir);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, createTempDir());\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    Writer w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(((StringWriter) w).getBuffer().toString().getBytes(\"UTF-8\"));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, createTempDir());\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToString(tmpFile, \"UTF-8\").getBytes(\"UTF-8\"));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n\n    // again with default file\n    File tmpFile = new File(createTempDir(), \"solr.xml\");\n    serializer.persistFile(tmpFile, solrXMLDef);\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, createTempDir());\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n\n    // again with default file\n    File tmpFile = new File(createTempDir(), \"solr.xml\");\n    serializer.persistFile(tmpFile, solrXMLDef);\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n    \n    // again with default file\n    File tmpFile = TestUtil.createTempFile(\"solr.xml\", null, dataDir);\n    \n    serializer.persistFile(tmpFile, solrXMLDef);\n\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862bf0de4075dc8febeba1ba433bcf74c78d356e","date":1407456501,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#basicUsageTest().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void basicUsageTest() throws Exception {\n    SolrXMLSerializer serializer = new SolrXMLSerializer();\n    \n    SolrXMLDef solrXMLDef = getTestSolrXMLDef(defaultCoreNameKey,\n        defaultCoreNameVal, peristentKey, persistentVal, sharedLibKey,\n        sharedLibVal, adminPathKey, adminPathVal, shareSchemaKey,\n        shareSchemaVal, instanceDirKey, instanceDirVal);\n    \n    StringWriter w = new StringWriter();\n    try {\n      serializer.persist(w, solrXMLDef);\n    } finally {\n      w.close();\n    }\n    \n    assertResults(w.toString().getBytes(StandardCharsets.UTF_8));\n\n    // again with default file\n    File tmpFile = new File(createTempDir(), \"solr.xml\");\n    serializer.persistFile(tmpFile, solrXMLDef);\n    assertResults(FileUtils.readFileToByteArray(tmpFile));\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["91489a962261537277285219d9ee9ee40f4053c0","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"862bf0de4075dc8febeba1ba433bcf74c78d356e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["91489a962261537277285219d9ee9ee40f4053c0"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"91489a962261537277285219d9ee9ee40f4053c0":["c26f00b574427b55127e869b935845554afde1fa"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","91489a962261537277285219d9ee9ee40f4053c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","91489a962261537277285219d9ee9ee40f4053c0"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862bf0de4075dc8febeba1ba433bcf74c78d356e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["862bf0de4075dc8febeba1ba433bcf74c78d356e"],"862bf0de4075dc8febeba1ba433bcf74c78d356e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"c26f00b574427b55127e869b935845554afde1fa":["91489a962261537277285219d9ee9ee40f4053c0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"91489a962261537277285219d9ee9ee40f4053c0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}