{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testRandomAccessClones().mjava","commits":[{"id":"f54234b89a8a52b1cb430f514dc8e8b6e15790b6","date":1412368217,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testRandomAccessClones().mjava","pathOld":"/dev/null","sourceNew":"  /** This test opens two files from a compound stream and verifies that\n   *  their file positions are independent of each other.\n   */\n  public void testRandomAccessClones() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // Open two files\n    IndexInput e1 = cr.openInput(\"_123.f11\", newIOContext(random()));\n    IndexInput e2 = cr.openInput(\"_123.f3\", newIOContext(random()));\n    \n    IndexInput a1 = e1.clone();\n    IndexInput a2 = e2.clone();\n    \n    // Seek the first pair\n    e1.seek(100);\n    a1.seek(100);\n    assertEquals(100, e1.getFilePointer());\n    assertEquals(100, a1.getFilePointer());\n    byte be1 = e1.readByte();\n    byte ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now seek the second pair\n    e2.seek(1027);\n    a2.seek(1027);\n    assertEquals(1027, e2.getFilePointer());\n    assertEquals(1027, a2.getFilePointer());\n    byte be2 = e2.readByte();\n    byte ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Now make sure the first one didn't move\n    assertEquals(101, e1.getFilePointer());\n    assertEquals(101, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now more the first one again, past the buffer length\n    e1.seek(1910);\n    a1.seek(1910);\n    assertEquals(1910, e1.getFilePointer());\n    assertEquals(1910, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now make sure the second set didn't move\n    assertEquals(1028, e2.getFilePointer());\n    assertEquals(1028, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Move the second set back, again cross the buffer size\n    e2.seek(17);\n    a2.seek(17);\n    assertEquals(17, e2.getFilePointer());\n    assertEquals(17, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Finally, make sure the first set didn't move\n    // Now make sure the first one didn't move\n    assertEquals(1911, e1.getFilePointer());\n    assertEquals(1911, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    e1.close();\n    e2.close();\n    a1.close();\n    a2.close();\n    cr.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testRandomAccessClones().mjava","pathOld":"/dev/null","sourceNew":"  /** This test opens two files from a compound stream and verifies that\n   *  their file positions are independent of each other.\n   */\n  public void testRandomAccessClones() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // Open two files\n    IndexInput e1 = cr.openInput(\"_123.f11\", newIOContext(random()));\n    IndexInput e2 = cr.openInput(\"_123.f3\", newIOContext(random()));\n    \n    IndexInput a1 = e1.clone();\n    IndexInput a2 = e2.clone();\n    \n    // Seek the first pair\n    e1.seek(100);\n    a1.seek(100);\n    assertEquals(100, e1.getFilePointer());\n    assertEquals(100, a1.getFilePointer());\n    byte be1 = e1.readByte();\n    byte ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now seek the second pair\n    e2.seek(1027);\n    a2.seek(1027);\n    assertEquals(1027, e2.getFilePointer());\n    assertEquals(1027, a2.getFilePointer());\n    byte be2 = e2.readByte();\n    byte ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Now make sure the first one didn't move\n    assertEquals(101, e1.getFilePointer());\n    assertEquals(101, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now more the first one again, past the buffer length\n    e1.seek(1910);\n    a1.seek(1910);\n    assertEquals(1910, e1.getFilePointer());\n    assertEquals(1910, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now make sure the second set didn't move\n    assertEquals(1028, e2.getFilePointer());\n    assertEquals(1028, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Move the second set back, again cross the buffer size\n    e2.seek(17);\n    a2.seek(17);\n    assertEquals(17, e2.getFilePointer());\n    assertEquals(17, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Finally, make sure the first set didn't move\n    // Now make sure the first one didn't move\n    assertEquals(1911, e1.getFilePointer());\n    assertEquals(1911, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    e1.close();\n    e2.close();\n    a1.close();\n    a2.close();\n    cr.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}