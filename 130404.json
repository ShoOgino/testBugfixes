{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","commits":[{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"87697f76828e4cfc6dc898262de8898e5010703f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["87697f76828e4cfc6dc898262de8898e5010703f"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"87697f76828e4cfc6dc898262de8898e5010703f":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["39509e0276e70b38a5e76aa9d2c468955a1c7855","5f4e87790277826a2aea119328600dfb07761f32"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87697f76828e4cfc6dc898262de8898e5010703f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}