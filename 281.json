{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider snitch) {\n    replicaInfo = snitch.getReplicaInfo(node, params);\n    if (replicaInfo == null) replicaInfo = Collections.emptyMap();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = snitch.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider snitch) {\n    replicaInfo = snitch.getReplicaInfo(node, params);\n    if (replicaInfo == null) replicaInfo = Collections.emptyMap();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = snitch.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider snitch) {\n    replicaInfo = snitch.getReplicaInfo(node, params);\n    if (replicaInfo == null) replicaInfo = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = snitch.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider snitch) {\n    replicaInfo = snitch.getReplicaInfo(node, params);\n    if (replicaInfo == null) replicaInfo = Collections.emptyMap();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = snitch.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider snitch) {\n    replicaInfo = snitch.getReplicaInfo(node, params);\n    if (replicaInfo == null) replicaInfo = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = snitch.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"/dev/null","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"/dev/null","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, vals.get(s));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = dataProvider.getNodes().contains(node);\n    Map<String, Object> vals = isLive ? dataProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  public Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    Map<String, Object> vals = dataProvider.getNodeValues(node, params);\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,List[String],ClusterDataProvider).mjava","sourceNew":"  public Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = dataProvider.getNodes().contains(node);\n    Map<String, Object> vals = isLive ? dataProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  Row(String node, List<String> params, ClusterDataProvider dataProvider) {\n    collectionVsShardVsReplicas = dataProvider.getReplicaInfo(node, params);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = dataProvider.getNodes().contains(node);\n    Map<String, Object> vals = isLive ? dataProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1f6b20dc453cee198956989b90aa24bef0232bcf","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}