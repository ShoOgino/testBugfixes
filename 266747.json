{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","commits":[{"id":"dedd8b6e67b7ac7a77554562fddcf90e0031a95c","date":1391930936,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStart >0){\n      try {\n        Thread.sleep(pauseBeforeStart);\n      } catch (InterruptedException e) {\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStart >0){\n      try {\n        Thread.sleep(pauseBeforeStart);\n      } catch (InterruptedException e) {\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f66e99782bf385dfe6c7da3e696f3120888aabbe","date":1487531961,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","bugFix":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","d6196d0e7261e2d086efe76bc605f27cfce889be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6196d0e7261e2d086efe76bc605f27cfce889be","date":1526977604,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (!overseer.getZkController().isClosed() && !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (overseer.getZkController() == null || overseer.getZkController().getCoreContainer() == null || !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","bugFix":["f66e99782bf385dfe6c7da3e696f3120888aabbe"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    synchronized (this) {\n      if (!this.isClosed && !overseer.getZkController().getCoreContainer().isShutDown()) {\n        overseer.start(id);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    if (!overseer.getZkController().isClosed() && !overseer.getZkController().getCoreContainer().isShutDown()) {\n      overseer.start(id);\n    }\n  }\n\n","bugFix":["d6196d0e7261e2d086efe76bc605f27cfce889be","f66e99782bf385dfe6c7da3e696f3120888aabbe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    if (isClosed) {\n      return;\n    }\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    synchronized (this) {\n      if (!this.isClosed && !overseer.getZkController().getCoreContainer().isShutDown()) {\n        overseer.start(id);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    synchronized (this) {\n      if (!this.isClosed && !overseer.getZkController().getCoreContainer().isShutDown()) {\n        overseer.start(id);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    if (isClosed) {\n      return;\n    }\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if (pauseBeforeStartMs > 0) {\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    synchronized (this) {\n      if (!this.isClosed && !overseer.getZkController().getCoreContainer().isShutDown()) {\n        overseer.start(id);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException,\n      InterruptedException {\n    if (isClosed) {\n      return;\n    }\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(ID, id);\n\n    zkClient.makePath(leaderPath, Utils.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStartMs >0){\n      try {\n        Thread.sleep(pauseBeforeStartMs);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    synchronized (this) {\n      if (!this.isClosed && !overseer.getZkController().getCoreContainer().isShutDown()) {\n        overseer.start(id);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["f66e99782bf385dfe6c7da3e696f3120888aabbe"],"f66e99782bf385dfe6c7da3e696f3120888aabbe":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d6196d0e7261e2d086efe76bc605f27cfce889be"],"d6196d0e7261e2d086efe76bc605f27cfce889be":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["f66e99782bf385dfe6c7da3e696f3120888aabbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"f66e99782bf385dfe6c7da3e696f3120888aabbe":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"d6196d0e7261e2d086efe76bc605f27cfce889be":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["d6196d0e7261e2d086efe76bc605f27cfce889be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["f66e99782bf385dfe6c7da3e696f3120888aabbe"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}