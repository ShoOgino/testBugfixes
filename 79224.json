{"path":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","commits":[{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an iterator over the values in the set.\n   * hasNext() must return true for next() to return a valid value.\n   */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private boolean hasNext = zeroCount > 0;\n      private int i = -1;\n      private long value = 0;\n\n      @Override\n      public boolean hasNext() {\n        if (hasNext) {\n          // this is only executed the first time for the special case 0 value\n          return true;\n        }\n        while (++i < vals.length) {\n          value = vals[i];\n          if (value != 0) {\n            return hasNext = true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public long next() {\n        hasNext = false;\n        return value;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["774eb0ed00f0aecfe035cd81cb788cb176803d99"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an iterator over the values in the set.\n   * hasNext() must return true for next() to return a valid value.\n   */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private boolean hasNext = zeroCount > 0;\n      private int i = -1;\n      private long value = 0;\n\n      @Override\n      public boolean hasNext() {\n        if (hasNext) {\n          // this is only executed the first time for the special case 0 value\n          return true;\n        }\n        while (++i < vals.length) {\n          value = vals[i];\n          if (value != 0) {\n            return hasNext = true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public long next() {\n        hasNext = false;\n        return value;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"774eb0ed00f0aecfe035cd81cb788cb176803d99","date":1501193288,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","sourceNew":"  /** Returns an iterator over the values in the set. */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private int remainingValues = cardinality();\n      private int valsIdx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return remainingValues > 0;\n      }\n\n      @Override\n      public long next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        remainingValues--;\n\n        if (remainingValues == 0 && zeroCount > 0) {\n          return 0;\n        }\n\n        while (true) { // guaranteed to find another value if we get here\n          long value = vals[valsIdx++];\n          if (value != 0) {\n            return value;\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Returns an iterator over the values in the set.\n   * hasNext() must return true for next() to return a valid value.\n   */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private boolean hasNext = zeroCount > 0;\n      private int i = -1;\n      private long value = 0;\n\n      @Override\n      public boolean hasNext() {\n        if (hasNext) {\n          // this is only executed the first time for the special case 0 value\n          return true;\n        }\n        while (++i < vals.length) {\n          value = vals[i];\n          if (value != 0) {\n            return hasNext = true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public long next() {\n        hasNext = false;\n        return value;\n      }\n\n    };\n  }\n\n","bugFix":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/LongSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an iterator over the values in the set. */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private int remainingValues = cardinality();\n      private int valsIdx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return remainingValues > 0;\n      }\n\n      @Override\n      public long next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        remainingValues--;\n\n        if (remainingValues == 0 && zeroCount > 0) {\n          return 0;\n        }\n\n        while (true) { // guaranteed to find another value if we get here\n          long value = vals[valsIdx++];\n          if (value != 0) {\n            return value;\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","774eb0ed00f0aecfe035cd81cb788cb176803d99"],"774eb0ed00f0aecfe035cd81cb788cb176803d99":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["774eb0ed00f0aecfe035cd81cb788cb176803d99"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["774eb0ed00f0aecfe035cd81cb788cb176803d99"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"774eb0ed00f0aecfe035cd81cb788cb176803d99":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}