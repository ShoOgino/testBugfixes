{"path":"lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kNotPulsed().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kNotPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kNotPulsed().mjava","sourceNew":"  /** a variant, that uses pulsing, but uses a high TF to force pass thru to the underlying codec\n   */\n  public void test10kNotPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    int freqCutoff = _TestUtil.nextInt(random, 1, 10);\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(freqCutoff));\n    \n    File f = _TestUtil.getTempDir(\"10knotpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    final int freq = freqCutoff + 1;\n    \n    for (int i = 0; i < 10050; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < freq; j++) {\n        sb.append(df.format(i));\n        sb.append(' '); // whitespace\n      }\n      field.setValue(sb.toString());\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  /** a variant, that uses pulsing, but uses a high TF to force pass thru to the underlying codec\n   */\n  public void test10kNotPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    int freqCutoff = _TestUtil.nextInt(random, 1, 10);\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(freqCutoff));\n    \n    File f = _TestUtil.getTempDir(\"10knotpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    final int freq = freqCutoff + 1;\n    \n    for (int i = 0; i < 10050; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < freq; j++) {\n        sb.append(df.format(i));\n        sb.append(' '); // whitespace\n      }\n      field.setValue(sb.toString());\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kNotPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kNotPulsed().mjava","sourceNew":"  /** a variant, that uses pulsing, but uses a high TF to force pass thru to the underlying codec\n   */\n  public void test10kNotPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    int freqCutoff = _TestUtil.nextInt(random, 1, 10);\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(freqCutoff));\n    \n    File f = _TestUtil.getTempDir(\"10knotpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    final int freq = freqCutoff + 1;\n    \n    for (int i = 0; i < 10050; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < freq; j++) {\n        sb.append(df.format(i));\n        sb.append(' '); // whitespace\n      }\n      field.setValue(sb.toString());\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  /** a variant, that uses pulsing, but uses a high TF to force pass thru to the underlying codec\n   */\n  public void test10kNotPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    int freqCutoff = _TestUtil.nextInt(random, 1, 10);\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(freqCutoff));\n    \n    File f = _TestUtil.getTempDir(\"10knotpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    final int freq = freqCutoff + 1;\n    \n    for (int i = 0; i < 10050; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < freq; j++) {\n        sb.append(df.format(i));\n        sb.append(' '); // whitespace\n      }\n      field.setValue(sb.toString());\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}