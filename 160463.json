{"path":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new MockRAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new MockRAMDirectory();\n        performTest(rnd, dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(rnd, dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new MockRAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory(rnd);\n        performTest(rnd, dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(rnd, dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new MockRAMDirectory();\n        performTest(rnd, dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(rnd, dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory();\n        performTest(random, dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(random, dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory(rnd);\n        performTest(rnd, dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(rnd, dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory();\n        performTest(random, dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(random, dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new MockRAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        Directory dir = newDirectory();\n        performTest(dir);\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["8d47f68d60cbff5718136b945ba8c55982342f38"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["8d47f68d60cbff5718136b945ba8c55982342f38","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"8d47f68d60cbff5718136b945ba8c55982342f38":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"8d47f68d60cbff5718136b945ba8c55982342f38":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}