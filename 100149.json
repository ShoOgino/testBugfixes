{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private UsageTrackingFilterCachingPolicy(\n      FilterCachingPolicy.CacheOnLargeSegments segmentPolicy,\n      int historySize,\n      int minFrequencyCostlyFilters,\n      int minFrequencyCheapFilters,\n      int minFrequencyOtherFilters) {\n    this.segmentPolicy = segmentPolicy;\n    if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {\n      throw new IllegalArgumentException(\"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache\");\n    }\n    if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {\n      throw new IllegalArgumentException(\"The minimum frequencies should be less than the size of the history of filters that are being tracked\");\n    }\n    this.recentlyUsedFilters = new FrequencyTrackingRingBuffer<>(historySize);\n    this.minFrequencyCostlyFilters = minFrequencyCostlyFilters;\n    this.minFrequencyCheapFilters = minFrequencyCheapFilters;\n    this.minFrequencyOtherFilters = minFrequencyOtherFilters;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29fc95de48dc0c0b44cef66830a1f0c6c163ed26","date":1418988133,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","sourceNew":"  private UsageTrackingFilterCachingPolicy(\n      FilterCachingPolicy.CacheOnLargeSegments segmentPolicy,\n      int historySize,\n      int minFrequencyCostlyFilters,\n      int minFrequencyCheapFilters,\n      int minFrequencyOtherFilters) {\n    this.segmentPolicy = segmentPolicy;\n    if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {\n      throw new IllegalArgumentException(\"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache\");\n    }\n    if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {\n      throw new IllegalArgumentException(\"The minimum frequencies should be less than the size of the history of filters that are being tracked\");\n    }\n    this.recentlyUsedFilters = new FrequencyTrackingRingBuffer(historySize, SENTINEL);\n    this.minFrequencyCostlyFilters = minFrequencyCostlyFilters;\n    this.minFrequencyCheapFilters = minFrequencyCheapFilters;\n    this.minFrequencyOtherFilters = minFrequencyOtherFilters;\n  }\n\n","sourceOld":"  private UsageTrackingFilterCachingPolicy(\n      FilterCachingPolicy.CacheOnLargeSegments segmentPolicy,\n      int historySize,\n      int minFrequencyCostlyFilters,\n      int minFrequencyCheapFilters,\n      int minFrequencyOtherFilters) {\n    this.segmentPolicy = segmentPolicy;\n    if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {\n      throw new IllegalArgumentException(\"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache\");\n    }\n    if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {\n      throw new IllegalArgumentException(\"The minimum frequencies should be less than the size of the history of filters that are being tracked\");\n    }\n    this.recentlyUsedFilters = new FrequencyTrackingRingBuffer<>(historySize);\n    this.minFrequencyCostlyFilters = minFrequencyCostlyFilters;\n    this.minFrequencyCheapFilters = minFrequencyCheapFilters;\n    this.minFrequencyOtherFilters = minFrequencyOtherFilters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  private UsageTrackingFilterCachingPolicy(\n      FilterCachingPolicy.CacheOnLargeSegments segmentPolicy,\n      int historySize,\n      int minFrequencyCostlyFilters,\n      int minFrequencyCheapFilters,\n      int minFrequencyOtherFilters) {\n    this.segmentPolicy = segmentPolicy;\n    if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {\n      throw new IllegalArgumentException(\"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache\");\n    }\n    if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {\n      throw new IllegalArgumentException(\"The minimum frequencies should be less than the size of the history of filters that are being tracked\");\n    }\n    this.recentlyUsedFilters = new FrequencyTrackingRingBuffer(historySize, SENTINEL);\n    this.minFrequencyCostlyFilters = minFrequencyCostlyFilters;\n    this.minFrequencyCheapFilters = minFrequencyCheapFilters;\n    this.minFrequencyOtherFilters = minFrequencyOtherFilters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#UsageTrackingFilterCachingPolicy(FilterCachingPolicy.CacheOnLargeSegments,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  private UsageTrackingFilterCachingPolicy(\n      FilterCachingPolicy.CacheOnLargeSegments segmentPolicy,\n      int historySize,\n      int minFrequencyCostlyFilters,\n      int minFrequencyCheapFilters,\n      int minFrequencyOtherFilters) {\n    this.segmentPolicy = segmentPolicy;\n    if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {\n      throw new IllegalArgumentException(\"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache\");\n    }\n    if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {\n      throw new IllegalArgumentException(\"The minimum frequencies should be less than the size of the history of filters that are being tracked\");\n    }\n    this.recentlyUsedFilters = new FrequencyTrackingRingBuffer(historySize, SENTINEL);\n    this.minFrequencyCostlyFilters = minFrequencyCostlyFilters;\n    this.minFrequencyCheapFilters = minFrequencyCheapFilters;\n    this.minFrequencyOtherFilters = minFrequencyOtherFilters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}