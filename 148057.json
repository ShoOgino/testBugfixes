{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","commits":[{"id":"28362e467ec4ff01feed97ed36bf8582304d9430","date":1146693735,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aab4f145483c030426d905ddf07c3eac83346d22","date":1179896078,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n    \n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28362e467ec4ff01feed97ed36bf8582304d9430":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["aab4f145483c030426d905ddf07c3eac83346d22"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aab4f145483c030426d905ddf07c3eac83346d22":["28362e467ec4ff01feed97ed36bf8582304d9430"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"28362e467ec4ff01feed97ed36bf8582304d9430":["aab4f145483c030426d905ddf07c3eac83346d22"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28362e467ec4ff01feed97ed36bf8582304d9430"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"aab4f145483c030426d905ddf07c3eac83346d22":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}