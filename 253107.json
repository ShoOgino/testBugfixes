{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","commits":[{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["f9efc72acdea22f5285be0a808f8bba51bb8e367"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9efc72acdea22f5285be0a808f8bba51bb8e367","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}