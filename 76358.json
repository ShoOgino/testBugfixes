{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","commits":[{"id":"d4ddf965cea25006a6e621cc031c3bc69863ff4d","date":1474564021,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.fields.containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.fields.containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.fields.containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.fields.containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#read().mjava","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.getFields().containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","sourceOld":"  @Override\n  public Tuple read() throws IOException {\n    \n    Tuple tuple = tupleSource.read();\n    if(tuple.EOF){\n      if(docsSinceCommit > 0){\n        sendCommit();\n      }\n    }\n    else{\n      // if the read document contains field 'batchIndexed' then it's a summary\n      // document and we can update our count based on it's value. If not then \n      // just increment by 1\n      if(tuple.fields.containsKey(UpdateStream.BATCH_INDEXED_FIELD_NAME) && isInteger(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME))){\n        docsSinceCommit += Integer.parseInt(tuple.getString(UpdateStream.BATCH_INDEXED_FIELD_NAME));\n      }\n      else{\n        docsSinceCommit += 1;\n      }\n      \n      if(commitBatchSize > 0 && docsSinceCommit >= commitBatchSize){\n        // if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()\n        sendCommit();\n      }\n    }\n    \n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"126d6ad24eed13163ba0959435d5a80e5672837c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4ddf965cea25006a6e621cc031c3bc69863ff4d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","126d6ad24eed13163ba0959435d5a80e5672837c"],"804a8d5358fe7b7563b85ee7838714d720b89272":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["126d6ad24eed13163ba0959435d5a80e5672837c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["126d6ad24eed13163ba0959435d5a80e5672837c","d4ddf965cea25006a6e621cc031c3bc69863ff4d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["804a8d5358fe7b7563b85ee7838714d720b89272","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}