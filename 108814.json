{"path":"solr/core/src/java/org/apache/solr/rest/RestManager#deleteManagedResource(ManagedResource).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#deleteManagedResource(ManagedResource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a managed resource if it is not being used by any Solr components. \n   */\n  public synchronized void deleteManagedResource(ManagedResource res) {\n    String resourceId = res.getResourceId();\n    ManagedResourceRegistration existingReg = registry.registered.get(resourceId);\n    int numObservers = existingReg.observers.size();\n    if (numObservers > 0) {\n      String errMsg = \n          String.format(Locale.ROOT,\n              \"Cannot delete managed resource %s as it is being used by %d Solr components\",\n              resourceId, numObservers);\n      throw new SolrException(ErrorCode.FORBIDDEN, errMsg);\n    }\n    \n    registry.registered.remove(resourceId);\n    managed.remove(resourceId);\n    try {\n      res.onResourceDeleted();\n    } catch (IOException e) {\n      // the resource is already deleted so just log this\n      log.error(\"Error when trying to clean-up after deleting \"+resourceId, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#deleteManagedResource(ManagedResource).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#deleteManagedResource(ManagedResource).mjava","sourceNew":"  /**\n   * Deletes a managed resource if it is not being used by any Solr components. \n   */\n  public synchronized void deleteManagedResource(ManagedResource res) {\n    String resourceId = res.getResourceId();\n    ManagedResourceRegistration existingReg = registry.registered.get(resourceId);\n    int numObservers = existingReg.observers.size();\n    if (numObservers > 0) {\n      String errMsg = \n          String.format(Locale.ROOT,\n              \"Cannot delete managed resource %s as it is being used by %d Solr components\",\n              resourceId, numObservers);\n      throw new SolrException(ErrorCode.FORBIDDEN, errMsg);\n    }\n    \n    registry.registered.remove(resourceId);\n    managed.remove(resourceId);\n    try {\n      res.onResourceDeleted();\n    } catch (IOException e) {\n      // the resource is already deleted so just log this\n      log.error(\"Error when trying to clean-up after deleting {}\",resourceId, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes a managed resource if it is not being used by any Solr components. \n   */\n  public synchronized void deleteManagedResource(ManagedResource res) {\n    String resourceId = res.getResourceId();\n    ManagedResourceRegistration existingReg = registry.registered.get(resourceId);\n    int numObservers = existingReg.observers.size();\n    if (numObservers > 0) {\n      String errMsg = \n          String.format(Locale.ROOT,\n              \"Cannot delete managed resource %s as it is being used by %d Solr components\",\n              resourceId, numObservers);\n      throw new SolrException(ErrorCode.FORBIDDEN, errMsg);\n    }\n    \n    registry.registered.remove(resourceId);\n    managed.remove(resourceId);\n    try {\n      res.onResourceDeleted();\n    } catch (IOException e) {\n      // the resource is already deleted so just log this\n      log.error(\"Error when trying to clean-up after deleting \"+resourceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}