{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","commits":[{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addSolrXml();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    // Should just blow up here.\n    CoreContainer cc = null;\n    try {\n      cc = init();\n    } catch (SolrException se) {\n      assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n      assertTrue(se.getCause().getMessage().indexOf(\"More than one core defined for core named core1\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","sourceNew":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      String msg = cc.getBadCoreMessage(\"core1\");\n      assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      assertTrue(\"Should have found multiple cores with same data dir\", msg.contains(\"More than one core points to data dir\"));\n      try {\n        cc.getCore(\"core1\");\n      } catch (SolrException se) {\n        assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n        msg = se.getMessage();\n        assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n        assertTrue(\"Should have found multiple cores with same data dir\", msg.contains(\"More than one core points to data dir\"));\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addSolrXml();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    // Should just blow up here.\n    CoreContainer cc = null;\n    try {\n      cc = init();\n    } catch (SolrException se) {\n      assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n      assertTrue(se.getCause().getMessage().indexOf(\"More than one core defined for core named core1\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","sourceNew":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      String msg = cc.getBadCoreMessage(\"core1\");\n      assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      try {\n        cc.getCore(\"core1\");\n      } catch (SolrException se) {\n        assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n        msg = se.getMessage();\n        assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      String msg = cc.getBadCoreMessage(\"core1\");\n      assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      assertTrue(\"Should have found multiple cores with same data dir\", msg.contains(\"More than one core points to data dir\"));\n      try {\n        cc.getCore(\"core1\");\n      } catch (SolrException se) {\n        assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n        msg = se.getMessage();\n        assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n        assertTrue(\"Should have found multiple cores with same data dir\", msg.contains(\"More than one core points to data dir\"));\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testCoresWithSameNameErrorTransient().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCoresWithSameNameErrorTransient() throws Exception {\n    setMeUp();\n    addCoreWithPropsDir(\"core1_1\", makeCorePropFile(\"core1\", true, false));\n    addCoreWithPropsDir(\"core1_2\", makeCorePropFile(\"core1\", true, false));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      String msg = cc.getBadCoreMessage(\"core1\");\n      assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      try {\n        cc.getCore(\"core1\");\n      } catch (SolrException se) {\n        assertEquals(\"Should be returning proper error code of 500\", 500, se.code());\n        msg = se.getMessage();\n        assertTrue(\"Should have found multiple cores with same name\", msg.contains(\"More than one core defined for core named 'core1'\"));\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9409650933cc688e77e565092a25e58adfc2e18d":["3278df77f7f499b55fdb79861c0641450444e7d0"],"3278df77f7f499b55fdb79861c0641450444e7d0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9409650933cc688e77e565092a25e58adfc2e18d"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["e475642767c688ede5728d7918326f70b4e0bf3a"],"9409650933cc688e77e565092a25e58adfc2e18d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"3278df77f7f499b55fdb79861c0641450444e7d0":["9409650933cc688e77e565092a25e58adfc2e18d"],"e475642767c688ede5728d7918326f70b4e0bf3a":["3278df77f7f499b55fdb79861c0641450444e7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}