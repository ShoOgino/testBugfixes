{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[Scorer],List[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<Scorer> required, List<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[Scorer],List[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<Scorer> required, List<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c5e33ebba9142b231cb81ff06dcccccbfcd8414","date":1505832411,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Collection[Scorer],Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, Collection<Scorer> required, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n    this.required = required;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7c5e33ebba9142b231cb81ff06dcccccbfcd8414"],"7c5e33ebba9142b231cb81ff06dcccccbfcd8414":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["7c5e33ebba9142b231cb81ff06dcccccbfcd8414"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","7c5e33ebba9142b231cb81ff06dcccccbfcd8414","302d34f2c66e8d489ee13078305c330cbf67b226"],"7c5e33ebba9142b231cb81ff06dcccccbfcd8414":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","3c5054bf15748079a041f921a9178e8fe84f1806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}