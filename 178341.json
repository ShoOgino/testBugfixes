{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuffer docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuffer docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","date":1272391185,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuffer docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}