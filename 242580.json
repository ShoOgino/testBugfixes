{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","commits":[{"id":"4897c5b415f476d84ec970a19c41510645887526","date":1342627582,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f691b2065be171149c111fe366ff3e7572e32fb1","date":1344356381,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * with this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @param directory\n   * @throws IOException \n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On close all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On shutdown all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#doneWithDirectory(Directory).mjava","sourceNew":"  /**\n   * Indicates a Directory will no longer be used, and when its ref count\n   * hits 0, it can be closed. On close all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","sourceOld":"  /**\n   * Indicates a Directory will no longer be used, and when it's ref count\n   * hits 0, it can be closed. On close all directories will be closed\n   * whether this has been called or not. This is simply to allow early cleanup.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void doneWithDirectory(Directory directory) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f691b2065be171149c111fe366ff3e7572e32fb1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f691b2065be171149c111fe366ff3e7572e32fb1"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4897c5b415f476d84ec970a19c41510645887526"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4897c5b415f476d84ec970a19c41510645887526"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4897c5b415f476d84ec970a19c41510645887526":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","f691b2065be171149c111fe366ff3e7572e32fb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f691b2065be171149c111fe366ff3e7572e32fb1":["4897c5b415f476d84ec970a19c41510645887526"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","4897c5b415f476d84ec970a19c41510645887526"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4897c5b415f476d84ec970a19c41510645887526":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","f691b2065be171149c111fe366ff3e7572e32fb1"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f691b2065be171149c111fe366ff3e7572e32fb1":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}