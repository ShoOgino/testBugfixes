{"path":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the sequential sub readers that this reader is\n   *  logically composed of.  IndexSearcher uses this API to\n   *  drive searching by one sub reader at a time.  If this\n   *  reader is not composed of sequential child readers, it\n   *  should return null.  If this method returns an empty\n   *  array, that means this reader is a null reader (for\n   *  example a MultiReader that has no sub readers).*/\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3688ee2a200d89c6fad03ca69c9c795834ce3209","date":1234695396,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: for a MultiSegmentReader, which is obtained by\n   *  {@link #open} when the index has more than one\n   *  segment, you should not use the sub-readers returned\n   *  by this method to make any changes (setNorm,\n   *  deleteDocument, etc.).  Doing so will likely lead to\n   *  index corruption.  Use the parent reader instead. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Returns the sequential sub readers that this reader is\n   *  logically composed of.  IndexSearcher uses this API to\n   *  drive searching by one sub reader at a time.  If this\n   *  reader is not composed of sequential child readers, it\n   *  should return null.  If this method returns an empty\n   *  array, that means this reader is a null reader (for\n   *  example a MultiReader that has no sub readers).*/\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: for a MultiSegmentReader, which is obtained by\n   *  {@link #open} when the index has more than one\n   *  segment, you should not use the sub-readers returned\n   *  by this method to make any changes (setNorm,\n   *  deleteDocument, etc.).  Doing so will likely lead to\n   *  index corruption.  Use the parent reader instead. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"63bc3238545c6012bd44f5d294077997f236bc4e":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}