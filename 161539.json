{"path":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#computeCommonPrefixLengthAndBuildHistogram(int,int,int,int[]).mjava","commits":[{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#computeCommonPrefixLengthAndBuildHistogram(int,int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Build a histogram of the number of values per {@link #getBucket(int, int) bucket}\n   *  and return a common prefix length for all visited values.\n   *  @see #buildHistogram */\n  private int computeCommonPrefixLengthAndBuildHistogram(int from, int to, int k, int[] histogram) {\n    final int[] commonPrefix = this.commonPrefix;\n    int commonPrefixLength = Math.min(commonPrefix.length, maxLength - k);\n    for (int j = 0; j < commonPrefixLength; ++j) {\n      final int b = byteAt(from, k + j);\n      commonPrefix[j] = b;\n      if (b == -1) {\n        commonPrefixLength = j + 1;\n        break;\n      }\n    }\n\n    int i;\n    outer: for (i = from + 1; i < to; ++i) {\n      for (int j = 0; j < commonPrefixLength; ++j) {\n        final int b = byteAt(i, k + j);\n        if (b != commonPrefix[j]) {\n          commonPrefixLength = j;\n          if (commonPrefixLength == 0) { // we have no common prefix\n            histogram[commonPrefix[0] + 1] = i - from;\n            histogram[b + 1] = 1;\n            break outer;\n          }\n          break;\n        }\n      }\n    }\n\n    if (i < to) {\n      // the loop got broken because there is no common prefix\n      assert commonPrefixLength == 0;\n      buildHistogram(i + 1, to, k, histogram);\n    } else {\n      assert commonPrefixLength > 0;\n      histogram[commonPrefix[0] + 1] = to - from;\n    }\n\n    return commonPrefixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#computeCommonPrefixLengthAndBuildHistogram(int,int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Build a histogram of the number of values per {@link #getBucket(int, int) bucket}\n   *  and return a common prefix length for all visited values.\n   *  @see #buildHistogram */\n  private int computeCommonPrefixLengthAndBuildHistogram(int from, int to, int k, int[] histogram) {\n    final int[] commonPrefix = this.commonPrefix;\n    int commonPrefixLength = Math.min(commonPrefix.length, maxLength - k);\n    for (int j = 0; j < commonPrefixLength; ++j) {\n      final int b = byteAt(from, k + j);\n      commonPrefix[j] = b;\n      if (b == -1) {\n        commonPrefixLength = j + 1;\n        break;\n      }\n    }\n\n    int i;\n    outer: for (i = from + 1; i < to; ++i) {\n      for (int j = 0; j < commonPrefixLength; ++j) {\n        final int b = byteAt(i, k + j);\n        if (b != commonPrefix[j]) {\n          commonPrefixLength = j;\n          if (commonPrefixLength == 0) { // we have no common prefix\n            histogram[commonPrefix[0] + 1] = i - from;\n            histogram[b + 1] = 1;\n            break outer;\n          }\n          break;\n        }\n      }\n    }\n\n    if (i < to) {\n      // the loop got broken because there is no common prefix\n      assert commonPrefixLength == 0;\n      buildHistogram(i + 1, to, k, histogram);\n    } else {\n      assert commonPrefixLength > 0;\n      histogram[commonPrefix[0] + 1] = to - from;\n    }\n\n    return commonPrefixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#computeCommonPrefixLengthAndBuildHistogram(int,int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Build a histogram of the number of values per {@link #getBucket(int, int) bucket}\n   *  and return a common prefix length for all visited values.\n   *  @see #buildHistogram */\n  private int computeCommonPrefixLengthAndBuildHistogram(int from, int to, int k, int[] histogram) {\n    final int[] commonPrefix = this.commonPrefix;\n    int commonPrefixLength = Math.min(commonPrefix.length, maxLength - k);\n    for (int j = 0; j < commonPrefixLength; ++j) {\n      final int b = byteAt(from, k + j);\n      commonPrefix[j] = b;\n      if (b == -1) {\n        commonPrefixLength = j + 1;\n        break;\n      }\n    }\n\n    int i;\n    outer: for (i = from + 1; i < to; ++i) {\n      for (int j = 0; j < commonPrefixLength; ++j) {\n        final int b = byteAt(i, k + j);\n        if (b != commonPrefix[j]) {\n          commonPrefixLength = j;\n          if (commonPrefixLength == 0) { // we have no common prefix\n            histogram[commonPrefix[0] + 1] = i - from;\n            histogram[b + 1] = 1;\n            break outer;\n          }\n          break;\n        }\n      }\n    }\n\n    if (i < to) {\n      // the loop got broken because there is no common prefix\n      assert commonPrefixLength == 0;\n      buildHistogram(i + 1, to, k, histogram);\n    } else {\n      assert commonPrefixLength > 0;\n      histogram[commonPrefix[0] + 1] = to - from;\n    }\n\n    return commonPrefixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}