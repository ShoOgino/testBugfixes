{"path":"backwards/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}