{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","commits":[{"id":"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe","date":1451338931,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id==1\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id=='1'\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id==1\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id=='1'\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id==1\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdatesOnNonStoredDocValuesMulti().mjava","sourceNew":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id=='1'\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  @Test\n  public void testAtomicUpdatesOnNonStoredDocValuesMulti() throws Exception {\n    assertU(adoc(sdoc(\"id\", 1, \"title\", \"title1\", \"multi_ii_dvo\", 100, \"multi_ii_dvo\", Integer.MAX_VALUE)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 1, \"title\", ImmutableMap.of(\"set\", \"newtitle1\"))));\n    assertU(commit());\n\n    // test that non stored multivalued docvalues was carried forward for a non docvalues update\n    assertJQ(req(\"q\", \"id:1\"),\n        \"/response/docs/[0]/id==1\",\n        \"/response/docs/[0]/title/[0]=='newtitle1'\",\n        \"/response/docs/[0]/multi_ii_dvo/[0]==100\",\n        \"/response/docs/[0]/multi_ii_dvo/[1]==\" + Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe"],"28288370235ed02234a64753cdbf0c6ec096304a":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}