{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates[i];\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","date":1335212037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates[i];\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates[i];\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates.get(i);\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates[i];\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    for (ThreadState state : threadStates) {\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final int limit = numThreadStatesActive;\n    for (int i = 0; i < limit; i++) {\n      final ThreadState state = threadStates.get(i);\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    for (ThreadState state : threadStates) {\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    for (ThreadState state : threadStates) {\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    for (ThreadState state : threadStates) {\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    for (ThreadState state : threadStates) {\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8881d151c969a46b4293caa77faa7ecd63239100":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"f492fe129985750df09c8dac738aecc503158bb3":["8881d151c969a46b4293caa77faa7ecd63239100"],"6483e4260c08168709c02238ae083a51519a28dd":["8881d151c969a46b4293caa77faa7ecd63239100","f492fe129985750df09c8dac738aecc503158bb3"],"191128ac5b85671b1671e2c857437694283b6ebf":["8881d151c969a46b4293caa77faa7ecd63239100","6483e4260c08168709c02238ae083a51519a28dd"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8881d151c969a46b4293caa77faa7ecd63239100","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8881d151c969a46b4293caa77faa7ecd63239100":["f492fe129985750df09c8dac738aecc503158bb3","6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f492fe129985750df09c8dac738aecc503158bb3":["6483e4260c08168709c02238ae083a51519a28dd"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["8881d151c969a46b4293caa77faa7ecd63239100"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}