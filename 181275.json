{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}