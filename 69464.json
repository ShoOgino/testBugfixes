{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    CodecProvider.setDefaultCodec(_TestUtil.getTestCodec());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35534ac782c9c9d1227a10245ab7729d9eef22f","date":1279904940,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    //nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    CodecProvider.setDefaultCodec(_TestUtil.getTestCodec());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec","date":1279906406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n    //nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    //nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().register(new PreFlexRWCodec(null));\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n    //nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399a364d374f2132b6d9ff9fd7f997a9f2ef734f","date":1279978822,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().register(new PreFlexRWCodec(null));\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().register(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = TEST_CODEC;\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = _TestUtil.getTestCodec();\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = TEST_CODEC;\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108e81824177a1a9f2507addadb8894e1cdf9afc","date":1280934266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    codec = installTestCodecs();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = TEST_CODEC;\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e49d7950c2623fba7129a12bfc1b773bdd38f1b","date":1281317143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    codec = installTestCodecs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockRAMDirectory,StackTraceElement[]>());\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockRAMDirectory,StackTraceElement[]>());\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    codec = installTestCodecs();\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(seedRnd) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(seedRnd) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#beforeClassLuceneTestCaseJ4().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    codec = TEST_CODEC;\n    if (codec.equals(\"random\"))\n      codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];\n\n    // If we're running w/ PreFlex codec we must swap in the\n    // test-only PreFlexRW codec (since core PreFlex can\n    // only read segments):\n    if (codec.equals(\"PreFlex\")) {\n      preFlexSav = installPreFlexRW();\n    } \n\n    CodecProvider.setDefaultCodec(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"1ca38aecd0204be91049ec782668f642a68d9935":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"43b04c27924fe393e38e9f0986e32c634f261859":["a05409176bd65129d67a785ee70e881e238a9aef"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["e35534ac782c9c9d1227a10245ab7729d9eef22f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","108e81824177a1a9f2507addadb8894e1cdf9afc"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["1ca38aecd0204be91049ec782668f642a68d9935"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["e35534ac782c9c9d1227a10245ab7729d9eef22f"],"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1ca38aecd0204be91049ec782668f642a68d9935":[],"108e81824177a1a9f2507addadb8894e1cdf9afc":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"a05409176bd65129d67a785ee70e881e238a9aef":["43b04c27924fe393e38e9f0986e32c634f261859"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}