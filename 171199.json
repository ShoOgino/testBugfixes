{"path":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicIndexReader).mjava","commits":[{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(IndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicIndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(IndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        return terms.iterator(null);\n      } else {\n        return null;\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicIndexReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicIndexReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}