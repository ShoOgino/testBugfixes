{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\"+collection+ \"/terms\";\r\n    try {\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          zkClient.makePath(path, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n      path += \"/\"+shard;\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          Map<String, Long> initialTerms = new HashMap<>();\r\n          zkClient.create(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n    }  catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection:\" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection:\" + collection, e);\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdaba0a5669b9525668d79c41f87bb5c067c03e4","date":1521113339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","sourceNew":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\"+collection+ \"/terms\";\r\n    try {\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          zkClient.makePath(path, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n      path += \"/\"+shard;\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          Map<String, Long> initialTerms = new HashMap<>();\r\n          zkClient.create(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n    }  catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\"+collection+ \"/terms\";\r\n    try {\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          zkClient.makePath(path, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n      path += \"/\"+shard;\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          Map<String, Long> initialTerms = new HashMap<>();\r\n          zkClient.create(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n    }  catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection:\" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection:\" + collection, e);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","sourceNew":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\" + collection + \"/terms\";\r\n    try {\r\n      path += \"/\" + shard;\r\n\r\n      try {\r\n        Map<String,Long> initialTerms = new HashMap<>();\r\n        zkClient.makePath(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n      } catch (KeeperException.NodeExistsException e) {\r\n        // it's okay if another beats us creating the node\r\n      }\r\n\r\n    } catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\r\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\r\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\"+collection+ \"/terms\";\r\n    try {\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          zkClient.makePath(path, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n      path += \"/\"+shard;\r\n      if (!zkClient.exists(path, true)) {\r\n        try {\r\n          Map<String, Long> initialTerms = new HashMap<>();\r\n          zkClient.create(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n        } catch (KeeperException.NodeExistsException e) {\r\n          // it's okay if another beats us creating the node\r\n        }\r\n      }\r\n    }  catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    }\r\n  }\r\n\n","bugFix":["84f20f331d8001864545c7021812d8c6509c7593","fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermNodeExist().mjava","sourceNew":"  /**\n   * Create correspond ZK term node\n   */\n  private void ensureTermNodeExist() {\n    String path = \"/collections/\" + collection + \"/terms\";\n    try {\n      path += \"/\" + shard;\n\n      try {\n        Map<String,Long> initialTerms = new HashMap<>();\n        zkClient.makePath(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        // it's okay if another beats us creating the node\n      }\n\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Create correspond ZK term node\r\n   */\r\n  private void ensureTermNodeExist() {\r\n    String path = \"/collections/\" + collection + \"/terms\";\r\n    try {\r\n      path += \"/\" + shard;\r\n\r\n      try {\r\n        Map<String,Long> initialTerms = new HashMap<>();\r\n        zkClient.makePath(path, Utils.toJSON(initialTerms), CreateMode.PERSISTENT, true);\r\n      } catch (KeeperException.NodeExistsException e) {\r\n        // it's okay if another beats us creating the node\r\n      }\r\n\r\n    } catch (InterruptedException e) {\r\n      Thread.interrupted();\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\r\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    } catch (KeeperException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\r\n          \"Error creating shard term node in Zookeeper for collection: \" + collection, e);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["84f20f331d8001864545c7021812d8c6509c7593"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b990ee56c39c454f5c6bc2e645d1286e93acee"]},"commit2Childs":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}