{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","sourceNew":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(\n          new Transition(labels[i++], convert(target, visited)));\n    }\n    \n    return converted;\n  }\n\n","sourceOld":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(new Transition(labels[i++], convert(target,\n          visited)));\n    }\n    \n    return converted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(\n          new Transition(labels[i++], convert(target, visited)));\n    }\n    \n    return converted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(\n          new Transition(labels[i++], convert(target, visited)));\n    }\n    \n    return converted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(Automaton.Builder,State,IdentityHashMap[State,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#convert(State,IdentityHashMap[State,org.apache.lucene.util.automaton.State]).mjava","sourceNew":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static int convert(Automaton.Builder a, State s,\n      IdentityHashMap<State,Integer> visited) {\n\n    Integer converted = visited.get(s);\n    if (converted != null) {\n      return converted;\n    }\n    \n    converted = a.createState();\n    a.setAccept(converted, s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      a.addTransition(converted, convert(a, target, visited), labels[i++]);\n    }\n    \n    return converted;\n  }\n\n","sourceOld":"  /**\n   * Internal recursive traversal for conversion.\n   */\n  private static org.apache.lucene.util.automaton.State convert(State s,\n      IdentityHashMap<State,org.apache.lucene.util.automaton.State> visited) {\n    org.apache.lucene.util.automaton.State converted = visited.get(s);\n    if (converted != null) return converted;\n    \n    converted = new org.apache.lucene.util.automaton.State();\n    converted.setAccept(s.is_final);\n    \n    visited.put(s, converted);\n    int i = 0;\n    int[] labels = s.labels;\n    for (DaciukMihovAutomatonBuilder.State target : s.states) {\n      converted.addTransition(\n          new Transition(labels[i++], convert(target, visited)));\n    }\n    \n    return converted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"5c84485629d80d203608e8975a1139de9933cc38":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}