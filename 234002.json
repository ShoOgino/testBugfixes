{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","commits":[{"id":"28dbdccfa460fb41c33b6d23411572298d589b99","date":1399839432,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28dbdccfa460fb41c33b6d23411572298d589b99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["93dd449115a9247533e44bab47e8429e5dccbc6d","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28dbdccfa460fb41c33b6d23411572298d589b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"28dbdccfa460fb41c33b6d23411572298d589b99":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28dbdccfa460fb41c33b6d23411572298d589b99","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}