{"path":"src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocInverter#flush(Map,SegmentWriteState).mjava","sourceNew":"  void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields = new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet() ) {\n\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> childFields = new HashSet<InvertedDocConsumerPerField>();\n      Collection<InvertedDocEndConsumerPerField> endChildFields = new HashSet<InvertedDocEndConsumerPerField>();\n      for (final DocFieldConsumerPerField field: entry.getValue() ) {  \n        DocInverterPerField perField = (DocInverterPerField) field;\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","sourceOld":"  void flush(Map threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map childThreadsAndFields = new HashMap();\n    Map endChildThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection endChildFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocInverterPerField perField = (DocInverterPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields = new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet() ) {\n\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> childFields = new HashSet<InvertedDocConsumerPerField>();\n      Collection<InvertedDocEndConsumerPerField> endChildFields = new HashSet<InvertedDocEndConsumerPerField>();\n      for (final DocFieldConsumerPerField field: entry.getValue() ) {  \n        DocInverterPerField perField = (DocInverterPerField) field;\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","sourceOld":"  void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields = new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet() ) {\n\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> childFields = new HashSet<InvertedDocConsumerPerField>();\n      Collection<InvertedDocEndConsumerPerField> endChildFields = new HashSet<InvertedDocEndConsumerPerField>();\n      for (final DocFieldConsumerPerField field: entry.getValue() ) {  \n        DocInverterPerField perField = (DocInverterPerField) field;\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocInverter#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields = new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet() ) {\n\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> childFields = new HashSet<InvertedDocConsumerPerField>();\n      Collection<InvertedDocEndConsumerPerField> endChildFields = new HashSet<InvertedDocEndConsumerPerField>();\n      for (final DocFieldConsumerPerField field: entry.getValue() ) {  \n        DocInverterPerField perField = (DocInverterPerField) field;\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields = new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet() ) {\n\n\n      DocInverterPerThread perThread = (DocInverterPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> childFields = new HashSet<InvertedDocConsumerPerField>();\n      Collection<InvertedDocEndConsumerPerField> endChildFields = new HashSet<InvertedDocEndConsumerPerField>();\n      for (final DocFieldConsumerPerField field: entry.getValue() ) {  \n        DocInverterPerField perField = (DocInverterPerField) field;\n        childFields.add(perField.consumer);\n        endChildFields.add(perField.endConsumer);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      endChildThreadsAndFields.put(perThread.endConsumer, endChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n    endConsumer.flush(endChildThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}