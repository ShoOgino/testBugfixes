{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, add the range\n    // if cell cellCrosses\n\n    final boolean within = res% GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellCrosses(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level <= DETAIL_LEVEL && cellIntersects(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short)(res - 1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res% GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellCrosses(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level <= DETAIL_LEVEL && cellIntersects(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short)(res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, add the range\n    // if cell cellCrosses\n\n    final boolean within = res% GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellCrosses(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level <= DETAIL_LEVEL && cellIntersects(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short)(res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc6e227caf7b84b83df6bb987ca077179f03452f","date":1438419526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res% GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellCrosses(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level <= DETAIL_LEVEL && cellIntersects(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short)(res - 1));\n    }\n  }\n\n","bugFix":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8643675811154703f74957ed3d102a06ce092f2","date":1438507635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)(62-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a02003eb48495b52b8483703e1b6b48c099ec7d","date":1438767858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, end, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599","date":1441910781,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, res, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, res, level, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      rangeBounds.add(new Range(start, res, !within));\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc6e227caf7b84b83df6bb987ca077179f03452f":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["07c50cb1eca5629cac5b6702dd0f5e06157af61a","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8643675811154703f74957ed3d102a06ce092f2":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"937923083e4d137932336fc80f3d78758ff698a6":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["a8643675811154703f74957ed3d102a06ce092f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"fc6e227caf7b84b83df6bb987ca077179f03452f":["a8643675811154703f74957ed3d102a06ce092f2"],"21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a8643675811154703f74957ed3d102a06ce092f2":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["21ce00df6a102f95fe2ba6a6d1e28e0ed7b13599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}