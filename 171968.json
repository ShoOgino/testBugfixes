{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","sourceNew":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = ctx.makeCircle(0, 0, 89);\n    adoc(\"0\", ctx.makePoint(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", ctx.makePoint(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = ctx.makeCircle(0, 0, 89);\n    adoc(\"0\", ctx.makePoint(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", ctx.makePoint(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","sourceNew":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = ctx.makeCircle(0, 0, 89);\n    adoc(\"0\", ctx.makePoint(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", ctx.makePoint(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = ctx.makeCircle(0, 0, 89);\n    adoc(\"0\", ctx.makePoint(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", ctx.makePoint(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testQueryCircle().mjava","sourceNew":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    shapeFactory = ctx.getShapeFactory();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = shapeFactory.circle(0, 0, 89);\n    adoc(\"0\", shapeFactory.pointXY(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", shapeFactory.pointXY(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryCircle() throws IOException {\n    //overwrite setUp; non-geo bounds is more straight-forward; otherwise 88,88 would actually be practically north,\n    final SpatialContextFactory spatialContextFactory = new SpatialContextFactory();\n    spatialContextFactory.geo = false;\n    spatialContextFactory.worldBounds = new RectangleImpl(-90, 90, -90, 90, null);\n    ctx = spatialContextFactory.newSpatialContext();\n    final int LEVEL = 4;\n    grid = new QuadPrefixTree(ctx, LEVEL);\n    strategy = new RecursivePrefixTreeStrategy(grid, getTestClass().getSimpleName());\n    Circle circle = ctx.makeCircle(0, 0, 89);\n    adoc(\"0\", ctx.makePoint(88, 88));//top-right, inside bbox of circle but not the circle\n    adoc(\"1\", ctx.makePoint(0, 0));//clearly inside; dead center in fact\n    commit();\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null,\n        circle, LEVEL, 1000);\n    //assert that only one point is found, not 2\n    boolean foundOne = false;\n    for (int count : heatmap.counts) {\n      switch (count) {\n        case 0: break;\n        case 1:\n          assertFalse(foundOne);//this is the first\n          foundOne = true;\n          break;\n        default:\n          fail(\"counts should be 0 or 1: \" + count);\n      }\n    }\n    assertTrue(foundOne);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}