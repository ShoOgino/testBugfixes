{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","sourceNew":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","sourceNew":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#readConfigName(SolrZkClient,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    byte[] aliasData = zkClient.getData(ZkStateReader.ALIASES, null, null, true);\n    Aliases aliases = ClusterState.load(aliasData);\n    String alias = aliases.getCollectionAlias(collection);\n    if (alias != null) {\n      List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n      if (aliasList.size() > 1) {\n        throw new IllegalArgumentException(\"collection cannot be an alias that maps to multiple collections\");\n      }\n      collection = aliasList.get(0);\n    }\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["6c8a2521797f14d1d697a17a0069f5619cd211a6","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}