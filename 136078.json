{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      checkIterator(docToValueCount.iterator(), maxDoc, false);\n      checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      checkIterator(docToValueCount.iterator(), maxDoc, false);\n      checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      TestUtil.checkIterator(docToValueCount.iterator(), maxDoc, false);\n      TestUtil.checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","sourceOld":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      checkIterator(docToValueCount.iterator(), maxDoc, false);\n      checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      TestUtil.checkIterator(docToValueCount.iterator(), maxDoc, false);\n      TestUtil.checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      TestUtil.checkIterator(docToValueCount.iterator(), maxDoc, false);\n      TestUtil.checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {\n      long valueCount = 0;\n      Iterator<Number> valueIterator = values.iterator();\n      for (Number count : docToValueCount) {\n        assert count != null;\n        assert count.intValue() >= 0;\n        valueCount += count.intValue();\n        long previous = Long.MIN_VALUE;\n        for (int i = 0; i < count.intValue(); i++) {\n          assert valueIterator.hasNext();\n          Number next = valueIterator.next();\n          assert next != null;\n          long nextValue = next.longValue();\n          assert nextValue >= previous;\n          previous = nextValue;\n        }\n      }\n      assert valueIterator.hasNext() == false;\n      TestUtil.checkIterator(docToValueCount.iterator(), maxDoc, false);\n      TestUtil.checkIterator(values.iterator(), valueCount, false);\n      in.addSortedNumericField(field, docToValueCount, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0936055c0eed56be3e4ae5c9db5b0e355390736a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0936055c0eed56be3e4ae5c9db5b0e355390736a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0936055c0eed56be3e4ae5c9db5b0e355390736a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}