{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26867fa391352324254e5eafd1c2d63e3221f4fc","date":1350562745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    return new TermsWriter(fieldIndexWriter, field, postingsWriter);\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    return new TermsWriter(fieldIndexWriter, field, postingsWriter);\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#addField(FieldInfo).mjava","sourceNew":"  private TermsWriter addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    return new TermsWriter(fieldIndexWriter, field, postingsWriter);\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    return new TermsWriter(fieldIndexWriter, field, postingsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["038e2a9b07e2f8ae58336613cea227bf8b973484","26867fa391352324254e5eafd1c2d63e3221f4fc"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["26867fa391352324254e5eafd1c2d63e3221f4fc"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","26867fa391352324254e5eafd1c2d63e3221f4fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}