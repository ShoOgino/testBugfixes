{"path":"lucene/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * <code>TokenStream</code> are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * <code>TokenStream</code> are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /**\n   * This method is called by a consumer before it begins consumption using\n   * {@link #incrementToken()}.\n   * <p/>\n   * Resets this stream to the beginning.  As all TokenStreams must be reusable,\n   * any implementations which have state that needs to be reset between usages\n   * of the TokenStream, must implement this method. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * <code>TokenStream</code> are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /**\n   * This method is called by a consumer before it begins consumption using\n   * {@link #incrementToken()}.\n   * <p/>\n   * Resets this stream to the beginning.  As all TokenStreams must be reusable,\n   * any implementations which have state that needs to be reset between usages\n   * of the TokenStream, must implement this method. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /**\n   * This method is called by a consumer before it begins consumption using\n   * {@link #incrementToken()}.\n   * <p/>\n   * Resets this stream to the beginning.  As all TokenStreams must be reusable,\n   * any implementations which have state that needs to be reset between usages\n   * of the TokenStream, must implement this method. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}