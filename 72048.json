{"path":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    builder.setFieldFlags( fieldFlags ); \n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (builder.getQueryString() == null) {\n      builder.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    QParser parser = QParser.getParser(builder.getQueryString(), defType, req);\n    builder.setQuery( parser.getQuery() );\n    builder.setSortSpec( parser.getSort(true) );\n    \n    String[] fqs = req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ);\n    if (fqs!=null && fqs.length!=0) {\n      List<Query> filters = builder.getFilters();\n      if (filters==null) {\n        filters = new ArrayList<Query>();\n        builder.setFilters( filters );\n      }\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, null, req);\n          filters.add(fqp.getQuery());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void prepare(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    builder.setFieldFlags( fieldFlags ); \n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (builder.getQueryString() == null) {\n      builder.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    QParser parser = QParser.getParser(builder.getQueryString(), defType, req);\n    builder.setQuery( parser.getQuery() );\n    builder.setSortSpec( parser.getSort(true) );\n    \n    String[] fqs = req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ);\n    if (fqs!=null && fqs.length!=0) {\n      List<Query> filters = builder.getFilters();\n      if (filters==null) {\n        filters = new ArrayList<Query>();\n        builder.setFilters( filters );\n      }\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, null, req);\n          filters.add(fqp.getQuery());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}