{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    message(\"registerMerge merging=\" + mergingSegments);\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    message(\"registerMerge merging=\" + mergingSegments);\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    message(\"registerMerge merging=\" + mergingSegments);\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    message(\"registerMerge merging=\" + mergingSegments);\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    message(\"registerMerge merging=\" + mergingSegments);\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (segmentInfos.indexOf(info) == -1) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++) {\n      mergingSegments.add(merge.segments.info(i));\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.containsKey(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.containsKey(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.contains(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.containsKey(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.containsKey(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      message(builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      message(\"registerMerge info=\" + info);\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToOptimize.containsKey(info)) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = optimizeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream != null) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      infoStream.message(\"IW\", builder.toString());  \n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone) {\n      return true;\n    }\n    assert merge.segments.size() > 0;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + segString(merge.segments));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + segString(merge.segments) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone) {\n      return true;\n    }\n    assert merge.segments.size() > 0;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + segString(merge.segments));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + segString(merge.segments) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException, IOException {\n\n    if (merge.registerDone) {\n      return true;\n    }\n    assert merge.segments.size() > 0;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + segString(merge.segments));\n    }\n\n    boolean isExternal = false;\n    for(SegmentInfo info : merge.segments) {\n      if (mergingSegments.contains(info)) {\n        return false;\n      }\n      if (!segmentInfos.contains(info)) {\n        return false;\n      }\n      if (info.dir != directory) {\n        isExternal = true;\n      }\n      if (segmentsToMerge.containsKey(info)) {\n        merge.maxNumSegments = mergeMaxNumSegments;\n      }\n    }\n\n    ensureValidMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"add merge to pendingMerges: \" + segString(merge.segments) + \" [total \" + pendingMerges.size() + \" pending]\");\n    }\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    if (infoStream.isEnabled(\"IW\")) {\n      StringBuilder builder = new StringBuilder(\"registerMerge merging= [\");\n      for (SegmentInfo info : mergingSegments) {\n        builder.append(info.name).append(\", \");  \n      }\n      builder.append(\"]\");\n      // don't call mergingSegments.toString() could lead to ConcurrentModException\n      // since merge updates the segments FieldInfos\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", builder.toString());  \n      }\n    }\n    for(SegmentInfo info : merge.segments) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"registerMerge info=\" + info);\n      }\n      mergingSegments.add(info);\n    }\n\n    // Merge is now registered\n    merge.registerDone = true;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"c19f985e36a65cc969e8e564fe337a0d41512075":["53a31399f2471493d67b19a95c028a74e0113b6a"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["c19f985e36a65cc969e8e564fe337a0d41512075"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"06584e6e98d592b34e1329b384182f368d2025e8":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","01e5948db9a07144112d2f08f28ca2e3cd880348"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","29ef99d61cda9641b6250bf9567329a6e65f901d"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","01e5948db9a07144112d2f08f28ca2e3cd880348","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"53a31399f2471493d67b19a95c028a74e0113b6a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","06584e6e98d592b34e1329b384182f368d2025e8"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c3a8a449466c1ff7ce2274fe73dab487256964b4","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}