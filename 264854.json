{"path":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#readUntil(char).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#readUntil(char).mjava","pathOld":"/dev/null","sourceNew":" /**\n  * Reads all characters up to (but not including) the given character.\n  * \n  * @param c the character to read up to\n  * @return the string up to the character <code>c</code>\n  * @throws IOException\n  */\n public String readUntil(char c) throws IOException {\n   if (lookaheadChar == UNDEFINED) {\n     lookaheadChar = super.read();\n   }\n   line.clear(); // reuse\n   while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n     line.append((char) lookaheadChar);\n     if (lookaheadChar == '\\n') {\n       lineCounter++;\n     } \n     lastChar = lookaheadChar;\n     lookaheadChar = super.read();\n   }\n   return line.toString();    \n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#readUntil(char).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#readUntil(char).mjava","sourceNew":" /**\n  * Reads all characters up to (but not including) the given character.\n  * \n  * @param c the character to read up to\n  * @return the string up to the character <code>c</code>\n  * @throws IOException If there is a low-level I/O error.\n  */\n public String readUntil(char c) throws IOException {\n   if (lookaheadChar == UNDEFINED) {\n     lookaheadChar = super.read();\n   }\n   line.clear(); // reuse\n   while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n     line.append((char) lookaheadChar);\n     if (lookaheadChar == '\\n') {\n       lineCounter++;\n     } \n     lastChar = lookaheadChar;\n     lookaheadChar = super.read();\n   }\n   return line.toString();    \n }\n\n","sourceOld":" /**\n  * Reads all characters up to (but not including) the given character.\n  * \n  * @param c the character to read up to\n  * @return the string up to the character <code>c</code>\n  * @throws IOException\n  */\n public String readUntil(char c) throws IOException {\n   if (lookaheadChar == UNDEFINED) {\n     lookaheadChar = super.read();\n   }\n   line.clear(); // reuse\n   while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n     line.append((char) lookaheadChar);\n     if (lookaheadChar == '\\n') {\n       lineCounter++;\n     } \n     lastChar = lookaheadChar;\n     lookaheadChar = super.read();\n   }\n   return line.toString();    \n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}