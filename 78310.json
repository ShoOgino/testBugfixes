{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","commits":[{"id":"c78bb747213f4a3449337db2399309566a08241a","date":1354823430,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2507ce20f86051a93cc41e273164d9b1da79b4a3","date":1354830692,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5cd9341c578f132de886964218bbefe52bdcd83","date":1368036656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":["e7754464847b06ced605515bd48219280ede29e9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd2d639986db5a5a6f3703a8b4136a6473a5f81","date":1376372957,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = collection ==null? null: collection.getStr(DocRouter.ROUTE_FIELD);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2507ce20f86051a93cc41e273164d9b1da79b4a3":["c78bb747213f4a3449337db2399309566a08241a"],"c78bb747213f4a3449337db2399309566a08241a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5cd9341c578f132de886964218bbefe52bdcd83":["2507ce20f86051a93cc41e273164d9b1da79b4a3"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a5cd9341c578f132de886964218bbefe52bdcd83","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2507ce20f86051a93cc41e273164d9b1da79b4a3"],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["a5cd9341c578f132de886964218bbefe52bdcd83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cdd2d639986db5a5a6f3703a8b4136a6473a5f81"]},"commit2Childs":{"2507ce20f86051a93cc41e273164d9b1da79b4a3":["a5cd9341c578f132de886964218bbefe52bdcd83","407687e67faf6e1f02a211ca078d8e3eed631027"],"c78bb747213f4a3449337db2399309566a08241a":["2507ce20f86051a93cc41e273164d9b1da79b4a3"],"a5cd9341c578f132de886964218bbefe52bdcd83":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c78bb747213f4a3449337db2399309566a08241a","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}