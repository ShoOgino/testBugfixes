{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      int termUpTo = 0;\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        TermStatistics termStatistics = searcher.termStatistics(term, states[i]);\n        if (termStatistics != null) {\n          termStats[termUpTo++] = termStatistics;\n        }\n      }\n      if (termUpTo > 0) {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), Arrays.copyOf(termStats, termUpTo));\n      } else {\n        stats = null; // no terms at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity(scoreMode.needsScores());\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      int termUpTo = 0;\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        TermStatistics termStatistics = searcher.termStatistics(term, states[i]);\n        if (termStatistics != null) {\n          termStats[termUpTo++] = termStatistics;\n        }\n      }\n      if (termUpTo > 0) {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), Arrays.copyOf(termStats, termUpTo));\n      } else {\n        stats = null; // no terms at all, we won't use similarity\n      }\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      int termUpTo = 0;\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        TermStatistics termStatistics = searcher.termStatistics(term, states[i]);\n        if (termStatistics != null) {\n          termStats[termUpTo++] = termStatistics;\n        }\n      }\n      if (termUpTo > 0) {\n        stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), Arrays.copyOf(termStats, termUpTo));\n      } else {\n        stats = null; // no terms at all, we won't use similarity\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}