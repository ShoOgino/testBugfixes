{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d84c26f2de94a16243176e8e770672e733b9014","date":1323540417,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext<? extends IndexReader> build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicIndexReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicIndexReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeIndexReader cr = (CompositeIndexReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        @SuppressWarnings({\"unchecked\",\"rawtypes\"}) ReaderContext<? extends IndexReader>[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicIndexReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicIndexReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeIndexReader cr = (CompositeIndexReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext<? extends IndexReader> build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicIndexReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicIndexReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeIndexReader cr = (CompositeIndexReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        @SuppressWarnings({\"unchecked\",\"rawtypes\"}) ReaderContext<? extends IndexReader>[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeReader cr = (CompositeReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicIndexReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicIndexReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeIndexReader cr = (CompositeIndexReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e00dc2d44dc4e14788fbeb649970c757f024592d","date":1327883708,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeReader cr = (CompositeReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, (AtomicReader) reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        CompositeReader cr = (CompositeReader) reader;\n        IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","7d84c26f2de94a16243176e8e770672e733b9014"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e00dc2d44dc4e14788fbeb649970c757f024592d":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"7d84c26f2de94a16243176e8e770672e733b9014":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["7d84c26f2de94a16243176e8e770672e733b9014","e00dc2d44dc4e14788fbeb649970c757f024592d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["7d84c26f2de94a16243176e8e770672e733b9014"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["e00dc2d44dc4e14788fbeb649970c757f024592d"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","7d84c26f2de94a16243176e8e770672e733b9014","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e00dc2d44dc4e14788fbeb649970c757f024592d":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7d84c26f2de94a16243176e8e770672e733b9014":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}