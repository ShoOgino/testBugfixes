{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#ecfToLLA(double,double,double,double[]).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#ecfToLLA(double,double,double,double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts from geocentric earth-centered earth-fixed to geodesic lat/lon/alt\n   * @param x Cartesian x coordinate\n   * @param y Cartesian y coordinate\n   * @param z Cartesian z coordinate\n   * @param lla 0: longitude 1: latitude: 2: altitude\n   * @return double array as 0: longitude 1: latitude 2: altitude\n   */\n  public static final double[] ecfToLLA(final double x, final double y, final double z, double[] lla) {\n    boolean atPole = false;\n    final double ad_c = 1.0026000D;\n    final double e2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n    final double ep2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMINOR_AXIS2);\n    final double cos67P5 = 0.38268343236508977D;\n\n    if (lla == null)\n      lla = new double[3];\n\n    if (x != 0.0) {\n      lla[0] = StrictMath.atan2(y,x);\n    } else {\n      if (y > 0) {\n        lla[0] = PI_OVER_2;\n      } else if (y < 0) {\n        lla[0] = -PI_OVER_2;\n      } else {\n        atPole = true;\n        lla[0] = 0.0D;\n        if (z > 0.0) {\n          lla[1] = PI_OVER_2;\n        } else if (z < 0.0) {\n          lla[1] = -PI_OVER_2;\n        } else {\n          lla[1] = PI_OVER_2;\n          lla[2] = -SEMIMINOR_AXIS;\n          return lla;\n        }\n      }\n    }\n\n    final double w2 = x*x + y*y;\n    final double w = StrictMath.sqrt(w2);\n    final double t0 = z * ad_c;\n    final double s0 = StrictMath.sqrt(t0 * t0 + w2);\n    final double sinB0 = t0 / s0;\n    final double cosB0 = w / s0;\n    final double sin3B0 = sinB0 * sinB0 * sinB0;\n    final double t1 = z + SEMIMINOR_AXIS * ep2 * sin3B0;\n    final double sum = w - SEMIMAJOR_AXIS * e2 * cosB0 * cosB0 * cosB0;\n    final double s1 = StrictMath.sqrt(t1 * t1 + sum * sum);\n    final double sinP1 = t1 / s1;\n    final double cosP1 = sum / s1;\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - e2 * sinP1 * sinP1);\n\n    if (cosP1 >= cos67P5) {\n      lla[2] = w / cosP1 - rn;\n    } else if (cosP1 <= -cos67P5) {\n      lla[2] = w / -cosP1 - rn;\n    } else {\n      lla[2] = z / sinP1 + rn * (e2 - 1.0);\n    }\n    if (!atPole) {\n      lla[1] = StrictMath.atan(sinP1/cosP1);\n    }\n    lla[0] = StrictMath.toDegrees(lla[0]);\n    lla[1] = StrictMath.toDegrees(lla[1]);\n\n    return lla;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#ecfToLLA(double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#ecfToLLA(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geocentric earth-centered earth-fixed to geodesic lat/lon/alt\n   * @param x Cartesian x coordinate\n   * @param y Cartesian y coordinate\n   * @param z Cartesian z coordinate\n   * @param lla 0: longitude 1: latitude: 2: altitude\n   * @return double array as 0: longitude 1: latitude 2: altitude\n   */\n  public static final double[] ecfToLLA(final double x, final double y, final double z, double[] lla) {\n    boolean atPole = false;\n    final double ad_c = 1.0026000D;\n    final double e2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n    final double ep2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMINOR_AXIS2);\n    final double cos67P5 = 0.38268343236508977D;\n\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    if (x != 0.0) {\n      lla[0] = StrictMath.atan2(y,x);\n    } else {\n      if (y > 0) {\n        lla[0] = PI_OVER_2;\n      } else if (y < 0) {\n        lla[0] = -PI_OVER_2;\n      } else {\n        atPole = true;\n        lla[0] = 0.0D;\n        if (z > 0.0) {\n          lla[1] = PI_OVER_2;\n        } else if (z < 0.0) {\n          lla[1] = -PI_OVER_2;\n        } else {\n          lla[1] = PI_OVER_2;\n          lla[2] = -SEMIMINOR_AXIS;\n          return lla;\n        }\n      }\n    }\n\n    final double w2 = x*x + y*y;\n    final double w = StrictMath.sqrt(w2);\n    final double t0 = z * ad_c;\n    final double s0 = StrictMath.sqrt(t0 * t0 + w2);\n    final double sinB0 = t0 / s0;\n    final double cosB0 = w / s0;\n    final double sin3B0 = sinB0 * sinB0 * sinB0;\n    final double t1 = z + SEMIMINOR_AXIS * ep2 * sin3B0;\n    final double sum = w - SEMIMAJOR_AXIS * e2 * cosB0 * cosB0 * cosB0;\n    final double s1 = StrictMath.sqrt(t1 * t1 + sum * sum);\n    final double sinP1 = t1 / s1;\n    final double cosP1 = sum / s1;\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - e2 * sinP1 * sinP1);\n\n    if (cosP1 >= cos67P5) {\n      lla[2] = w / cosP1 - rn;\n    } else if (cosP1 <= -cos67P5) {\n      lla[2] = w / -cosP1 - rn;\n    } else {\n      lla[2] = z / sinP1 + rn * (e2 - 1.0);\n    }\n    if (!atPole) {\n      lla[1] = StrictMath.atan(sinP1/cosP1);\n    }\n    lla[0] = StrictMath.toDegrees(lla[0]);\n    lla[1] = StrictMath.toDegrees(lla[1]);\n\n    return lla;\n  }\n\n","sourceOld":"  /**\n   * Converts from geocentric earth-centered earth-fixed to geodesic lat/lon/alt\n   * @param x Cartesian x coordinate\n   * @param y Cartesian y coordinate\n   * @param z Cartesian z coordinate\n   * @param lla 0: longitude 1: latitude: 2: altitude\n   * @return double array as 0: longitude 1: latitude 2: altitude\n   */\n  public static final double[] ecfToLLA(final double x, final double y, final double z, double[] lla) {\n    boolean atPole = false;\n    final double ad_c = 1.0026000D;\n    final double e2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n    final double ep2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMINOR_AXIS2);\n    final double cos67P5 = 0.38268343236508977D;\n\n    if (lla == null)\n      lla = new double[3];\n\n    if (x != 0.0) {\n      lla[0] = StrictMath.atan2(y,x);\n    } else {\n      if (y > 0) {\n        lla[0] = PI_OVER_2;\n      } else if (y < 0) {\n        lla[0] = -PI_OVER_2;\n      } else {\n        atPole = true;\n        lla[0] = 0.0D;\n        if (z > 0.0) {\n          lla[1] = PI_OVER_2;\n        } else if (z < 0.0) {\n          lla[1] = -PI_OVER_2;\n        } else {\n          lla[1] = PI_OVER_2;\n          lla[2] = -SEMIMINOR_AXIS;\n          return lla;\n        }\n      }\n    }\n\n    final double w2 = x*x + y*y;\n    final double w = StrictMath.sqrt(w2);\n    final double t0 = z * ad_c;\n    final double s0 = StrictMath.sqrt(t0 * t0 + w2);\n    final double sinB0 = t0 / s0;\n    final double cosB0 = w / s0;\n    final double sin3B0 = sinB0 * sinB0 * sinB0;\n    final double t1 = z + SEMIMINOR_AXIS * ep2 * sin3B0;\n    final double sum = w - SEMIMAJOR_AXIS * e2 * cosB0 * cosB0 * cosB0;\n    final double s1 = StrictMath.sqrt(t1 * t1 + sum * sum);\n    final double sinP1 = t1 / s1;\n    final double cosP1 = sum / s1;\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - e2 * sinP1 * sinP1);\n\n    if (cosP1 >= cos67P5) {\n      lla[2] = w / cosP1 - rn;\n    } else if (cosP1 <= -cos67P5) {\n      lla[2] = w / -cosP1 - rn;\n    } else {\n      lla[2] = z / sinP1 + rn * (e2 - 1.0);\n    }\n    if (!atPole) {\n      lla[1] = StrictMath.atan(sinP1/cosP1);\n    }\n    lla[0] = StrictMath.toDegrees(lla[0]);\n    lla[1] = StrictMath.toDegrees(lla[1]);\n\n    return lla;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}