{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#finish().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish() throws IOException {\n\n      // write primary terms dict offsets\n      packedIndexStart = out.getFilePointer();\n\n      final long maxValue = termsOut.getFilePointer();\n      PackedInts.Writer w = PackedInts.getWriter(out, numIndexTerms, PackedInts.bitsRequired(maxValue));\n\n      // relative to our indexStart\n      long upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        upto += termsPointerDeltas[i];\n        w.add(upto);\n      }\n      w.finish();\n\n      packedOffsetsStart = out.getFilePointer();\n\n      // write offsets into the byte[] terms\n      w = PackedInts.getWriter(out, 1+numIndexTerms, PackedInts.bitsRequired(totTermLength));\n      upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        w.add(upto);\n        upto += termLengths[i];\n      }\n      w.add(upto);\n      w.finish();\n\n      // our referrer holds onto us, while other fields are\n      // being written, so don't tie up this RAM:\n      termLengths = null;\n      termsPointerDeltas = null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n\n      // write primary terms dict offsets\n      packedIndexStart = out.getFilePointer();\n\n      final long maxValue = termsOut.getFilePointer();\n      PackedInts.Writer w = PackedInts.getWriter(out, numIndexTerms, PackedInts.bitsRequired(maxValue));\n\n      // relative to our indexStart\n      long upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        upto += termsPointerDeltas[i];\n        w.add(upto);\n      }\n      w.finish();\n\n      packedOffsetsStart = out.getFilePointer();\n\n      // write offsets into the byte[] terms\n      w = PackedInts.getWriter(out, 1+numIndexTerms, PackedInts.bitsRequired(totTermLength));\n      upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        w.add(upto);\n        upto += termLengths[i];\n      }\n      w.add(upto);\n      w.finish();\n\n      // our referrer holds onto us, while other fields are\n      // being written, so don't tie up this RAM:\n      termLengths = null;\n      termsPointerDeltas = null;\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n\n      // write primary terms dict offsets\n      packedIndexStart = out.getFilePointer();\n\n      final long maxValue = termsOut.getFilePointer();\n      PackedInts.Writer w = PackedInts.getWriter(out, numIndexTerms, PackedInts.bitsRequired(maxValue));\n\n      // relative to our indexStart\n      long upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        upto += termsPointerDeltas[i];\n        w.add(upto);\n      }\n      w.finish();\n\n      packedOffsetsStart = out.getFilePointer();\n\n      // write offsets into the byte[] terms\n      w = PackedInts.getWriter(out, 1+numIndexTerms, PackedInts.bitsRequired(totTermLength));\n      upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        w.add(upto);\n        upto += termLengths[i];\n      }\n      w.add(upto);\n      w.finish();\n\n      // our referrer holds onto us, while other fields are\n      // being written, so don't tie up this RAM:\n      termLengths = null;\n      termsPointerDeltas = null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.SimpleFieldWriter#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n\n      // write primary terms dict offsets\n      packedIndexStart = out.getFilePointer();\n\n      final long maxValue = termsOut.getFilePointer();\n      PackedInts.Writer w = PackedInts.getWriter(out, numIndexTerms, PackedInts.bitsRequired(maxValue));\n\n      // relative to our indexStart\n      long upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        upto += termsPointerDeltas[i];\n        w.add(upto);\n      }\n      w.finish();\n\n      packedOffsetsStart = out.getFilePointer();\n\n      // write offsets into the byte[] terms\n      w = PackedInts.getWriter(out, 1+numIndexTerms, PackedInts.bitsRequired(totTermLength));\n      upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        w.add(upto);\n        upto += termLengths[i];\n      }\n      w.add(upto);\n      w.finish();\n\n      // our referrer holds onto us, while other fields are\n      // being written, so don't tie up this RAM:\n      termLengths = null;\n      termsPointerDeltas = null;\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n\n      // write primary terms dict offsets\n      packedIndexStart = out.getFilePointer();\n\n      final long maxValue = termsOut.getFilePointer();\n      PackedInts.Writer w = PackedInts.getWriter(out, numIndexTerms, PackedInts.bitsRequired(maxValue));\n\n      // relative to our indexStart\n      long upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        upto += termsPointerDeltas[i];\n        w.add(upto);\n      }\n      w.finish();\n\n      packedOffsetsStart = out.getFilePointer();\n\n      // write offsets into the byte[] terms\n      w = PackedInts.getWriter(out, 1+numIndexTerms, PackedInts.bitsRequired(totTermLength));\n      upto = 0;\n      for(int i=0;i<numIndexTerms;i++) {\n        w.add(upto);\n        upto += termLengths[i];\n      }\n      w.add(upto);\n      w.finish();\n\n      // our referrer holds onto us, while other fields are\n      // being written, so don't tie up this RAM:\n      termLengths = null;\n      termsPointerDeltas = null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}