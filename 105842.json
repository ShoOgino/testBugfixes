{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","commits":[{"id":"d4e703a107dabba92e897b4405f4a69f135565a2","date":1567669029,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"d4e703a107dabba92e897b4405f4a69f135565a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["d4e703a107dabba92e897b4405f4a69f135565a2"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["d4e703a107dabba92e897b4405f4a69f135565a2","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"d4e703a107dabba92e897b4405f4a69f135565a2":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4e703a107dabba92e897b4405f4a69f135565a2"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}