{"path":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","commits":[{"id":"cc9c42f0c1f89f2b3964f2d39efe57860e578838","date":1438774812,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    final File solrXml = getFile(\"solr\").toPath().resolve(\"solr-no-core.xml\").toFile();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir());\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    final File solrXml = getFile(\"solr\").toPath().resolve(\"solr-no-core.xml\").toFile();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f929b717ab7f8b4a75621bbf4e3c3b08ba561381","date":1446062278,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir(), buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir());\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir(), buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    solrCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"conf2\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir(), buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir(), buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    solrCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"conf2\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    if (random().nextBoolean()) {\n      System.setProperty(\"solr.statsCache\", ExactStatsCache.class.getName());\n    } else {\n      System.setProperty(\"solr.statsCache\", LRUStatsCache.class.getName());\n    }\n\n    super.setUp();\n    solrCluster = new MiniSolrCloudCluster(3, createTempDir(), buildJettyConfig(\"/solr\"));\n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf1\");\n    configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"conf2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}