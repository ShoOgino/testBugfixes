{"path":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>Term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration. */\n  abstract public TermPositions termPositions(Term t) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2","date":1011633132,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration. */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>Term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration. */\n  abstract public TermPositions termPositions(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbb14e9adf67f0e8fb9cc55a25a71063c230338","date":1051751355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration.\n  */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration. */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47f3057137fcb91417c83b50600b934bd0f34c68","date":1064526111,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n          pos<sub>freq-1</sub>&gt;\n        &gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration.\n  */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n\t  pos<sub>freq-1</sub>&gt;\n\t&gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration.\n  */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   <code>term</code>.  For each document, in addition to the document number\n   and frequency of the term in that document, a list of all of the ordinal\n   positions of the term in the document is available.  Thus, this method\n   implements the mapping:\n\n   <p><ul>\n   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   pos<sub>freq-1</sub>&gt;\n   &gt;<sup>*</sup>\n   </ul>\n   <p> This positional information faciliates phrase and proximity searching.\n   <p>The enumeration is ordered by document number.  Each document number is\n   greater than all that precede it in the enumeration.\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>.  For each document, in addition to the document number\n    and frequency of the term in that document, a list of all of the ordinal\n    positions of the term in the document is available.  Thus, this method\n    implements the mapping:\n\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n          &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n          pos<sub>freq-1</sub>&gt;\n        &gt;<sup>*</sup>\n    </ul>\n    <p> This positional information faciliates phrase and proximity searching.\n    <p>The enumeration is ordered by document number.  Each document number is\n    greater than all that precede it in the enumeration.\n  */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information faciliates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   <code>term</code>.  For each document, in addition to the document number\n   and frequency of the term in that document, a list of all of the ordinal\n   positions of the term in the document is available.  Thus, this method\n   implements the mapping:\n\n   <p><ul>\n   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   pos<sub>freq-1</sub>&gt;\n   &gt;<sup>*</sup>\n   </ul>\n   <p> This positional information faciliates phrase and proximity searching.\n   <p>The enumeration is ordered by document number.  Each document number is\n   greater than all that precede it in the enumeration.\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information faciliates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information faciliates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d225bff1237aa1de3cf169237f6ca7ca5392f5","date":1196119899,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information faciliates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["47f3057137fcb91417c83b50600b934bd0f34c68"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"],"34d225bff1237aa1de3cf169237f6ca7ca5392f5":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47f3057137fcb91417c83b50600b934bd0f34c68":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["34d225bff1237aa1de3cf169237f6ca7ca5392f5"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["47f3057137fcb91417c83b50600b934bd0f34c68"],"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"34d225bff1237aa1de3cf169237f6ca7ca5392f5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["34d225bff1237aa1de3cf169237f6ca7ca5392f5"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"47f3057137fcb91417c83b50600b934bd0f34c68":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}