{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","commits":[{"id":"c78bb747213f4a3449337db2399309566a08241a","date":1354823430,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9724f10f3fa18adbeba8d1cbfda62676dae942a3","date":1354829537,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":["a5cd9341c578f132de886964218bbefe52bdcd83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2507ce20f86051a93cc41e273164d9b1da79b4a3","date":1354830692,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cf3ec148ecb3b9b587d858b55ab51ebcd91cb5d","date":1354833412,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> slices = new ArrayList(1);\n    for (Slice slice : slices) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        slices.add(slice);\n      }\n    }\n\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a750dc301414dae3a75a82357bab6acb70979c7e","date":1354891654,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    if (lowerBound > upperBound) {\n      // nocommit\n      throw new RuntimeException(\"WHAAAT?\");\n    }\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f7cddb4677d24251b310957d5e25d22dbb4f67","date":1354955596,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    if (lowerBound > upperBound) {\n      throw new RuntimeException(\"WHAAAT?\");\n    }\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    if (lowerBound > upperBound) {\n      // nocommit\n      throw new RuntimeException(\"WHAAAT?\");\n    }\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"582990d4c10e28981c3aa4acf16910816492a76a","date":1354981858,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    if (lowerBound > upperBound) {\n      throw new RuntimeException(\"WHAAAT?\");\n    }\n    // lowerBound will be greater than upperBound if we are in the negatives\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8cf3ec148ecb3b9b587d858b55ab51ebcd91cb5d":["2507ce20f86051a93cc41e273164d9b1da79b4a3"],"2507ce20f86051a93cc41e273164d9b1da79b4a3":["9724f10f3fa18adbeba8d1cbfda62676dae942a3"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["582990d4c10e28981c3aa4acf16910816492a76a"],"a750dc301414dae3a75a82357bab6acb70979c7e":["8cf3ec148ecb3b9b587d858b55ab51ebcd91cb5d"],"582990d4c10e28981c3aa4acf16910816492a76a":["54f7cddb4677d24251b310957d5e25d22dbb4f67"],"9724f10f3fa18adbeba8d1cbfda62676dae942a3":["c78bb747213f4a3449337db2399309566a08241a"],"c78bb747213f4a3449337db2399309566a08241a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"54f7cddb4677d24251b310957d5e25d22dbb4f67":["a750dc301414dae3a75a82357bab6acb70979c7e"]},"commit2Childs":{"8cf3ec148ecb3b9b587d858b55ab51ebcd91cb5d":["a750dc301414dae3a75a82357bab6acb70979c7e"],"2507ce20f86051a93cc41e273164d9b1da79b4a3":["8cf3ec148ecb3b9b587d858b55ab51ebcd91cb5d"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a750dc301414dae3a75a82357bab6acb70979c7e":["54f7cddb4677d24251b310957d5e25d22dbb4f67"],"9724f10f3fa18adbeba8d1cbfda62676dae942a3":["2507ce20f86051a93cc41e273164d9b1da79b4a3"],"582990d4c10e28981c3aa4acf16910816492a76a":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"c78bb747213f4a3449337db2399309566a08241a":["9724f10f3fa18adbeba8d1cbfda62676dae942a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c78bb747213f4a3449337db2399309566a08241a"],"54f7cddb4677d24251b310957d5e25d22dbb4f67":["582990d4c10e28981c3aa4acf16910816492a76a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}