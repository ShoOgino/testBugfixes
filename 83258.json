{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createCluster(SolrCloudManager,TimeSource).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createCluster(SolrCloudManager,TimeSource).mjava","pathOld":"/dev/null","sourceNew":"  public static SimCloudManager createCluster(SolrCloudManager other, TimeSource timeSource) throws Exception {\n    SimCloudManager cloudManager = new SimCloudManager(timeSource);\n    cloudManager.getSimClusterStateProvider().copyFrom(other.getClusterStateProvider());\n    List<String> replicaTags = Arrays.asList(\n        Variable.Type.CORE_IDX.metricsAttribute,\n        \"QUERY./select.requests\",\n        \"UPDATE./update.requests\"\n    );\n    Set<String> nodeTags = createNodeValues(\"unused:1234_solr\").keySet();\n    for (String node : other.getClusterStateProvider().getLiveNodes()) {\n      SimClusterStateProvider simClusterStateProvider = cloudManager.getSimClusterStateProvider();\n      cloudManager.getSimNodeStateProvider().simSetNodeValues(node, other.getNodeStateProvider().getNodeValues(node, nodeTags));\n      Map<String, Map<String, List<ReplicaInfo>>> infos = other.getNodeStateProvider().getReplicaInfo(node, replicaTags);\n      simClusterStateProvider.simSetReplicaValues(node, infos, true);\n    }\n    cloudManager.getSimDistribStateManager().copyFrom(other.getDistribStateManager(), false);\n    return cloudManager;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createCluster(SolrCloudManager,AutoScalingConfig,TimeSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createCluster(SolrCloudManager,TimeSource).mjava","sourceNew":"  public static SimCloudManager createCluster(SolrCloudManager other, AutoScalingConfig config, TimeSource timeSource) throws Exception {\n    SimDistribStateManager distribStateManager = new SimDistribStateManager(SimDistribStateManager.createNewRootNode());\n    distribStateManager.copyFrom(other.getDistribStateManager(), false);\n    SimCloudManager cloudManager = new SimCloudManager(timeSource, distribStateManager);\n    if (config != null) {\n      cloudManager.getSimDistribStateManager().simSetAutoScalingConfig(config);\n    } else {\n      config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    }\n    Set<String> nodeTags = new HashSet<>(SimUtils.COMMON_NODE_TAGS);\n    nodeTags.addAll(config.getPolicy().getParams());\n    Set<String> replicaTags = new HashSet<>(SimUtils.COMMON_REPLICA_TAGS);\n    replicaTags.addAll(config.getPolicy().getPerReplicaAttributes());\n    cloudManager.getSimClusterStateProvider().copyFrom(other.getClusterStateProvider());\n    for (String node : other.getClusterStateProvider().getLiveNodes()) {\n      SimClusterStateProvider simClusterStateProvider = cloudManager.getSimClusterStateProvider();\n      cloudManager.getSimNodeStateProvider().simSetNodeValues(node, other.getNodeStateProvider().getNodeValues(node, nodeTags));\n      Map<String, Map<String, List<ReplicaInfo>>> infos = other.getNodeStateProvider().getReplicaInfo(node, replicaTags);\n      simClusterStateProvider.simSetReplicaValues(node, infos, true);\n    }\n    SimUtils.checkConsistency(cloudManager, config);\n    return cloudManager;\n  }\n\n","sourceOld":"  public static SimCloudManager createCluster(SolrCloudManager other, TimeSource timeSource) throws Exception {\n    SimCloudManager cloudManager = new SimCloudManager(timeSource);\n    cloudManager.getSimClusterStateProvider().copyFrom(other.getClusterStateProvider());\n    List<String> replicaTags = Arrays.asList(\n        Variable.Type.CORE_IDX.metricsAttribute,\n        \"QUERY./select.requests\",\n        \"UPDATE./update.requests\"\n    );\n    Set<String> nodeTags = createNodeValues(\"unused:1234_solr\").keySet();\n    for (String node : other.getClusterStateProvider().getLiveNodes()) {\n      SimClusterStateProvider simClusterStateProvider = cloudManager.getSimClusterStateProvider();\n      cloudManager.getSimNodeStateProvider().simSetNodeValues(node, other.getNodeStateProvider().getNodeValues(node, nodeTags));\n      Map<String, Map<String, List<ReplicaInfo>>> infos = other.getNodeStateProvider().getReplicaInfo(node, replicaTags);\n      simClusterStateProvider.simSetReplicaValues(node, infos, true);\n    }\n    cloudManager.getSimDistribStateManager().copyFrom(other.getDistribStateManager(), false);\n    return cloudManager;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edf5b262a72d10530eb2f01dc8f19060355b213e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}