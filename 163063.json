{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  LegacyNumericDocValues getNumericNonIterator(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new LegacyNumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  LegacyNumericDocValues getNumericNonIterator(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new LegacyNumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","sourceNew":"  IntFunction<Long> getNumericNonIterator(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new IntFunction<Long>() {\n      @Override\n      public Long apply(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  LegacyNumericDocValues getNumericNonIterator(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new LegacyNumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericNonIterator(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  IntFunction<Long> getNumericNonIterator(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new IntFunction<Long>() {\n      @Override\n      public Long apply(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}