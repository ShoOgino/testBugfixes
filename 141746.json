{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd709a876c659eeee03e7b54dd262deb53fd5b9a","date":1489673428,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a832732daa2b15ac166d70dfcbede5b74d08759","date":1490280009,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, true);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c4d4ec3bca82c8eac712592ab518cd082026f34","date":1585956055,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(IndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":null,"sourceOld":"    public SolrFeatureWeight(IndexSearcher searcher,\n        SolrQueryRequest request, Query originalQuery, Map<String,String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        String solrQuery = q;\n        final List<String> fqs = fq;\n\n        if ((solrQuery == null) || solrQuery.isEmpty()) {\n          solrQuery = \"*:*\";\n        }\n\n        solrQuery = macroExpander.expand(solrQuery);\n        if (solrQuery == null) {\n          throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n        }\n\n        final SolrQueryRequest req = makeRequest(request.getCore(), solrQuery,\n            fqs, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the filter queries\n        queryAndFilters = new ArrayList<Query>(); // If there are no fqs we just want an empty list\n        if (fqs != null) {\n          for (String fq : fqs) {\n            if ((fq != null) && (fq.trim().length() != 0)) {\n              fq = macroExpander.expand(fq);\n              if (fq == null) {\n                throw new FeatureException(this.getClass().getSimpleName()+\" requires efi parameter that was not passed in request.\");\n              }\n              final QParser fqp = QParser.getParser(fq, req);\n              final Query filterQuery = fqp.getQuery();\n              if (filterQuery != null) {\n                queryAndFilters.add(filterQuery);\n              }\n            }\n          }\n        }\n\n        final QParser parser = QParser.getParser(solrQuery, req);\n        query = parser.parse();\n\n        // Query can be null if there was no input to parse, for instance if you\n        // make a phrase query with \"to be\", and the analyzer removes all the\n        // words\n        // leaving nothing for the phrase query to parse.\n        if (query != null) {\n          queryAndFilters.add(query);\n          solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n        } else {\n          solrQueryWeight = null;\n        }\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dd709a876c659eeee03e7b54dd262deb53fd5b9a","9fc47cb7b4346802411bb432f501ed0673d7119e"],"6a832732daa2b15ac166d70dfcbede5b74d08759":["07ef8d46ad3265812d247126beb45b283763afee"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dd709a876c659eeee03e7b54dd262deb53fd5b9a"],"dd709a876c659eeee03e7b54dd262deb53fd5b9a":["07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c4d4ec3bca82c8eac712592ab518cd082026f34"]},"commit2Childs":{"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["6a832732daa2b15ac166d70dfcbede5b74d08759","9856095f7afb5a607bf5e65077615ed91273508c","dd709a876c659eeee03e7b54dd262deb53fd5b9a"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"6a832732daa2b15ac166d70dfcbede5b74d08759":[],"d58e44159788900f4a2113b84463dc3fbbf80f20":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd709a876c659eeee03e7b54dd262deb53fd5b9a":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6a832732daa2b15ac166d70dfcbede5b74d08759","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}