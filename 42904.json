{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d244faa5fcbf7803803d0cc0a9a79f1f3bcbbc49","date":1532672633,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    String sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n    String targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    String sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n    String targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, cloudConfig, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extSourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String extTargetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String sourceCollectionName;\n    String targetCollectionName;\n    if (followAliases) {\n      sourceCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extSourceCollectionName);\n      targetCollectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extTargetCollectionName);\n    } else {\n      sourceCollectionName = extSourceCollectionName;\n      targetCollectionName = extTargetCollectionName;\n    }\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n\n    if (splitKey == null || splitKey.trim().length() == 0)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key cannot be null or empty\");\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = {}\", sourceSlice, targetSlice, splitKey);\n        migrateKey(clusterState, cloudConfig, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d244faa5fcbf7803803d0cc0a9a79f1f3bcbbc49":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d244faa5fcbf7803803d0cc0a9a79f1f3bcbbc49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"]},"commit2Childs":{"d244faa5fcbf7803803d0cc0a9a79f1f3bcbbc49":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d244faa5fcbf7803803d0cc0a9a79f1f3bcbbc49"],"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}