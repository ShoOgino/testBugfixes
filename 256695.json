{"path":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","commits":[{"id":"66ba51c00e882f0132a67162dc4fd8e4340f8618","date":1195505109,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new BuffTokenFilter(ts);\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    ts = new BuffTokenFilter(ts);\n    verifyPayload(ts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","sourceNew":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","sourceOld":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new BuffTokenFilter(ts);\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    ts = new BuffTokenFilter(ts);\n    verifyPayload(ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","sourceNew":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","sourceOld":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","sourceNew":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","sourceOld":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testPayloadCopy().mjava","sourceNew":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","sourceOld":"  // Make sure old style next() calls result in a new copy of payloads\n  public void testPayloadCopy() throws IOException {\n    String s = \"how now brown cow\";\n    TokenStream ts;\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n\n    ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(s));\n    ts = new PayloadSetter(ts);\n    verifyPayload(ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["66ba51c00e882f0132a67162dc4fd8e4340f8618"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66ba51c00e882f0132a67162dc4fd8e4340f8618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66ba51c00e882f0132a67162dc4fd8e4340f8618"],"66ba51c00e882f0132a67162dc4fd8e4340f8618":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}