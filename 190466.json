{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, CollectedSearchGroup<GROUP_VALUE_TYPE>>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#AbstractFirstPassGroupingCollector(Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException If I/O related errors occur\n   */\n  public AbstractFirstPassGroupingCollector(Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, CollectedSearchGroup<GROUP_VALUE_TYPE>>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  public FirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    this.groupField = groupField;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n\n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<BytesRef, CollectedSearchGroup>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["c3a8a449466c1ff7ce2274fe73dab487256964b4","1fa60a501961bce2ff07ee1cde7c78699025547e"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a3776dccca01c11e7046323cfad46a3b4a471233","1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fa60a501961bce2ff07ee1cde7c78699025547e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c03daa6ddcb4768a702115ec63799cab5fff3d92"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1fa60a501961bce2ff07ee1cde7c78699025547e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","307cff5af2b00f126fdf9d3435b75d5ed4d0f402","a3776dccca01c11e7046323cfad46a3b4a471233"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"1fa60a501961bce2ff07ee1cde7c78699025547e":["c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}