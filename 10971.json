{"path":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#parseDoubleFromUser(String,String).mjava","commits":[{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#parseDoubleFromUser(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Wrapper for {@link Double#parseDouble(String)} that throws a BAD_REQUEST error if the input is not valid \n   * @param fieldName used in any exception, may be null\n   * @param val string to parse, NPE if null\n   */\n  static double parseDoubleFromUser(String fieldName, String val) {\n    if (val == null) {\n      throw new NullPointerException(\"Invalid input\" + (null == fieldName ? \"\" : \" for field \" + fieldName));\n    }\n    try {\n      return Double.parseDouble(val);\n    } catch (NumberFormatException e) {\n      String msg = \"Invalid Number: \" + val + (null == fieldName ? \"\" : \" for field \" + fieldName);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#parseDoubleFromUser(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Wrapper for {@link Double#parseDouble(String)} that throws a BAD_REQUEST error if the input is not valid \n   * @param fieldName used in any exception, may be null\n   * @param val string to parse, NPE if null\n   */\n  static double parseDoubleFromUser(String fieldName, String val) {\n    if (val == null) {\n      throw new NullPointerException(\"Invalid input\" + (null == fieldName ? \"\" : \" for field \" + fieldName));\n    }\n    try {\n      return Double.parseDouble(val);\n    } catch (NumberFormatException e) {\n      String msg = \"Invalid Number: \" + val + (null == fieldName ? \"\" : \" for field \" + fieldName);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#parseDoubleFromUser(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Wrapper for {@link Double#parseDouble(String)} that throws a BAD_REQUEST error if the input is not valid \n   * @param fieldName used in any exception, may be null\n   * @param val string to parse, NPE if null\n   */\n  static double parseDoubleFromUser(String fieldName, String val) {\n    if (val == null) {\n      throw new NullPointerException(\"Invalid input\" + (null == fieldName ? \"\" : \" for field \" + fieldName));\n    }\n    try {\n      return Double.parseDouble(val);\n    } catch (NumberFormatException e) {\n      String msg = \"Invalid Number: \" + val + (null == fieldName ? \"\" : \" for field \" + fieldName);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}