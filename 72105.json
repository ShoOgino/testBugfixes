{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","commits":[{"id":"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039","date":1382209267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","pathOld":"/dev/null","sourceNew":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      List<AtomicReaderContext> leaves = reader.leaves();\n      if (leaves.size() > 1) {\n        throw new IllegalArgumentException(\"CompositeReader is not supported\");\n      }\n      weightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(0));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557640e996995f56504248e3347a3c61c1923097","date":1383067984,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","sourceNew":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      if (leaves.size() == 0) {\n        throw new IllegalArgumentException(\"Reader has to have at least one leaf\");\n      }\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      \n      currentLeafIndex = 0;\n      currentWeightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex));\n    }\n\n","sourceOld":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      List<AtomicReaderContext> leaves = reader.leaves();\n      if (leaves.size() > 1) {\n        throw new IllegalArgumentException(\"CompositeReader is not supported\");\n      }\n      weightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(0));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","sourceNew":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      currentWeightValues = (leaves.size() > 0) \n          ? weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex))\n          : null;\n    }\n\n","sourceOld":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      if (leaves.size() == 0) {\n        throw new IllegalArgumentException(\"Reader has to have at least one leaf\");\n      }\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      \n      currentLeafIndex = 0;\n      currentWeightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","sourceNew":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      currentWeightValues = (leaves.size() > 0) \n          ? weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex))\n          : null;\n    }\n\n","sourceOld":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      if (leaves.size() == 0) {\n        throw new IllegalArgumentException(\"Reader has to have at least one leaf\");\n      }\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      \n      currentLeafIndex = 0;\n      currentWeightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c5f879e49375db0f48ca533856f226c2db57a5","date":1390688316,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.DocumentValueSourceInputIterator#DocumentValueSourceInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentExpressionDictionary.DocumentExpressionInputIterator#DocumentExpressionInputIterator(boolean).mjava","sourceNew":"    public DocumentValueSourceInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      currentWeightValues = (leaves.size() > 0) \n          ? weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex))\n          : null;\n    }\n\n","sourceOld":"    public DocumentExpressionInputIterator(boolean hasPayloads)\n        throws IOException {\n      super(hasPayloads);\n      leaves = reader.leaves();\n      starts = new int[leaves.size() + 1];\n      for (int i = 0; i < leaves.size(); i++) {\n        starts[i] = leaves.get(i).docBase;\n      }\n      starts[leaves.size()] = reader.maxDoc();\n      currentWeightValues = (leaves.size() > 0) \n          ? weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex))\n          : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["557640e996995f56504248e3347a3c61c1923097"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["557640e996995f56504248e3347a3c61c1923097","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"11c5f879e49375db0f48ca533856f226c2db57a5":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"557640e996995f56504248e3347a3c61c1923097":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c5f879e49375db0f48ca533856f226c2db57a5"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","11c5f879e49375db0f48ca533856f226c2db57a5"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["557640e996995f56504248e3347a3c61c1923097"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"557640e996995f56504248e3347a3c61c1923097":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"11c5f879e49375db0f48ca533856f226c2db57a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}