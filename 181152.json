{"path":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","commits":[{"id":"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4","date":1394446722,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof SolrInputField)) {\n      return false;\n    }\n\n    SolrInputField sif = (SolrInputField) o;\n\n    if (!name.equals(sif.name)) {\n      return false;\n    }\n\n    if (!value.equals(sif.value)) {\n      return false;\n    }\n\n    if (Float.compare(sif.boost, boost) != 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0146597a1c108e2e637e97237e4619e0e5ba2aef","date":1394471404,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","sourceNew":"  /**\n   * This method is implemented for tests and should not be counted\n   * on in production code.\n   * \n   * @lucene.experimental\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof SolrInputField)) {\n      return false;\n    }\n\n    SolrInputField sif = (SolrInputField) o;\n\n    if (!name.equals(sif.name)) {\n      return false;\n    }\n\n    if (!value.equals(sif.value)) {\n      return false;\n    }\n\n    if (Float.compare(sif.boost, boost) != 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof SolrInputField)) {\n      return false;\n    }\n\n    SolrInputField sif = (SolrInputField) o;\n\n    if (!name.equals(sif.name)) {\n      return false;\n    }\n\n    if (!value.equals(sif.value)) {\n      return false;\n    }\n\n    if (Float.compare(sif.boost, boost) != 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is implemented for tests and should not be counted\n   * on in production code.\n   * \n   * @lucene.experimental\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof SolrInputField)) {\n      return false;\n    }\n\n    SolrInputField sif = (SolrInputField) o;\n\n    if (!name.equals(sif.name)) {\n      return false;\n    }\n\n    if (!value.equals(sif.value)) {\n      return false;\n    }\n\n    if (Float.compare(sif.boost, boost) != 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6071e662e00f61ccd046fe73a31ac6e57aaca116","date":1394797480,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#equals(Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method is implemented for tests and should not be counted\n   * on in production code.\n   * \n   * @lucene.experimental\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof SolrInputField)) {\n      return false;\n    }\n\n    SolrInputField sif = (SolrInputField) o;\n\n    if (!name.equals(sif.name)) {\n      return false;\n    }\n\n    if (!value.equals(sif.value)) {\n      return false;\n    }\n\n    if (Float.compare(sif.boost, boost) != 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0146597a1c108e2e637e97237e4619e0e5ba2aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6071e662e00f61ccd046fe73a31ac6e57aaca116"]},"commit2Childs":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["6071e662e00f61ccd046fe73a31ac6e57aaca116","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}