{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","commits":[{"id":"44b70598de6c8080681dc245a7281f8bd3ce9535","date":1506705026,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      List<Number> first = (List<Number>)values[0];\n      int[] samples = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      List<Number> first = (List<Number>)values[0];\n      List<Number> second = (List<Number>)values[1];\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      List<Number> first = (List<Number>)values[0];\n      int[] samples = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      List<Number> first = (List<Number>)values[0];\n      List<Number> second = (List<Number>)values[1];\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      List<Number> first = (List<Number>)values[0];\n      int[] samples = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      List<Number> first = (List<Number>)values[0];\n      List<Number> second = (List<Number>)values[1];\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      List<Number> first = (List<Number>)values[0];\n      int[] samples = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      List<Number> first = (List<Number>)values[0];\n      List<Number> second = (List<Number>)values[1];\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((BigDecimal) value).intValue()).toArray();\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnumeratedDistributionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> first = (List<Number>)values[0];\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      int[] samples = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> first = (List<Number>)values[0];\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> second = (List<Number>)values[1];\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException{\n    if(values.length == 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    if(values.length == 1) {\n      List<Number> first = (List<Number>)values[0];\n      int[] samples = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      return new EnumeratedIntegerDistribution(samples);\n    } else {\n      List<Number> first = (List<Number>)values[0];\n      List<Number> second = (List<Number>)values[1];\n      int[] singletons = ((List) first).stream().mapToInt(value -> ((Number) value).intValue()).toArray();\n      double[] probs = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      return new EnumeratedIntegerDistribution(singletons, probs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44b70598de6c8080681dc245a7281f8bd3ce9535"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["44b70598de6c8080681dc245a7281f8bd3ce9535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44b70598de6c8080681dc245a7281f8bd3ce9535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6240b74b884c5587f2a4062dd27d6c32bf228889","44b70598de6c8080681dc245a7281f8bd3ce9535"],"44b70598de6c8080681dc245a7281f8bd3ce9535":["6240b74b884c5587f2a4062dd27d6c32bf228889","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}