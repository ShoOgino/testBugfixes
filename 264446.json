{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","commits":[{"id":"a4278fc65afbb35739525c37f818cded6fe6e9ae","date":1369132128,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bc5c6580726a25c735495e6d439deed963e457bc","bc5c6580726a25c735495e6d439deed963e457bc","bc5c6580726a25c735495e6d439deed963e457bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":null,"sourceOld":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      assert indexWriter.holdsFullFlushLock();\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee67a99e7e36da49a4b68758a01d1ac09ff5472c","date":1547653069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.unlockNewThreadStates();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.lockNewThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc5c6580726a25c735495e6d439deed963e457bc","date":1557307161,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.unlockNewThreadStates();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      perThreadPool.lockNewThreadStates();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.unlockNewThreadStates();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.lockNewThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<DocumentsWriterPerThread> writers = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      // we return this closure to unlock all writers once done\n      // or if hit an exception below in the try block.\n      // we can't assign this later otherwise the ref can't be final\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.unlockNewWriters();\n        for (DocumentsWriterPerThread writer : writers) {\n          writer.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      perThreadPool.lockNewWriters();\n      writers.addAll(perThreadPool.filterAndLock(x -> true));\n      for (final DocumentsWriterPerThread perThread : writers) {\n        assert perThread.isHeldByCurrentThread();\n        abortDocumentsWriterPerThread(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.size() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.unlockNewThreadStates();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      perThreadPool.lockNewThreadStates();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["bc5c6580726a25c735495e6d439deed963e457bc"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"6b8498afacfc8322268ca0d659d274fcce08d557":["7af110b00ea8df9429309d83e38e0533d82e144f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["6b8498afacfc8322268ca0d659d274fcce08d557"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"bc5c6580726a25c735495e6d439deed963e457bc":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["6b8498afacfc8322268ca0d659d274fcce08d557","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"6b8498afacfc8322268ca0d659d274fcce08d557":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["bc5c6580726a25c735495e6d439deed963e457bc"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"bc5c6580726a25c735495e6d439deed963e457bc":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}