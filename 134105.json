{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#getMinTermLength().mjava","commits":[{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#getMinTermLength().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the minimal length of the terms accepted by the automaton.\n   * This speeds up the term scanning for automatons accepting a finite language.\n   */\n  protected int getMinTermLength() {\n    // Automatons accepting infinite language (e.g. PrefixQuery and WildcardQuery) do not benefit much from\n    // min term length while it takes time to compute it. More precisely, by skipping this computation PrefixQuery\n    // is significantly boosted while WildcardQuery might be slightly degraded on average. This min term length\n    // mainly boosts FuzzyQuery.\n    int commonSuffixLength = commonSuffix == null ? 0 : commonSuffix.length;\n    if (!finite) {\n      return commonSuffixLength;\n    }\n    // Since we are only dealing with finite language, there is no loop to detect.\n    int commonPrefixLength = 0;\n    int state = 0;\n    Transition t = null;\n    while (true) {\n      if (runAutomaton.isAccept(state)) {\n        // The common prefix reaches a final state. So common prefix and common suffix overlap.\n        // Min term length is the max between common prefix and common suffix lengths.\n        return Math.max(commonPrefixLength, commonSuffixLength);\n      }\n      if (automaton.getNumTransitions(state) == 1) {\n        if (t == null) {\n          t = new Transition();\n        }\n        automaton.getTransition(state, 0, t);\n        if (t.min == t.max) {\n          state = t.dest;\n          commonPrefixLength++;\n          continue;\n        }\n      }\n      break;\n    }\n    // Min term length is the sum of common prefix and common suffix lengths.\n    return commonPrefixLength + commonSuffixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23fcccd57316410c404dd37307a496ab850efa9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}