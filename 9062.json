{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#readFieldInfos(SegmentInfoPerCommit).mjava","commits":[{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#readFieldInfos(SegmentInfoPerCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the most recent {@link FieldInfos} of the given segment info.\n   * \n   * @lucene.internal\n   */\n  static FieldInfos readFieldInfos(SegmentInfoPerCommit info) throws IOException {\n    final Directory dir;\n    final boolean closeDir;\n    if (info.getFieldInfosGen() == -1 && info.info.getUseCompoundFile()) {\n      // no fieldInfos gen and segment uses a compound file\n      dir = new CompoundFileDirectory(info.info.dir,\n          IndexFileNames.segmentFileName(info.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION),\n          IOContext.READONCE,\n          false);\n      closeDir = true;\n    } else {\n      // gen'd FIS are read outside CFS, or the segment doesn't use a compound file\n      dir = info.info.dir;\n      closeDir = false;\n    }\n    \n    try {\n      final String segmentSuffix = info.getFieldInfosGen() == -1 ? \"\" : Long.toString(info.getFieldInfosGen(), Character.MAX_RADIX);\n      return info.info.getCodec().fieldInfosFormat().getFieldInfosReader().read(dir, info.info.name, segmentSuffix, IOContext.READONCE);\n    } finally {\n      if (closeDir) {\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["925e350e1b939d6381c12c2d73ce20aa438d482c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#readFieldInfos(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#readFieldInfos(SegmentInfoPerCommit).mjava","sourceNew":"  /**\n   * Reads the most recent {@link FieldInfos} of the given segment info.\n   * \n   * @lucene.internal\n   */\n  static FieldInfos readFieldInfos(SegmentCommitInfo info) throws IOException {\n    final Directory dir;\n    final boolean closeDir;\n    if (info.getFieldInfosGen() == -1 && info.info.getUseCompoundFile()) {\n      // no fieldInfos gen and segment uses a compound file\n      dir = new CompoundFileDirectory(info.info.dir,\n          IndexFileNames.segmentFileName(info.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION),\n          IOContext.READONCE,\n          false);\n      closeDir = true;\n    } else {\n      // gen'd FIS are read outside CFS, or the segment doesn't use a compound file\n      dir = info.info.dir;\n      closeDir = false;\n    }\n    \n    try {\n      final String segmentSuffix = info.getFieldInfosGen() == -1 ? \"\" : Long.toString(info.getFieldInfosGen(), Character.MAX_RADIX);\n      return info.info.getCodec().fieldInfosFormat().getFieldInfosReader().read(dir, info.info.name, segmentSuffix, IOContext.READONCE);\n    } finally {\n      if (closeDir) {\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the most recent {@link FieldInfos} of the given segment info.\n   * \n   * @lucene.internal\n   */\n  static FieldInfos readFieldInfos(SegmentInfoPerCommit info) throws IOException {\n    final Directory dir;\n    final boolean closeDir;\n    if (info.getFieldInfosGen() == -1 && info.info.getUseCompoundFile()) {\n      // no fieldInfos gen and segment uses a compound file\n      dir = new CompoundFileDirectory(info.info.dir,\n          IndexFileNames.segmentFileName(info.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION),\n          IOContext.READONCE,\n          false);\n      closeDir = true;\n    } else {\n      // gen'd FIS are read outside CFS, or the segment doesn't use a compound file\n      dir = info.info.dir;\n      closeDir = false;\n    }\n    \n    try {\n      final String segmentSuffix = info.getFieldInfosGen() == -1 ? \"\" : Long.toString(info.getFieldInfosGen(), Character.MAX_RADIX);\n      return info.info.getCodec().fieldInfosFormat().getFieldInfosReader().read(dir, info.info.name, segmentSuffix, IOContext.READONCE);\n    } finally {\n      if (closeDir) {\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8435160e9702b19398118ddf76b61c846612b6a4"],"8435160e9702b19398118ddf76b61c846612b6a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}