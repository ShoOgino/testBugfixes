{"path":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testFakeCPUCircuitBreaker().mjava","commits":[{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testFakeCPUCircuitBreaker().mjava","pathOld":"/dev/null","sourceNew":"  public void testFakeCPUCircuitBreaker() {\n    AtomicInteger failureCount = new AtomicInteger();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    try {\n      removeAllExistingCircuitBreakers();\n\n      CircuitBreaker circuitBreaker = new FakeCPUCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\",5, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef286034ca1be064a363aaec38e34e64a59154c","date":1598517382,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testFakeCPUCircuitBreaker().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testFakeCPUCircuitBreaker().mjava","sourceNew":"  public void testFakeCPUCircuitBreaker() {\n    AtomicInteger failureCount = new AtomicInteger();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    try {\n      removeAllExistingCircuitBreakers();\n\n      PluginInfo pluginInfo = h.getCore().getSolrConfig().getPluginInfo(CircuitBreakerManager.class.getName());\n\n      CircuitBreaker.CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerManager.buildCBConfig(pluginInfo);\n      CircuitBreaker circuitBreaker = new FakeCPUCircuitBreaker(circuitBreakerConfig);\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\",5, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testFakeCPUCircuitBreaker() {\n    AtomicInteger failureCount = new AtomicInteger();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    try {\n      removeAllExistingCircuitBreakers();\n\n      CircuitBreaker circuitBreaker = new FakeCPUCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\",5, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ef286034ca1be064a363aaec38e34e64a59154c":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ef286034ca1be064a363aaec38e34e64a59154c"],"a761febaf4b3c09d4490395eb90617263016fc2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ef286034ca1be064a363aaec38e34e64a59154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a761febaf4b3c09d4490395eb90617263016fc2a":["0ef286034ca1be064a363aaec38e34e64a59154c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}