{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","commits":[{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test only method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   * @lucene.internal\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<String>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5d79a415d42bb15349e423cdd5717f07de55dfa6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","sourceNew":"  /**\n   * Test only method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   * @lucene.internal\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","sourceOld":"  /**\n   * Test only method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   * @lucene.internal\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<String>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d79a415d42bb15349e423cdd5717f07de55dfa6","date":1456519632,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","sourceNew":"  /**\n   * Method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","sourceOld":"  /**\n   * Test only method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   * @lucene.internal\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","bugFix":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","sourceNew":"  /**\n   * Method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","sourceOld":"  /**\n   * Test only method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   * @lucene.internal\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#getLivePaths().mjava","sourceNew":"  /**\n   * Method for inspecting the cache\n   *\n   * @return paths in the cache which have not been marked \"done\"\n   * @see #doneWithDirectory\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","sourceOld":"  /**\n   * Method for inspecting the cache\n   * @return paths in the cache which have not been marked \"done\"\n   *\n   * @see #doneWithDirectory\n   */\n  public synchronized Set<String> getLivePaths() {\n    HashSet<String> livePaths = new HashSet<>();\n    for (CacheValue val : byPathCache.values()) {\n      if (!val.doneWithDir) {\n        livePaths.add(val.path);\n      }\n    }\n    return livePaths;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"af2638813028b254a88b418ebeafb541afb49653":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5d79a415d42bb15349e423cdd5717f07de55dfa6"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d79a415d42bb15349e423cdd5717f07de55dfa6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["af2638813028b254a88b418ebeafb541afb49653","5d79a415d42bb15349e423cdd5717f07de55dfa6"],"af2638813028b254a88b418ebeafb541afb49653":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"5d79a415d42bb15349e423cdd5717f07de55dfa6":["af2638813028b254a88b418ebeafb541afb49653"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}