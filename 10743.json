{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker#createQueries(List[Object],Analyzer).mjava","commits":[{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   * \n   * @param qs array of strings containing query expressions\n   * @param a analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++) {\n      try {\n\n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n\n        } else if (query instanceof Query) {\n          q = (Query) query;\n\n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n\n        if (q != null) {\n          queries.add(q);\n        }\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   * \n   * @param qs array of strings containing query expressions\n   * @param a analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++) {\n      try {\n\n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n\n        } else if (query instanceof Query) {\n          q = (Query) query;\n\n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n\n        if (q != null) {\n          queries.add(q);\n        }\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   * \n   * @param qs array of strings containing query expressions\n   * @param a analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++) {\n      try {\n\n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n\n        } else if (query instanceof Query) {\n          q = (Query) query;\n\n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n\n        if (q != null) {\n          queries.add(q);\n        }\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   * \n   * @param qs array of strings containing query expressions\n   * @param a analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++) {\n      try {\n\n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n\n        } else if (query instanceof Query) {\n          q = (Query) query;\n\n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n\n        if (q != null) {\n          queries.add(q);\n        }\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}