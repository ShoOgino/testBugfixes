{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","commits":[{"id":"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e","date":1410548439,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTests#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext(null));\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext(null));\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    Utils.consumeFully(response.getEntity());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["bafca15d8e408346a67f4282ad1143b88023893b"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["859081acf00749f5dd462772c571d611d4a4d2db"],"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e"],"bafca15d8e408346a67f4282ad1143b88023893b":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}