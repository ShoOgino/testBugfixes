{"path":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","commits":[{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","sourceNew":"  //Test bug found when first query word does not match anything\n  public void testNoMatchFirstWordBug() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  //Test bug found when first query word does not match anything\n  public void testNoMatchFirstWordBug() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","sourceNew":"  //Test bug found when first query word does not match anything\n  public void testNoMatchFirstWordBug() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  //Test bug found when first query word does not match anything\n  public void testNoMatchFirstWordBug() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}