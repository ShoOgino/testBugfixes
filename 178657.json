{"path":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","sourceNew":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","sourceNew":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getName().equals(\"clone\")) {\n        continue;\n      }\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testMethodsOverridden().mjava","sourceNew":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getName().equals(\"clone\")) {\n        continue;\n      }\n      if (m.getDeclaringClass() != Object.class && !Modifier.isFinal(m.getModifiers())) {\n        assertTrue(m + \" is not overridden ! \", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergePolicy are overridden. That's important\n    // to ensure that NoMergePolicy overrides everything, so that no unexpected\n    // behavior/error occurs\n    for (Method m : NoMergePolicy.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergePolicy. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergePolicy will extend a different class than Object, this\n      // will need to change.\n      if (m.getName().equals(\"clone\")) {\n        continue;\n      }\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergePolicy.class);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"]},"commit2Childs":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}