{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8febb56d1ed9f3314d35d075599fd9aff857be3c","date":1337729003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n      // set PayloadProcessor\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.currentReaderPayloadProcessor = mergeState.readerPayloadProcessor[i];\n      } else {\n        mergeState.currentReaderPayloadProcessor = null;\n      }\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (int i = 0; i < mergeState.readers.size(); i++) {\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n        }\n      }\n      if (reader.getLiveDocs() != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(mergeState.fieldInfos, numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["32e43f282bea25b8cc26e4a842d98deafd617e9b","3599646b4d4c346cf74d334813488b8b337b5bf5"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","0935c850ea562932997b72c69d93e345f21d7f45"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["8febb56d1ed9f3314d35d075599fd9aff857be3c","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["bc124b3b129ef11a255212f3af482b771c5b3a6c"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["c95a819869502635864dac0a788f874787e3395b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c95a819869502635864dac0a788f874787e3395b","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["3599646b4d4c346cf74d334813488b8b337b5bf5"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","3599646b4d4c346cf74d334813488b8b337b5bf5"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["8febb56d1ed9f3314d35d075599fd9aff857be3c","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","22a2e66dfda83847e80095b8693c660742ab3e9c"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","bc124b3b129ef11a255212f3af482b771c5b3a6c","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}