{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}