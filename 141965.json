{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JavabinTupleStreamParser#readObject(DataInputInputStream).mjava","commits":[{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JavabinTupleStreamParser#readObject(DataInputInputStream).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Object readObject(DataInputInputStream dis) throws IOException {\n    if (tagByte == SOLRDOC) {\n      return readSolrDocumentAsMap(dis);\n    }\n    if (onlyJsonTypes) {\n      switch (tagByte >>> 5) {\n        case SINT >>> 5:\n          int i = readSmallInt(dis);\n          return (long) i;\n        case ORDERED_MAP >>> 5:\n          return readAsMap(dis);\n        case NAMED_LST >>> 5:\n          return readAsMap(dis);\n      }\n\n      switch (tagByte) {\n        case INT: {\n          int i = dis.readInt();\n          return (long) i;\n        }\n        case FLOAT: {\n          float v = dis.readFloat();\n          return (double) v;\n        }\n        case BYTE: {\n          byte b = dis.readByte();\n          return (long) b;\n        }\n        case SHORT: {\n          short s = dis.readShort();\n          return (long) s;\n        }\n\n        case DATE: {\n          return Instant.ofEpochMilli(dis.readLong()).toString();\n        }\n\n        default:\n          return super.readObject(dis);\n      }\n    } else return super.readObject(dis);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JavabinTupleStreamParser#readObject(DataInputInputStream).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Object readObject(DataInputInputStream dis) throws IOException {\n    if (tagByte == SOLRDOC) {\n      return readSolrDocumentAsMap(dis);\n    }\n    if (onlyJsonTypes) {\n      switch (tagByte >>> 5) {\n        case SINT >>> 5:\n          int i = readSmallInt(dis);\n          return (long) i;\n        case ORDERED_MAP >>> 5:\n          return readAsMap(dis);\n        case NAMED_LST >>> 5:\n          return readAsMap(dis);\n      }\n\n      switch (tagByte) {\n        case INT: {\n          int i = dis.readInt();\n          return (long) i;\n        }\n        case FLOAT: {\n          float v = dis.readFloat();\n          return (double) v;\n        }\n        case BYTE: {\n          byte b = dis.readByte();\n          return (long) b;\n        }\n        case SHORT: {\n          short s = dis.readShort();\n          return (long) s;\n        }\n\n        case DATE: {\n          return Instant.ofEpochMilli(dis.readLong()).toString();\n        }\n\n        default:\n          return super.readObject(dis);\n      }\n    } else return super.readObject(dis);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da8b6cfd1b67b932db9907356935046c4d40d033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da8b6cfd1b67b932db9907356935046c4d40d033"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8b6cfd1b67b932db9907356935046c4d40d033","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}