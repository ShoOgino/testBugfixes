{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      int trackedStateVersion = reader.getClusterState().getZkClusterStateVersion();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testStateFormatUpdate(boolean).mjava","sourceNew":"  public void testStateFormatUpdate(boolean explicitRefresh, boolean isInteresting) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      if (isInteresting) {\n        reader.addCollectionWatch(\"c1\");\n      }\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().hasCollection(\"c1\")) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        if (explicitRefresh) {\n          reader.updateClusterState();\n        } else {\n          for (int i = 0; i < 100; ++i) {\n            if (reader.getClusterState().getCollection(\"c1\").getStateFormat() == 2) {\n              break;\n            }\n            Thread.sleep(50);\n          }\n        }\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testStateFormatUpdate(boolean explicitRefresh) throws Exception {\n    String zkDir = createTempDir(\"testStateFormatUpdate\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      int trackedStateVersion = reader.getClusterState().getZkClusterStateVersion();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      {\n        // create new collection with stateFormat = 1\n        DocCollection stateV1 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", stateV1);\n        writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(1, collection.getStateFormat());\n      }\n\n\n      {\n        // Now update the collection to stateFormat = 2\n        DocCollection stateV2 = new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\");\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c1\", stateV2);\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertTrue(exists);\n\n        trackedStateVersion = refresh(reader, trackedStateVersion, explicitRefresh);\n\n        DocCollection collection = reader.getClusterState().getCollection(\"c1\");\n        assertEquals(2, collection.getStateFormat());\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}