{"path":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","commits":[{"id":"c7f73df94cfb3e05fba3b55eaa6677855a369c35","date":1341945151,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a class given as Resource and checks for valid method invocations */\n  private int checkClass(final ClassReader reader) {\n    final int[] violations = new int[1];\n    reader.accept(new ClassVisitor(Opcodes.ASM4) {\n      final String className = Type.getObjectType(reader.getClassName()).getClassName();\n      String source = null;\n      \n      @Override\n      public void visitSource(String source, String debug) {\n        this.source = source;\n      }\n      \n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        return new MethodVisitor(Opcodes.ASM4) {\n          private int lineNo = -1;\n          \n          private ClassSignatureLookup lookupRelatedClass(String internalName) {\n            ClassSignatureLookup c = classesToCheck.get(internalName);\n            if (c == null) try {\n              c = getClassFromClassLoader(internalName);\n            } catch (BuildException be) {\n              // we ignore lookup errors and simply ignore this related class\n              c = null;\n            }\n            return c;\n          }\n          \n          private boolean checkClassUse(String owner) {\n            final String printout = forbiddenClasses.get(owner);\n            if (printout != null) {\n              log(\"Forbidden class use: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            return false;\n          }\n          \n          private boolean checkMethodAccess(String owner, Method method) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenMethods.get(owner + '\\000' + method);\n            if (printout != null) {\n              log(\"Forbidden method invocation: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.methods.contains(method)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkMethodAccess(superName, method)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkMethodAccess(intf, method)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n          \n          private boolean checkFieldAccess(String owner, String field) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenFields.get(owner + '\\000' + field);\n            if (printout != null) {\n              log(\"Forbidden field access: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.fields.contains(field)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkFieldAccess(superName, field)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkFieldAccess(intf, field)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public void visitMethodInsn(int opcode, String owner, String name, String desc) {\n            if (checkMethodAccess(owner, new Method(name, desc))) {\n              violations[0]++;\n              reportSourceAndLine();\n            }\n          }\n          \n          @Override\n          public void visitFieldInsn(int opcode, String owner, String name, String desc) {\n            if (checkFieldAccess(owner, name)) {\n             violations[0]++;\n             reportSourceAndLine();\n            }\n          }\n\n          private void reportSourceAndLine() {\n            final StringBuilder sb = new StringBuilder(\"  in \").append(className);\n            if (source != null && lineNo >= 0) {\n              new Formatter(sb, Locale.ROOT).format(\" (%s:%d)\", source, lineNo).flush();\n            }\n            log(sb.toString(), Project.MSG_ERR);\n          }\n          \n          @Override\n          public void visitLineNumber(int lineNo, Label start) {\n            this.lineNo = lineNo;\n          }\n        };\n      }\n    }, ClassReader.SKIP_FRAMES);\n    return violations[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a class given as Resource and checks for valid method invocations */\n  private int checkClass(final ClassReader reader) {\n    final int[] violations = new int[1];\n    reader.accept(new ClassVisitor(Opcodes.ASM4) {\n      final String className = Type.getObjectType(reader.getClassName()).getClassName();\n      String source = null;\n      \n      @Override\n      public void visitSource(String source, String debug) {\n        this.source = source;\n      }\n      \n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        return new MethodVisitor(Opcodes.ASM4) {\n          private int lineNo = -1;\n          \n          private ClassSignatureLookup lookupRelatedClass(String internalName) {\n            ClassSignatureLookup c = classesToCheck.get(internalName);\n            if (c == null) try {\n              c = getClassFromClassLoader(internalName);\n            } catch (BuildException be) {\n              // we ignore lookup errors and simply ignore this related class\n              c = null;\n            }\n            return c;\n          }\n          \n          private boolean checkClassUse(String owner) {\n            final String printout = forbiddenClasses.get(owner);\n            if (printout != null) {\n              log(\"Forbidden class use: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            return false;\n          }\n          \n          private boolean checkMethodAccess(String owner, Method method) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenMethods.get(owner + '\\000' + method);\n            if (printout != null) {\n              log(\"Forbidden method invocation: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.methods.contains(method)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkMethodAccess(superName, method)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkMethodAccess(intf, method)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n          \n          private boolean checkFieldAccess(String owner, String field) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenFields.get(owner + '\\000' + field);\n            if (printout != null) {\n              log(\"Forbidden field access: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.fields.contains(field)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkFieldAccess(superName, field)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkFieldAccess(intf, field)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public void visitMethodInsn(int opcode, String owner, String name, String desc) {\n            if (checkMethodAccess(owner, new Method(name, desc))) {\n              violations[0]++;\n              reportSourceAndLine();\n            }\n          }\n          \n          @Override\n          public void visitFieldInsn(int opcode, String owner, String name, String desc) {\n            if (checkFieldAccess(owner, name)) {\n             violations[0]++;\n             reportSourceAndLine();\n            }\n          }\n\n          private void reportSourceAndLine() {\n            final StringBuilder sb = new StringBuilder(\"  in \").append(className);\n            if (source != null && lineNo >= 0) {\n              new Formatter(sb, Locale.ROOT).format(\" (%s:%d)\", source, lineNo).flush();\n            }\n            log(sb.toString(), Project.MSG_ERR);\n          }\n          \n          @Override\n          public void visitLineNumber(int lineNo, Label start) {\n            this.lineNo = lineNo;\n          }\n        };\n      }\n    }, ClassReader.SKIP_FRAMES);\n    return violations[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a class given as Resource and checks for valid method invocations */\n  private int checkClass(final ClassReader reader) {\n    final int[] violations = new int[1];\n    reader.accept(new ClassVisitor(Opcodes.ASM4) {\n      final String className = Type.getObjectType(reader.getClassName()).getClassName();\n      String source = null;\n      \n      @Override\n      public void visitSource(String source, String debug) {\n        this.source = source;\n      }\n      \n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        return new MethodVisitor(Opcodes.ASM4) {\n          private int lineNo = -1;\n          \n          private ClassSignatureLookup lookupRelatedClass(String internalName) {\n            ClassSignatureLookup c = classesToCheck.get(internalName);\n            if (c == null) try {\n              c = getClassFromClassLoader(internalName);\n            } catch (BuildException be) {\n              // we ignore lookup errors and simply ignore this related class\n              c = null;\n            }\n            return c;\n          }\n          \n          private boolean checkClassUse(String owner) {\n            final String printout = forbiddenClasses.get(owner);\n            if (printout != null) {\n              log(\"Forbidden class use: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            return false;\n          }\n          \n          private boolean checkMethodAccess(String owner, Method method) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenMethods.get(owner + '\\000' + method);\n            if (printout != null) {\n              log(\"Forbidden method invocation: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.methods.contains(method)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkMethodAccess(superName, method)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkMethodAccess(intf, method)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n          \n          private boolean checkFieldAccess(String owner, String field) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenFields.get(owner + '\\000' + field);\n            if (printout != null) {\n              log(\"Forbidden field access: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.fields.contains(field)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkFieldAccess(superName, field)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkFieldAccess(intf, field)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public void visitMethodInsn(int opcode, String owner, String name, String desc) {\n            if (checkMethodAccess(owner, new Method(name, desc))) {\n              violations[0]++;\n              reportSourceAndLine();\n            }\n          }\n          \n          @Override\n          public void visitFieldInsn(int opcode, String owner, String name, String desc) {\n            if (checkFieldAccess(owner, name)) {\n             violations[0]++;\n             reportSourceAndLine();\n            }\n          }\n\n          private void reportSourceAndLine() {\n            final StringBuilder sb = new StringBuilder(\"  in \").append(className);\n            if (source != null && lineNo >= 0) {\n              new Formatter(sb, Locale.ROOT).format(\" (%s:%d)\", source, lineNo).flush();\n            }\n            log(sb.toString(), Project.MSG_ERR);\n          }\n          \n          @Override\n          public void visitLineNumber(int lineNo, Label start) {\n            this.lineNo = lineNo;\n          }\n        };\n      }\n    }, ClassReader.SKIP_FRAMES);\n    return violations[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5","date":1360055735,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","sourceNew":null,"sourceOld":"  /** Parses a class given as Resource and checks for valid method invocations */\n  private int checkClass(final ClassReader reader) {\n    final int[] violations = new int[1];\n    reader.accept(new ClassVisitor(Opcodes.ASM4) {\n      final String className = Type.getObjectType(reader.getClassName()).getClassName();\n      String source = null;\n      \n      @Override\n      public void visitSource(String source, String debug) {\n        this.source = source;\n      }\n      \n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        return new MethodVisitor(Opcodes.ASM4) {\n          private int lineNo = -1;\n          \n          private ClassSignatureLookup lookupRelatedClass(String internalName) {\n            ClassSignatureLookup c = classesToCheck.get(internalName);\n            if (c == null) try {\n              c = getClassFromClassLoader(internalName);\n            } catch (BuildException be) {\n              // we ignore lookup errors and simply ignore this related class\n              c = null;\n            }\n            return c;\n          }\n          \n          private boolean checkClassUse(String owner) {\n            final String printout = forbiddenClasses.get(owner);\n            if (printout != null) {\n              log(\"Forbidden class use: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            return false;\n          }\n          \n          private boolean checkMethodAccess(String owner, Method method) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenMethods.get(owner + '\\000' + method);\n            if (printout != null) {\n              log(\"Forbidden method invocation: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.methods.contains(method)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkMethodAccess(superName, method)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkMethodAccess(intf, method)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n          \n          private boolean checkFieldAccess(String owner, String field) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenFields.get(owner + '\\000' + field);\n            if (printout != null) {\n              log(\"Forbidden field access: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.fields.contains(field)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkFieldAccess(superName, field)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkFieldAccess(intf, field)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public void visitMethodInsn(int opcode, String owner, String name, String desc) {\n            if (checkMethodAccess(owner, new Method(name, desc))) {\n              violations[0]++;\n              reportSourceAndLine();\n            }\n          }\n          \n          @Override\n          public void visitFieldInsn(int opcode, String owner, String name, String desc) {\n            if (checkFieldAccess(owner, name)) {\n             violations[0]++;\n             reportSourceAndLine();\n            }\n          }\n\n          private void reportSourceAndLine() {\n            final StringBuilder sb = new StringBuilder(\"  in \").append(className);\n            if (source != null && lineNo >= 0) {\n              new Formatter(sb, Locale.ROOT).format(\" (%s:%d)\", source, lineNo).flush();\n            }\n            log(sb.toString(), Project.MSG_ERR);\n          }\n          \n          @Override\n          public void visitLineNumber(int lineNo, Label start) {\n            this.lineNo = lineNo;\n          }\n        };\n      }\n    }, ClassReader.SKIP_FRAMES);\n    return violations[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#checkClass(ClassReader).mjava","sourceNew":null,"sourceOld":"  /** Parses a class given as Resource and checks for valid method invocations */\n  private int checkClass(final ClassReader reader) {\n    final int[] violations = new int[1];\n    reader.accept(new ClassVisitor(Opcodes.ASM4) {\n      final String className = Type.getObjectType(reader.getClassName()).getClassName();\n      String source = null;\n      \n      @Override\n      public void visitSource(String source, String debug) {\n        this.source = source;\n      }\n      \n      @Override\n      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        return new MethodVisitor(Opcodes.ASM4) {\n          private int lineNo = -1;\n          \n          private ClassSignatureLookup lookupRelatedClass(String internalName) {\n            ClassSignatureLookup c = classesToCheck.get(internalName);\n            if (c == null) try {\n              c = getClassFromClassLoader(internalName);\n            } catch (BuildException be) {\n              // we ignore lookup errors and simply ignore this related class\n              c = null;\n            }\n            return c;\n          }\n          \n          private boolean checkClassUse(String owner) {\n            final String printout = forbiddenClasses.get(owner);\n            if (printout != null) {\n              log(\"Forbidden class use: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            return false;\n          }\n          \n          private boolean checkMethodAccess(String owner, Method method) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenMethods.get(owner + '\\000' + method);\n            if (printout != null) {\n              log(\"Forbidden method invocation: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.methods.contains(method)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkMethodAccess(superName, method)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkMethodAccess(intf, method)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n          \n          private boolean checkFieldAccess(String owner, String field) {\n            if (checkClassUse(owner)) {\n              return true;\n            }\n            final String printout = forbiddenFields.get(owner + '\\000' + field);\n            if (printout != null) {\n              log(\"Forbidden field access: \" + printout, Project.MSG_ERR);\n              return true;\n            }\n            final ClassSignatureLookup c = lookupRelatedClass(owner);\n            if (c != null && !c.fields.contains(field)) {\n              final String superName = c.reader.getSuperName();\n              if (superName != null && checkFieldAccess(superName, field)) {\n                return true;\n              }\n              final String[] interfaces = c.reader.getInterfaces();\n              if (interfaces != null) {\n                for (String intf : interfaces) {\n                  if (intf != null && checkFieldAccess(intf, field)) {\n                    return true;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public void visitMethodInsn(int opcode, String owner, String name, String desc) {\n            if (checkMethodAccess(owner, new Method(name, desc))) {\n              violations[0]++;\n              reportSourceAndLine();\n            }\n          }\n          \n          @Override\n          public void visitFieldInsn(int opcode, String owner, String name, String desc) {\n            if (checkFieldAccess(owner, name)) {\n             violations[0]++;\n             reportSourceAndLine();\n            }\n          }\n\n          private void reportSourceAndLine() {\n            final StringBuilder sb = new StringBuilder(\"  in \").append(className);\n            if (source != null && lineNo >= 0) {\n              new Formatter(sb, Locale.ROOT).format(\" (%s:%d)\", source, lineNo).flush();\n            }\n            log(sb.toString(), Project.MSG_ERR);\n          }\n          \n          @Override\n          public void visitLineNumber(int lineNo, Label start) {\n            this.lineNo = lineNo;\n          }\n        };\n      }\n    }, ClassReader.SKIP_FRAMES);\n    return violations[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"c7f73df94cfb3e05fba3b55eaa6677855a369c35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["c7f73df94cfb3e05fba3b55eaa6677855a369c35","8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5":["c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c7f73df94cfb3e05fba3b55eaa6677855a369c35":["aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","fe33227f6805edab2036cbb80645cc4e2d1fa424","8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","c7f73df94cfb3e05fba3b55eaa6677855a369c35","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}