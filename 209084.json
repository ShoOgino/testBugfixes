{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getPrefixMatch(char[],int).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getPrefixMatch(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 从词典中查找以charArray对应的单词为前缀(prefix)的单词的位置, 并返回第一个满足条件的位置。为了减小搜索代价,\n   * 可以根据已有知识设置起始搜索位置, 如果不知道起始位置，默认是0\n   * \n   * @see{getPrefixMatch(char[] charArray)}\n   * @param charArray 前缀单词\n   * @param knownStart 已知的起始位置\n   * @return 满足前缀条件的第一个单词的位置\n   */\n  public int getPrefixMatch(char[] charArray, int knownStart) {\n    short index = getWordItemTableIndex(charArray[0]);\n    if (index == -1)\n      return -1;\n    char[][] items = wordItem_charArrayTable[wordIndexTable[index]];\n    int start = knownStart, end = items.length - 1;\n\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArrayByPrefix(charArray, 1, items[mid], 0);\n      if (cmpResult == 0) {\n        // Get the first item which match the current word\n        while (mid >= 0\n            && Utility.compareArrayByPrefix(charArray, 1, items[mid], 0) == 0)\n          mid--;\n        mid++;\n        return mid;// 找到第一个以charArray为前缀的单词\n      } else if (cmpResult < 0)\n        end = mid - 1;\n      else\n        start = mid + 1;\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8e2ccb489ce315fed9d631928894312a59bd7b","date":1242482918,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getPrefixMatch(char[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * 从词典中查找以charArray对应的单词为前缀(prefix)的单词的位置, 并返回第一个满足条件的位置。为了减小搜索代价,\n   * 可以根据已有知识设置起始搜索位置, 如果不知道起始位置，默认是0\n   * \n   * @see{getPrefixMatch(char[] charArray)}\n   * @param charArray 前缀单词\n   * @param knownStart 已知的起始位置\n   * @return 满足前缀条件的第一个单词的位置\n   */\n  public int getPrefixMatch(char[] charArray, int knownStart) {\n    short index = getWordItemTableIndex(charArray[0]);\n    if (index == -1)\n      return -1;\n    char[][] items = wordItem_charArrayTable[wordIndexTable[index]];\n    int start = knownStart, end = items.length - 1;\n\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArrayByPrefix(charArray, 1, items[mid], 0);\n      if (cmpResult == 0) {\n        // Get the first item which match the current word\n        while (mid >= 0\n            && Utility.compareArrayByPrefix(charArray, 1, items[mid], 0) == 0)\n          mid--;\n        mid++;\n        return mid;// 找到第一个以charArray为前缀的单词\n      } else if (cmpResult < 0)\n        end = mid - 1;\n      else\n        start = mid + 1;\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c8e2ccb489ce315fed9d631928894312a59bd7b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["5c8e2ccb489ce315fed9d631928894312a59bd7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}