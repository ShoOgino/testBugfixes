{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#authFailures().mjava","commits":[{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#authFailures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void authFailures() throws Exception {\n    setupCluster(false, null, true);\n    final CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    final CallbackReceiver receiver = testHarness.get().receiver;\n\n    { // invalid request: Authenticated user not allowed to CREATE w/o Authorization\n      final SolrException e = expectThrows(SolrException.class, () -> {\n          final Create createRequest = CollectionAdminRequest.createCollection(\"test_jimbo\", 1, 1);\n          createRequest.setBasicAuthCredentials(\"jimbo\", JIMBO_PASS);\n          client.request(createRequest);\n        });\n      assertEquals(403, e.code());\n\n      final List<AuditEvent> events = receiver.waitForAuditEvents(1);\n      assertAuditEvent(events.get(0), UNAUTHORIZED, \"/admin/collections\", ADMIN, \"jimbo\", 403, \"name\", \"test_jimbo\");\n    }\n\n    { // invalid request: Anon user not allowed to CREATE w/o authentication + authorization\n      final SolrException e = expectThrows(SolrException.class, () -> {\n          Create createRequest = CollectionAdminRequest.createCollection(\"test_anon\", 1, 1);\n          client.request(createRequest);\n        });\n      assertEquals(401, e.code());\n\n      final List<AuditEvent> events = receiver.waitForAuditEvents(1);\n      assertAuditEvent(events.get(0), REJECTED,     \"/admin/collections\", ADMIN, null, 401, \"name\", \"test_anon\");\n    }\n\n    { // invalid request: Admin user not Authenticated due to incorrect password\n      final SolrException e = expectThrows(SolrException.class, () -> {\n          Create createRequest = CollectionAdminRequest.createCollection(\"test_wrongpass\", 1, 1);\n          createRequest.setBasicAuthCredentials(\"solr\", \"wrong_\" + SOLR_PASS);\n          client.request(createRequest);\n        });\n      assertEquals(401, e.code());\n\n      final List<AuditEvent> events = receiver.waitForAuditEvents(1);\n      // Event generated from HttpServletRequest. Has no user since auth failed\n      assertAuditEvent(events.get(0), REJECTED, \"/admin/collections\", RequestType.ADMIN, null, 401);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d5482e225fe64e9f868c423923d1144adc88142":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d5482e225fe64e9f868c423923d1144adc88142"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}