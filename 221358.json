{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","commits":[{"id":"6462d89a9840dd623bfbd36483d84abce975e31a","date":1266751912,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n    true, MaxFieldLength.UNLIMITED);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n    true, MaxFieldLength.UNLIMITED);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n    true, MaxFieldLength.UNLIMITED);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n    true, MaxFieldLength.UNLIMITED);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6462d89a9840dd623bfbd36483d84abce975e31a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["6462d89a9840dd623bfbd36483d84abce975e31a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"6462d89a9840dd623bfbd36483d84abce975e31a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6462d89a9840dd623bfbd36483d84abce975e31a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}