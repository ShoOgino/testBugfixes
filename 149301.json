{"path":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#doQuery(DocCollection,String,String).mjava","commits":[{"id":"a750dc301414dae3a75a82357bab6acb70979c7e","date":1354891654,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#doQuery(DocCollection,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void doQuery(DocCollection coll, String id, String expectedShards) {\n    DocRouter router = coll.getRouter();\n    Collection<Slice> slices = router.getSearchSlices(id, null, coll);\n\n    List<String> expectedShardStr = StrUtils.splitSmart(expectedShards, \",\", true);\n\n    HashSet<String> expectedSet = new HashSet<String>(expectedShardStr);\n    HashSet<String> obtainedSet = new HashSet<String>();\n    for (Slice slice : slices) {\n      obtainedSet.add(slice.getName());\n    }\n\n    assertEquals(slices.size(), obtainedSet.size());  // make sure no repeated slices\n    assertEquals(expectedSet, obtainedSet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#doQuery(DocCollection,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void doQuery(DocCollection coll, String id, String expectedShards) {\n    DocRouter router = coll.getRouter();\n    Collection<Slice> slices = router.getSearchSlices(id, null, coll);\n\n    List<String> expectedShardStr = StrUtils.splitSmart(expectedShards, \",\", true);\n\n    HashSet<String> expectedSet = new HashSet<String>(expectedShardStr);\n    HashSet<String> obtainedSet = new HashSet<String>();\n    for (Slice slice : slices) {\n      obtainedSet.add(slice.getName());\n    }\n\n    assertEquals(slices.size(), obtainedSet.size());  // make sure no repeated slices\n    assertEquals(expectedSet, obtainedSet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#doQuery(DocCollection,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#doQuery(DocCollection,String,String).mjava","sourceNew":"  public void doQuery(DocCollection coll, String id, String expectedShards) {\n    DocRouter router = coll.getRouter();\n    Collection<Slice> slices = router.getSearchSlices(id, null, coll);\n\n    List<String> expectedShardStr = StrUtils.splitSmart(expectedShards, \",\", true);\n\n    HashSet<String> expectedSet = new HashSet<>(expectedShardStr);\n    HashSet<String> obtainedSet = new HashSet<>();\n    for (Slice slice : slices) {\n      obtainedSet.add(slice.getName());\n    }\n\n    assertEquals(slices.size(), obtainedSet.size());  // make sure no repeated slices\n    assertEquals(expectedSet, obtainedSet);\n  }\n\n","sourceOld":"  public void doQuery(DocCollection coll, String id, String expectedShards) {\n    DocRouter router = coll.getRouter();\n    Collection<Slice> slices = router.getSearchSlices(id, null, coll);\n\n    List<String> expectedShardStr = StrUtils.splitSmart(expectedShards, \",\", true);\n\n    HashSet<String> expectedSet = new HashSet<String>(expectedShardStr);\n    HashSet<String> obtainedSet = new HashSet<String>();\n    for (Slice slice : slices) {\n      obtainedSet.add(slice.getName());\n    }\n\n    assertEquals(slices.size(), obtainedSet.size());  // make sure no repeated slices\n    assertEquals(expectedSet, obtainedSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a750dc301414dae3a75a82357bab6acb70979c7e"],"a750dc301414dae3a75a82357bab6acb70979c7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a750dc301414dae3a75a82357bab6acb70979c7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a750dc301414dae3a75a82357bab6acb70979c7e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a750dc301414dae3a75a82357bab6acb70979c7e","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}