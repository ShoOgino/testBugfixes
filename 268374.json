{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"366de777493836f7f47d50406d2f07f1408e9e6b","date":1323009346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7733816f2c0d688c0bbc68468196f1a848606f21","date":1323021691,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, Sort.unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"366de777493836f7f47d50406d2f07f1408e9e6b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["366de777493836f7f47d50406d2f07f1408e9e6b","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["366de777493836f7f47d50406d2f07f1408e9e6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7733816f2c0d688c0bbc68468196f1a848606f21":["7bf07f4ebadc7539de83a531e64678350d78ca26","366de777493836f7f47d50406d2f07f1408e9e6b"]},"commit2Childs":{"366de777493836f7f47d50406d2f07f1408e9e6b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6","7733816f2c0d688c0bbc68468196f1a848606f21"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["366de777493836f7f47d50406d2f07f1408e9e6b","7733816f2c0d688c0bbc68468196f1a848606f21"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7733816f2c0d688c0bbc68468196f1a848606f21":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817","7733816f2c0d688c0bbc68468196f1a848606f21"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}