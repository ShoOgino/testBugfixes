{"path":"backwards/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldDocSortedHitQueue#lessThan(FieldDoc,FieldDoc).mjava","sourceNew":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","sourceOld":"  /**\n   * Returns whether <code>a</code> is less relevant than <code>b</code>.\n   * @param a ScoreDoc\n   * @param b ScoreDoc\n   * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n   */\n  @SuppressWarnings(\"unchecked\") @Override\n  protected final boolean lessThan(final FieldDoc docA, final FieldDoc docB) {\n    final int n = fields.length;\n    int c = 0;\n    for (int i=0; i<n && c==0; ++i) {\n      final int type = fields[i].getType();\n      if (type == SortField.STRING) {\n        final String s1 = (String) docA.fields[i];\n        final String s2 = (String) docB.fields[i];\n        // null values need to be sorted first, because of how FieldCache.getStringIndex()\n        // works - in that routine, any documents without a value in the given field are\n        // put first.  If both are null, the next SortField is used\n        if (s1 == null) {\n          c = (s2 == null) ? 0 : -1;\n        } else if (s2 == null) {\n          c = 1;\n        } else if (fields[i].getLocale() == null) {\n          c = s1.compareTo(s2);\n        } else {\n          c = collators[i].compare(s1, s2);\n        }\n      } else {\n        c = docA.fields[i].compareTo(docB.fields[i]);\n        if (type == SortField.SCORE) {\n          c = -c;\n        }\n      }\n      // reverse sort\n      if (fields[i].getReverse()) {\n        c = -c;\n      }\n    }\n\n    // avoid random sort order that could lead to duplicates (bug #31241):\n    if (c == 0)\n      return docA.doc > docB.doc;\n\n    return c > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}