{"path":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#getStrs(String,List[String]).mjava","commits":[{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#getStrs(String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getStrs(String,List[String]).mjava","sourceNew":"  /**\n   * Get collection of values for a key. If only one val is present a\n   * single value collection is returned\n   */\n  public List<String> getStrs(String key, List<String> def) {\n    Object v = null;\n    if (ROOT_OBJ.equals(key)) {\n      v = getRootPrimitive();\n    } else {\n      v = getMapVal(key);\n    }\n    if (v == null) {\n      return def;\n    } else {\n      if (v instanceof List) {\n        ArrayList<String> l = new ArrayList<>();\n        for (Object o : (List) v) {\n          l.add(String.valueOf(o));\n        }\n        if (l.isEmpty()) return def;\n        return l;\n      } else {\n        return singletonList(String.valueOf(v));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Get collection of values for a key. If only one val is present a\n   * single value collection is returned\n   */\n  public List<String> getStrs(String key, List<String> def) {\n    Object v = null;\n    if (ROOT_OBJ.equals(key)) {\n      v = getRootPrimitive();\n    } else {\n      v = getMapVal(key);\n    }\n    if (v == null) {\n      return def;\n    } else {\n      if (v instanceof List) {\n        ArrayList<String> l = new ArrayList<>();\n        for (Object o : (List) v) {\n          l.add(String.valueOf(o));\n        }\n        if (l.isEmpty()) return def;\n        return l;\n      } else {\n        return singletonList(String.valueOf(v));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#getStrs(String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getStrs(String,List[String]).mjava","sourceNew":"  /**\n   * Get collection of values for a key. If only one val is present a\n   * single value collection is returned\n   */\n  public List<String> getStrs(String key, List<String> def) {\n    Object v = null;\n    if (ROOT_OBJ.equals(key)) {\n      v = getRootPrimitive();\n    } else {\n      v = getMapVal(key);\n    }\n    if (v == null) {\n      return def;\n    } else {\n      if (v instanceof List) {\n        ArrayList<String> l = new ArrayList<>();\n        for (Object o : (List) v) {\n          l.add(String.valueOf(o));\n        }\n        if (l.isEmpty()) return def;\n        return l;\n      } else {\n        return singletonList(String.valueOf(v));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Get collection of values for a key. If only one val is present a\n   * single value collection is returned\n   */\n  public List<String> getStrs(String key, List<String> def) {\n    Object v = null;\n    if (ROOT_OBJ.equals(key)) {\n      v = getRootPrimitive();\n    } else {\n      v = getMapVal(key);\n    }\n    if (v == null) {\n      return def;\n    } else {\n      if (v instanceof List) {\n        ArrayList<String> l = new ArrayList<>();\n        for (Object o : (List) v) {\n          l.add(String.valueOf(o));\n        }\n        if (l.isEmpty()) return def;\n        return l;\n      } else {\n        return singletonList(String.valueOf(v));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}