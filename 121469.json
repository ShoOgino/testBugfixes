{"path":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","commits":[{"id":"91ff9f86f49c7758569ecdb69141488f34acd3dc","date":1331215419,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema12.xml\", null);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema15.xml\", null);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema12.xml\", null);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema15.xml\", null);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema12.xml\", null);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = new IndexSchema(config, testConfHome + \"schema15.xml\", null);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    ShortField sf;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    ByteField bf;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertFalse(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertFalse(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    sf = new ShortField();\n    sf.init(schema, initMap);\n    assertTrue(sf.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    bf = new ByteField();\n    bf.init(schema, initMap);\n    assertTrue(bf.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    TrieDateField dt;\n    StrField s;\n    TrieIntField ti;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    DateField dt;\n    StrField s;\n    IntField i;\n    TrieIntField ti;\n    SortableIntField si;\n    LongField l;\n    FloatField f;\n    DoubleField d;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertFalse(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertFalse(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertFalse(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertFalse(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertFalse(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    i = new IntField();\n    i.init(schema, initMap);\n    assertTrue(i.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    si = new SortableIntField();\n    si.init(schema, initMap);\n    assertTrue(si.hasProperty(FieldType.OMIT_NORMS));\n\n    l = new LongField();\n    l.init(schema, initMap);\n    assertTrue(l.hasProperty(FieldType.OMIT_NORMS));\n\n    f = new FloatField();\n    f.init(schema, initMap);\n    assertTrue(f.hasProperty(FieldType.OMIT_NORMS));\n\n    d = new DoubleField();\n    d.init(schema, initMap);\n    assertTrue(d.hasProperty(FieldType.OMIT_NORMS));\n\n    dt = new DateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dbe892141bceb837ef5b0c7834b6bdd38a58d34","date":1404135804,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    TrieDateField dt;\n    StrField s;\n    TrieIntField ti;\n    TrieLongField tl;\n    TrieFloatField tf;\n    TrieDoubleField td;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertFalse(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertFalse(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertFalse(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertTrue(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertTrue(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertTrue(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    TrieDateField dt;\n    StrField s;\n    TrieIntField ti;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a0eda7dbad12579530df39279403d27344ebcb","date":1500511909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    \n    final List<Class<? extends FieldType>> types\n      = Arrays.asList(TrieDateField.class, DatePointField.class,\n                      TrieIntField.class, IntPointField.class,\n                      TrieLongField.class, IntPointField.class,\n                      TrieFloatField.class, FloatPointField.class,\n                      TrieDoubleField.class, DoublePointField.class,\n                      StrField.class, BoolField.class,\n                      // Non-prims, omitNorms always defaults to false regardless of schema version...\n                      TextField.class, BinaryField.class);\n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertFalse(ft.getClass().getName(), ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertEquals(ft.getClass().getName(),\n                   ft instanceof PrimitiveFieldType,\n                   ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    TrieDateField dt;\n    StrField s;\n    TrieIntField ti;\n    TrieLongField tl;\n    TrieFloatField tf;\n    TrieDoubleField td;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertFalse(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertFalse(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertFalse(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertTrue(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertTrue(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertTrue(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    \n    final List<Class<? extends FieldType>> types\n      = Arrays.asList(TrieDateField.class, DatePointField.class,\n                      TrieIntField.class, IntPointField.class,\n                      TrieLongField.class, IntPointField.class,\n                      TrieFloatField.class, FloatPointField.class,\n                      TrieDoubleField.class, DoublePointField.class,\n                      StrField.class, BoolField.class,\n                      // Non-prims, omitNorms always defaults to false regardless of schema version...\n                      TextField.class, BinaryField.class);\n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertFalse(ft.getClass().getName(), ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertEquals(ft.getClass().getName(),\n                   ft instanceof PrimitiveFieldType,\n                   ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    BinaryField bin;\n    TextField t;\n    TrieDateField dt;\n    StrField s;\n    TrieIntField ti;\n    TrieLongField tl;\n    TrieFloatField tf;\n    TrieDoubleField td;\n    BoolField b;\n    \n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n    \n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertFalse(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertFalse(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertFalse(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertFalse(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertFalse(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertFalse(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertFalse(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n\n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    dt = new TrieDateField();\n    dt.init(schema, initMap);\n    assertTrue(dt.hasProperty(FieldType.OMIT_NORMS));\n\n    s = new StrField();\n    s.init(schema, initMap);\n    assertTrue(s.hasProperty(FieldType.OMIT_NORMS));\n\n    ti = new TrieIntField();\n    ti.init(schema, initMap);\n    assertTrue(ti.hasProperty(FieldType.OMIT_NORMS));\n\n    tl = new TrieLongField();\n    tl.init(schema, initMap);\n    assertTrue(tl.hasProperty(FieldType.OMIT_NORMS));\n\n    tf = new TrieFloatField();\n    tf.init(schema, initMap);\n    assertTrue(tf.hasProperty(FieldType.OMIT_NORMS));\n\n    td = new TrieDoubleField();\n    td.init(schema, initMap);\n    assertTrue(td.hasProperty(FieldType.OMIT_NORMS));\n\n    b = new BoolField();\n    b.init(schema, initMap);\n    assertTrue(b.hasProperty(FieldType.OMIT_NORMS));\n\n    // Non-primitive fields\n    t = new TextField();\n    t.init(schema, initMap);\n    assertFalse(t.hasProperty(FieldType.OMIT_NORMS));\n\n    bin = new BinaryField();\n    bin.init(schema, initMap);\n    assertFalse(bin.hasProperty(FieldType.OMIT_NORMS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest#testDefaultOmitNorms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    \n    final List<Class<? extends FieldType>> types\n      = Arrays.asList(TrieDateField.class, DatePointField.class,\n                      TrieIntField.class, IntPointField.class,\n                      TrieLongField.class, IntPointField.class,\n                      TrieFloatField.class, FloatPointField.class,\n                      TrieDoubleField.class, DoublePointField.class,\n                      StrField.class, BoolField.class,\n                      // Non-prims, omitNorms always defaults to false regardless of schema version...\n                      TextField.class, BinaryField.class);\n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.getConstructor().newInstance();\n      ft.init(schema, initMap);\n      assertFalse(ft.getClass().getName(), ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.getConstructor().newInstance();\n      ft.init(schema, initMap);\n      assertEquals(ft.getClass().getName(),\n                   ft instanceof PrimitiveFieldType,\n                   ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @Test\n  public void testDefaultOmitNorms() throws Exception {\n    \n    final List<Class<? extends FieldType>> types\n      = Arrays.asList(TrieDateField.class, DatePointField.class,\n                      TrieIntField.class, IntPointField.class,\n                      TrieLongField.class, IntPointField.class,\n                      TrieFloatField.class, FloatPointField.class,\n                      TrieDoubleField.class, DoublePointField.class,\n                      StrField.class, BoolField.class,\n                      // Non-prims, omitNorms always defaults to false regardless of schema version...\n                      TextField.class, BinaryField.class);\n    \n    // ***********************\n    // With schema version 1.4:\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema12.xml\", config);\n\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertFalse(ft.getClass().getName(), ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n    // ***********************\n    // With schema version 1.5\n    // ***********************\n    schema = IndexSchemaFactory.buildIndexSchema(testConfHome + \"schema15.xml\", config);\n\n    for (Class<? extends FieldType> clazz : types) {\n      FieldType ft = clazz.newInstance();\n      ft.init(schema, initMap);\n      assertEquals(ft.getClass().getName(),\n                   ft instanceof PrimitiveFieldType,\n                   ft.hasProperty(FieldType.OMIT_NORMS));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91ff9f86f49c7758569ecdb69141488f34acd3dc"],"9dbe892141bceb837ef5b0c7834b6bdd38a58d34":["2106271e380c198349e0f6eac0395bb462913fab"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["94a0eda7dbad12579530df39279403d27344ebcb"],"94a0eda7dbad12579530df39279403d27344ebcb":["9dbe892141bceb837ef5b0c7834b6bdd38a58d34"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["91ff9f86f49c7758569ecdb69141488f34acd3dc"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207","59a0020b413d44dd79d85d7a66ed5004265fb453"],"2106271e380c198349e0f6eac0395bb462913fab":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"91ff9f86f49c7758569ecdb69141488f34acd3dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["9dbe892141bceb837ef5b0c7834b6bdd38a58d34","94a0eda7dbad12579530df39279403d27344ebcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9dbe892141bceb837ef5b0c7834b6bdd38a58d34":["94a0eda7dbad12579530df39279403d27344ebcb","936cdd5882761db3b844afd6f84ab81cbb011a75"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94a0eda7dbad12579530df39279403d27344ebcb":["b88a121b875f9ae2ac50f85cf46dcb680f126357","936cdd5882761db3b844afd6f84ab81cbb011a75"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"2106271e380c198349e0f6eac0395bb462913fab":["9dbe892141bceb837ef5b0c7834b6bdd38a58d34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","91ff9f86f49c7758569ecdb69141488f34acd3dc"],"91ff9f86f49c7758569ecdb69141488f34acd3dc":["38e3b736c7ca086d61b7dbb841c905ee115490da","9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2106271e380c198349e0f6eac0395bb462913fab"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","37a0f60745e53927c4c876cfe5b5a58170f0646c","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}