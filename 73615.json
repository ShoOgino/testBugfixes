{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/LengthEvaluatorTest#lengthField().mjava","commits":[{"id":"b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e","date":1497801057,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/LengthEvaluatorTest#lengthField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void lengthField() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"length(a)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<Integer>(){{ add(1); add(2); add(4); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(3L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ add(\"a\"); add(\"b\"); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(0L, result);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/LengthEvaluatorTest#lengthField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void lengthField() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"length(a)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<Integer>(){{ add(1); add(2); add(4); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(3L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ add(\"a\"); add(\"b\"); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(0L, result);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/LengthEvaluatorTest#lengthField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void lengthField() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"length(a)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<Integer>(){{ add(1); add(2); add(4); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(3L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ add(\"a\"); add(\"b\"); }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(2L, result);\n    \n    values.clear();\n    values.put(\"a\", new ArrayList<String>(){{ }});\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(0L, result);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77d0985a1032b5ba37bb3ec8bd6a0b2dbf8aa1e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}