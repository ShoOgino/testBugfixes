{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[]).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types)\n    throws IOException {\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types)\n    throws IOException {\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}