{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(LightAutomaton,int,HashSet[Integer]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(LightAutomaton,int,HashSet[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(LightAutomaton a, int s, HashSet<Integer> path) {\n    path.add(s);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (path.contains(t.dest) || !isFiniteSlow(a, t.dest, path)) {\n        return false;\n      }\n    }\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(LightAutomaton,int,HashSet[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(LightAutomaton,int,HashSet[Integer]).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(LightAutomaton a, int s, HashSet<Integer> path) {\n    path.add(s);\n    Transition t = new Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (path.contains(t.dest) || !isFiniteSlow(a, t.dest, path)) {\n        return false;\n      }\n    }\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(LightAutomaton a, int s, HashSet<Integer> path) {\n    path.add(s);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (path.contains(t.dest) || !isFiniteSlow(a, t.dest, path)) {\n        return false;\n      }\n    }\n    path.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(Automaton,int,HashSet[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isFiniteSlow(LightAutomaton,int,HashSet[Integer]).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(Automaton a, int s, HashSet<Integer> path) {\n    path.add(s);\n    Transition t = new Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (path.contains(t.dest) || !isFiniteSlow(a, t.dest, path)) {\n        return false;\n      }\n    }\n    path.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFiniteSlow(LightAutomaton a, int s, HashSet<Integer> path) {\n    path.add(s);\n    Transition t = new Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (path.contains(t.dest) || !isFiniteSlow(a, t.dest, path)) {\n        return false;\n      }\n    }\n    path.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}