{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    if (isAutoDiscover) {\n      CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n      if (plus == null) return defaultVal;\n      CoreDescriptor desc = plus.getCoreDescriptor();\n      if (desc == null) return defaultVal;\n      return desc.getProperty(property, defaultVal);\n    } else {\n      synchronized (coreNodes) {\n        for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n          Node node = coreNodes.item(idx);\n          if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n            return DOMUtil.getAttr(node, property, defaultVal);\n          }\n        }\n      }\n      return defaultVal;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    if (is50OrLater) {\n      CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n      if (plus == null) return defaultVal;\n      CoreDescriptor desc = plus.getCoreDescriptor();\n      if (desc == null) return defaultVal;\n      return desc.getProperty(property, defaultVal);\n    } else {\n      synchronized (coreNodes) {\n        for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n          Node node = coreNodes.item(idx);\n          if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n            return DOMUtil.getAttr(node, property, defaultVal);\n          }\n        }\n      }\n      return defaultVal;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    if (isAutoDiscover) {\n      CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n      if (plus == null) return defaultVal;\n      CoreDescriptor desc = plus.getCoreDescriptor();\n      if (desc == null) return defaultVal;\n      return desc.getProperty(property, defaultVal);\n    } else {\n      synchronized (coreNodes) {\n        for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n          Node node = coreNodes.item(idx);\n          if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n            return DOMUtil.getAttr(node, property, defaultVal);\n          }\n        }\n      }\n      return defaultVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    \n    CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) return defaultVal;\n    CoreDescriptor desc = plus.getCoreDescriptor();\n    if (desc == null) return defaultVal;\n    return desc.getProperty(property, defaultVal);\n    \n  }\n\n","sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    if (is50OrLater) {\n      CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n      if (plus == null) return defaultVal;\n      CoreDescriptor desc = plus.getCoreDescriptor();\n      if (desc == null) return defaultVal;\n      return desc.getProperty(property, defaultVal);\n    } else {\n      synchronized (coreNodes) {\n        for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n          Node node = coreNodes.item(idx);\n          if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n            return DOMUtil.getAttr(node, property, defaultVal);\n          }\n        }\n      }\n      return defaultVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    \n    CoreDescriptor cd = coreDescriptorMap.get(coreName);\n    if (cd == null) return defaultVal;\n\n    return cd.getProperty(property, defaultVal);\n  }\n\n","sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    \n    CoreDescriptorPlus plus = coreDescriptorPlusMap.get(coreName);\n    if (plus == null) return defaultVal;\n    CoreDescriptor desc = plus.getCoreDescriptor();\n    if (desc == null) return defaultVal;\n    return desc.getProperty(property, defaultVal);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    CoreDescriptor cd = coreDescriptorMap.get(coreName);\n    if (cd == null) return defaultVal;\n\n    return cd.getProperty(property, defaultVal);\n  }\n\n","sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    \n    CoreDescriptor cd = coreDescriptorMap.get(coreName);\n    if (cd == null) return defaultVal;\n\n    return cd.getProperty(property, defaultVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    CoreDescriptor cd = coreDescriptorMap.get(coreName);\n    if (cd == null) return defaultVal;\n\n    return cd.getProperty(property, defaultVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getProperty(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String getProperty(String coreName, String property, String defaultVal) {\n    CoreDescriptor cd = coreDescriptorMap.get(coreName);\n    if (cd == null) return defaultVal;\n\n    return cd.getProperty(property, defaultVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b29abed5661c7911e4b45d5a3d79a186268e28c4","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["e475642767c688ede5728d7918326f70b4e0bf3a"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"e475642767c688ede5728d7918326f70b4e0bf3a":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}