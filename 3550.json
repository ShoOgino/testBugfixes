{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPositions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":null,"sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPositions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":null,"sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPositions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":null,"sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPositions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}