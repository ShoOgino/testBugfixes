{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#computeCrossings(Plane,Edge,Membership...).mjava","commits":[{"id":"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a","date":1523373040,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#computeCrossings(Plane,Edge,Membership...).mjava","pathOld":"/dev/null","sourceNew":"  /** Compute crossings of an envelope plane by an edge.\n  */\n  private GeoPoint[] computeCrossings(final Plane envelopePlane, final Edge edge, final Membership... envelopeBounds) {\n    // Note: there is a possibility that one or both endpoints of the edge actually lies in the inside/outside planes.  If this is the case, those endpoints may or may not show up as crossings.\n    // And yet, we absolutely cannot count each crossing more than once.  So, how do we proceed?\n    // The solution is to recognize that excluded crossings will be excluded for two reasons: (1) bounds, and (2) because there's only one solution to the intersection equation, which means\n    // we never actually crossed the envelope plane.  So, the way we proceed is to look for intersections, but NOT do edge bounds at all.  Then, we consider the results in the context of\n    // the plane we're trying to assess.\n    //System.out.println(\" Computing crossings between \"+envelopePlane+\" and [\"+edge.startPoint+\"->\"+edge.endPoint+\"]\");\n    \n    final GeoPoint[] unboundedIntersectionPoints = envelopePlane.findIntersections(planetModel, edge.plane);\n    // Go through the intersection points one at a time.  Notes:\n    // (1) So that we don't double-count, we can only include at most one point in the result per intersection.\n    // (2) Single-solution results imply that the plane was not crossed.  The only time we consider them is if the edge ends on the plane, in which case we count it as a crossing.\n    // (3) We tried to detect the case where the edge ends on the envelope plane by seeing if the intersection point was numerically identical to an endpoint, but that\n    //    was still too strict.\n    // (4) The intersection points will be on both planes, for sure.  The question is whether an intersection point \"lines up\" with an edge endpoint.  If the edge endpoint\n    //    lies in the envelope plane, then we have the possibility of a detection.  The detection is confirmed if the distance \"is small\" between the edge endpoint and\n    //    the intersection point.  I see squared linear distance numbers of about 1.35e-24, which is still barely outside of the 1e-12 envelope, so a straight distance\n    //    check won't work.  So this is what I think we need to do:\n    //    (a) Check if endpoint is on envelope plane; if not, we keep going.\n    //    (b) If on envelope plane, we confirm that entire section of plane between intersection point and endpoint lies within envelope plane.  (How??)\n    \n    // If no points, just return.  (I'm not even sure this can happen)\n    if (unboundedIntersectionPoints.length == 0) {\n      //System.out.println(\"  None found.\");\n      return unboundedIntersectionPoints;\n    }\n\n    // Single solution has special logic\n    if (unboundedIntersectionPoints.length == 1) {\n      //System.out.println(\"  One found.\");\n      final GeoPoint thePoint = unboundedIntersectionPoints[0];\n      if (withinBounds(thePoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, thePoint, edge.startPoint) || pointMatches(envelopePlane, thePoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)))) {\n        return unboundedIntersectionPoints;\n      }\n      return NO_POINTS;\n    }\n      \n    // Two solutions: we could return none, one, the other one, or both.\n    //System.out.println(\"  Two found.\");\n\n    final GeoPoint firstPoint = unboundedIntersectionPoints[0];\n    final GeoPoint secondPoint = unboundedIntersectionPoints[1];\n    \n    final boolean useFirstPoint;\n    if (withinBounds(firstPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, firstPoint, edge.startPoint) || pointMatches(envelopePlane, firstPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint)))) {\n      //System.out.println(\"  Point \"+firstPoint+\" accepted.\");\n      useFirstPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+firstPoint+\" rejected; withinBounds=\"+withinBounds(firstPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(firstPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(firstPoint)); */\n      useFirstPoint = false;\n    }\n    \n    final boolean useSecondPoint;\n    if (withinBounds(secondPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, secondPoint, edge.startPoint) || pointMatches(envelopePlane, secondPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint)))) {\n      //System.out.println(\"  Point \"+secondPoint+\" accepted.\");\n      useSecondPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+secondPoint+\" rejected; withinBounds=\"+withinBounds(secondPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(secondPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(secondPoint)); */\n      useSecondPoint = false;\n    }\n    \n    if (useFirstPoint && useSecondPoint) {\n      return unboundedIntersectionPoints;\n    }\n    \n    if (useFirstPoint) {\n      return new GeoPoint[]{firstPoint};\n    }\n    \n    if (useSecondPoint) {\n      return new GeoPoint[]{secondPoint};\n    }\n    \n    return NO_POINTS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105474860f89d1a8b77bbdffe8db97cb952bc18f","date":1523429631,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#computeCrossings(Plane,Edge,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#computeCrossings(Plane,Edge,Membership...).mjava","sourceNew":"  /** Compute crossings of an envelope plane by an edge.\n  */\n  private GeoPoint[] computeCrossings(final Plane envelopePlane, final Edge edge, final Membership... envelopeBounds) {\n    // Note: there is a possibility that one or both endpoints of the edge actually lies in the inside/outside planes.  If this is the case, those endpoints may or may not show up as crossings.\n    // And yet, we absolutely cannot count each crossing more than once.  So, how do we proceed?\n    // The solution is to recognize that excluded crossings will be excluded for two reasons: (1) bounds, and (2) because there's only one solution to the intersection equation, which means\n    // we never actually crossed the envelope plane.  So, the way we proceed is to look for intersections, but NOT do edge bounds at all.  Then, we consider the results in the context of\n    // the plane we're trying to assess.\n    //System.out.println(\" Computing crossings between \"+envelopePlane+\" and [\"+edge.startPoint+\"->\"+edge.endPoint+\"]\");\n    \n    final GeoPoint[] unboundedIntersectionPoints = envelopePlane.findIntersections(planetModel, edge.plane);\n    if (unboundedIntersectionPoints == null) {\n      return null;\n    }\n    // Go through the intersection points one at a time.  Notes:\n    // (1) So that we don't double-count, we can only include at most one point in the result per intersection.\n    // (2) Single-solution results imply that the plane was not crossed.  The only time we consider them is if the edge ends on the plane, in which case we count it as a crossing.\n    // (3) We tried to detect the case where the edge ends on the envelope plane by seeing if the intersection point was numerically identical to an endpoint, but that\n    //    was still too strict.\n    // (4) The intersection points will be on both planes, for sure.  The question is whether an intersection point \"lines up\" with an edge endpoint.  If the edge endpoint\n    //    lies in the envelope plane, then we have the possibility of a detection.  The detection is confirmed if the distance \"is small\" between the edge endpoint and\n    //    the intersection point.  I see squared linear distance numbers of about 1.35e-24, which is still barely outside of the 1e-12 envelope, so a straight distance\n    //    check won't work.  So this is what I think we need to do:\n    //    (a) Check if endpoint is on envelope plane; if not, we keep going.\n    //    (b) If on envelope plane, we confirm that entire section of plane between intersection point and endpoint lies within envelope plane.  (How??)\n    \n    // If no points, just return.  (I'm not even sure this can happen)\n    if (unboundedIntersectionPoints.length == 0) {\n      //System.out.println(\"  None found.\");\n      return unboundedIntersectionPoints;\n    }\n\n    // Single solution has special logic\n    if (unboundedIntersectionPoints.length == 1) {\n      //System.out.println(\"  One found.\");\n      final GeoPoint thePoint = unboundedIntersectionPoints[0];\n      if (withinBounds(thePoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, thePoint, edge.startPoint) || pointMatches(envelopePlane, thePoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)))) {\n        return unboundedIntersectionPoints;\n      }\n      return NO_POINTS;\n    }\n      \n    // Two solutions: we could return none, one, the other one, or both.\n    //System.out.println(\"  Two found.\");\n\n    final GeoPoint firstPoint = unboundedIntersectionPoints[0];\n    final GeoPoint secondPoint = unboundedIntersectionPoints[1];\n    \n    final boolean useFirstPoint;\n    if (withinBounds(firstPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, firstPoint, edge.startPoint) || pointMatches(envelopePlane, firstPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint)))) {\n      //System.out.println(\"  Point \"+firstPoint+\" accepted.\");\n      useFirstPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+firstPoint+\" rejected; withinBounds=\"+withinBounds(firstPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(firstPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(firstPoint)); */\n      useFirstPoint = false;\n    }\n    \n    final boolean useSecondPoint;\n    if (withinBounds(secondPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, secondPoint, edge.startPoint) || pointMatches(envelopePlane, secondPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint)))) {\n      //System.out.println(\"  Point \"+secondPoint+\" accepted.\");\n      useSecondPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+secondPoint+\" rejected; withinBounds=\"+withinBounds(secondPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(secondPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(secondPoint)); */\n      useSecondPoint = false;\n    }\n    \n    if (useFirstPoint && useSecondPoint) {\n      return unboundedIntersectionPoints;\n    }\n    \n    if (useFirstPoint) {\n      return new GeoPoint[]{firstPoint};\n    }\n    \n    if (useSecondPoint) {\n      return new GeoPoint[]{secondPoint};\n    }\n    \n    return NO_POINTS;\n  }\n\n","sourceOld":"  /** Compute crossings of an envelope plane by an edge.\n  */\n  private GeoPoint[] computeCrossings(final Plane envelopePlane, final Edge edge, final Membership... envelopeBounds) {\n    // Note: there is a possibility that one or both endpoints of the edge actually lies in the inside/outside planes.  If this is the case, those endpoints may or may not show up as crossings.\n    // And yet, we absolutely cannot count each crossing more than once.  So, how do we proceed?\n    // The solution is to recognize that excluded crossings will be excluded for two reasons: (1) bounds, and (2) because there's only one solution to the intersection equation, which means\n    // we never actually crossed the envelope plane.  So, the way we proceed is to look for intersections, but NOT do edge bounds at all.  Then, we consider the results in the context of\n    // the plane we're trying to assess.\n    //System.out.println(\" Computing crossings between \"+envelopePlane+\" and [\"+edge.startPoint+\"->\"+edge.endPoint+\"]\");\n    \n    final GeoPoint[] unboundedIntersectionPoints = envelopePlane.findIntersections(planetModel, edge.plane);\n    // Go through the intersection points one at a time.  Notes:\n    // (1) So that we don't double-count, we can only include at most one point in the result per intersection.\n    // (2) Single-solution results imply that the plane was not crossed.  The only time we consider them is if the edge ends on the plane, in which case we count it as a crossing.\n    // (3) We tried to detect the case where the edge ends on the envelope plane by seeing if the intersection point was numerically identical to an endpoint, but that\n    //    was still too strict.\n    // (4) The intersection points will be on both planes, for sure.  The question is whether an intersection point \"lines up\" with an edge endpoint.  If the edge endpoint\n    //    lies in the envelope plane, then we have the possibility of a detection.  The detection is confirmed if the distance \"is small\" between the edge endpoint and\n    //    the intersection point.  I see squared linear distance numbers of about 1.35e-24, which is still barely outside of the 1e-12 envelope, so a straight distance\n    //    check won't work.  So this is what I think we need to do:\n    //    (a) Check if endpoint is on envelope plane; if not, we keep going.\n    //    (b) If on envelope plane, we confirm that entire section of plane between intersection point and endpoint lies within envelope plane.  (How??)\n    \n    // If no points, just return.  (I'm not even sure this can happen)\n    if (unboundedIntersectionPoints.length == 0) {\n      //System.out.println(\"  None found.\");\n      return unboundedIntersectionPoints;\n    }\n\n    // Single solution has special logic\n    if (unboundedIntersectionPoints.length == 1) {\n      //System.out.println(\"  One found.\");\n      final GeoPoint thePoint = unboundedIntersectionPoints[0];\n      if (withinBounds(thePoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, thePoint, edge.startPoint) || pointMatches(envelopePlane, thePoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)))) {\n        return unboundedIntersectionPoints;\n      }\n      return NO_POINTS;\n    }\n      \n    // Two solutions: we could return none, one, the other one, or both.\n    //System.out.println(\"  Two found.\");\n\n    final GeoPoint firstPoint = unboundedIntersectionPoints[0];\n    final GeoPoint secondPoint = unboundedIntersectionPoints[1];\n    \n    final boolean useFirstPoint;\n    if (withinBounds(firstPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, firstPoint, edge.startPoint) || pointMatches(envelopePlane, firstPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint)))) {\n      //System.out.println(\"  Point \"+firstPoint+\" accepted.\");\n      useFirstPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+firstPoint+\" rejected; withinBounds=\"+withinBounds(firstPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(firstPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(firstPoint)); */\n      useFirstPoint = false;\n    }\n    \n    final boolean useSecondPoint;\n    if (withinBounds(secondPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, secondPoint, edge.startPoint) || pointMatches(envelopePlane, secondPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint)))) {\n      //System.out.println(\"  Point \"+secondPoint+\" accepted.\");\n      useSecondPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+secondPoint+\" rejected; withinBounds=\"+withinBounds(secondPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(secondPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(secondPoint)); */\n      useSecondPoint = false;\n    }\n    \n    if (useFirstPoint && useSecondPoint) {\n      return unboundedIntersectionPoints;\n    }\n    \n    if (useFirstPoint) {\n      return new GeoPoint[]{firstPoint};\n    }\n    \n    if (useSecondPoint) {\n      return new GeoPoint[]{secondPoint};\n    }\n    \n    return NO_POINTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d564e0296db7f80d73dd62b17710f61c85f38c50","date":1523483630,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#computeCrossings(Plane,Edge,Membership...).mjava","sourceNew":null,"sourceOld":"  /** Compute crossings of an envelope plane by an edge.\n  */\n  private GeoPoint[] computeCrossings(final Plane envelopePlane, final Edge edge, final Membership... envelopeBounds) {\n    // Note: there is a possibility that one or both endpoints of the edge actually lies in the inside/outside planes.  If this is the case, those endpoints may or may not show up as crossings.\n    // And yet, we absolutely cannot count each crossing more than once.  So, how do we proceed?\n    // The solution is to recognize that excluded crossings will be excluded for two reasons: (1) bounds, and (2) because there's only one solution to the intersection equation, which means\n    // we never actually crossed the envelope plane.  So, the way we proceed is to look for intersections, but NOT do edge bounds at all.  Then, we consider the results in the context of\n    // the plane we're trying to assess.\n    //System.out.println(\" Computing crossings between \"+envelopePlane+\" and [\"+edge.startPoint+\"->\"+edge.endPoint+\"]\");\n    \n    final GeoPoint[] unboundedIntersectionPoints = envelopePlane.findIntersections(planetModel, edge.plane);\n    if (unboundedIntersectionPoints == null) {\n      return null;\n    }\n    // Go through the intersection points one at a time.  Notes:\n    // (1) So that we don't double-count, we can only include at most one point in the result per intersection.\n    // (2) Single-solution results imply that the plane was not crossed.  The only time we consider them is if the edge ends on the plane, in which case we count it as a crossing.\n    // (3) We tried to detect the case where the edge ends on the envelope plane by seeing if the intersection point was numerically identical to an endpoint, but that\n    //    was still too strict.\n    // (4) The intersection points will be on both planes, for sure.  The question is whether an intersection point \"lines up\" with an edge endpoint.  If the edge endpoint\n    //    lies in the envelope plane, then we have the possibility of a detection.  The detection is confirmed if the distance \"is small\" between the edge endpoint and\n    //    the intersection point.  I see squared linear distance numbers of about 1.35e-24, which is still barely outside of the 1e-12 envelope, so a straight distance\n    //    check won't work.  So this is what I think we need to do:\n    //    (a) Check if endpoint is on envelope plane; if not, we keep going.\n    //    (b) If on envelope plane, we confirm that entire section of plane between intersection point and endpoint lies within envelope plane.  (How??)\n    \n    // If no points, just return.  (I'm not even sure this can happen)\n    if (unboundedIntersectionPoints.length == 0) {\n      //System.out.println(\"  None found.\");\n      return unboundedIntersectionPoints;\n    }\n\n    // Single solution has special logic\n    if (unboundedIntersectionPoints.length == 1) {\n      //System.out.println(\"  One found.\");\n      final GeoPoint thePoint = unboundedIntersectionPoints[0];\n      if (withinBounds(thePoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, thePoint, edge.startPoint) || pointMatches(envelopePlane, thePoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)))) {\n        return unboundedIntersectionPoints;\n      }\n      return NO_POINTS;\n    }\n      \n    // Two solutions: we could return none, one, the other one, or both.\n    //System.out.println(\"  Two found.\");\n\n    final GeoPoint firstPoint = unboundedIntersectionPoints[0];\n    final GeoPoint secondPoint = unboundedIntersectionPoints[1];\n    \n    final boolean useFirstPoint;\n    if (withinBounds(firstPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, firstPoint, edge.startPoint) || pointMatches(envelopePlane, firstPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint)))) {\n      //System.out.println(\"  Point \"+firstPoint+\" accepted.\");\n      useFirstPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+firstPoint+\" rejected; withinBounds=\"+withinBounds(firstPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(firstPoint) && edge.endPlane.isWithin(firstPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(firstPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(firstPoint)); */\n      useFirstPoint = false;\n    }\n    \n    final boolean useSecondPoint;\n    if (withinBounds(secondPoint, envelopeBounds) &&\n        (pointMatches(envelopePlane, secondPoint, edge.startPoint) || pointMatches(envelopePlane, secondPoint, edge.endPoint) ||\n          (edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint)))) {\n      //System.out.println(\"  Point \"+secondPoint+\" accepted.\");\n      useSecondPoint = true;\n    } else {\n      /*System.out.println(\"  Point \"+secondPoint+\" rejected; withinBounds=\"+withinBounds(secondPoint, envelopeBounds)+\n        \"; edgeBounds=\"+(edge.startPlane.isWithin(secondPoint) && edge.endPlane.isWithin(secondPoint))+\n        \"; startPointDist=\"+edge.startPoint.linearDistanceSquared(secondPoint)+\"; endPointDist=\"+edge.endPoint.linearDistanceSquared(secondPoint)); */\n      useSecondPoint = false;\n    }\n    \n    if (useFirstPoint && useSecondPoint) {\n      return unboundedIntersectionPoints;\n    }\n    \n    if (useFirstPoint) {\n      return new GeoPoint[]{firstPoint};\n    }\n    \n    if (useSecondPoint) {\n      return new GeoPoint[]{secondPoint};\n    }\n    \n    return NO_POINTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["105474860f89d1a8b77bbdffe8db97cb952bc18f"],"105474860f89d1a8b77bbdffe8db97cb952bc18f":["1cf8d8275024d808d6f5e5a1a07e8fa2b010706a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d564e0296db7f80d73dd62b17710f61c85f38c50"]},"commit2Childs":{"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a":["105474860f89d1a8b77bbdffe8db97cb952bc18f"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"105474860f89d1a8b77bbdffe8db97cb952bc18f":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cf8d8275024d808d6f5e5a1a07e8fa2b010706a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}