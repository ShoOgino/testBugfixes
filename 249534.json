{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","commits":[{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61db97cb62a391687536358baddd3dbdedb040c7","date":1514906646,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","sourceNew":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), \" +\n                   \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","sourceNew":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), \" +\n                   \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSpline().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSpline().mjava","sourceNew":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), \" +\n                   \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7), \" +\n                   \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n                   \"    fit=spline(a, b), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 72.06870491240123, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 62.86259017519753, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-56.519065613191344, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), -16.786327722432148, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 87.66437650291996, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -63.87117828924769, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -63.17966334592923, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 43.58983167296462, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","61db97cb62a391687536358baddd3dbdedb040c7"],"61db97cb62a391687536358baddd3dbdedb040c7":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"61db97cb62a391687536358baddd3dbdedb040c7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["b94236357aaa22b76c10629851fe4e376e0cea82","61db97cb62a391687536358baddd3dbdedb040c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}