{"path":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","commits":[{"id":"d678d05c645583cb2ee5c2d5565fba91462466ed","date":1132608924,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1d9bb5b3ae9895215b198502b7a69ae9b1e131e","date":1132609303,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if (len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/LengthFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next(Token result) throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(result); token != null; token = input.next(result))\n    {\n      int len = token.termLength();\n      if (len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if (len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6864413dbc0c12104c978c05456f3da1d45adb03":["e1d9bb5b3ae9895215b198502b7a69ae9b1e131e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1d9bb5b3ae9895215b198502b7a69ae9b1e131e":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6864413dbc0c12104c978c05456f3da1d45adb03"]},"commit2Childs":{"6864413dbc0c12104c978c05456f3da1d45adb03":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"e1d9bb5b3ae9895215b198502b7a69ae9b1e131e":["6864413dbc0c12104c978c05456f3da1d45adb03"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["e1d9bb5b3ae9895215b198502b7a69ae9b1e131e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}