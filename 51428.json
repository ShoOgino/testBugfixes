{"path":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","sourceNew":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeWhileHandlingException(producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","sourceNew":null,"sourceOld":"    public FieldsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n\n      final Map<Codec, FieldsProducer> producers = new HashMap<Codec, FieldsProducer>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.isIndexed) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.fieldsProducer(new SegmentReadState(dir,\n                                                                             si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          IOUtils.closeWhileHandlingException(producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}