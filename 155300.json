{"path":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withShardsParam(Builder,String).mjava","commits":[{"id":"cc28b46d62a8b91c8e90f9345612c4050eab98d4","date":1581344825,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withShardsParam(Builder,String).mjava","pathOld":"/dev/null","sourceNew":"  private void withShardsParam(Builder builder, String shardsParam) {\n    List<String> sliceOrUrls = StrUtils.splitSmart(shardsParam, \",\", true);\n    this.slices = new String[sliceOrUrls.size()];\n    this.replicas = new List[sliceOrUrls.size()];\n\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n\n    for (int i = 0; i < sliceOrUrls.size(); i++) {\n      String sliceOrUrl = sliceOrUrls.get(i);\n      if (sliceOrUrl.indexOf('/') < 0) {\n        // this is a logical shard\n        this.slices[i] = sliceOrUrl;\n        replicas[i] = findReplicas(builder, shardsParam, clusterState, clusterState.getCollection(builder.collection).getSlice(sliceOrUrl));\n      } else {\n        // this has urls\n        this.replicas[i] = StrUtils.splitSmart(sliceOrUrl, \"|\", true);\n        builder.replicaListTransformer.transform(replicas[i]);\n        builder.hostChecker.checkWhitelist(clusterState, shardsParam, replicas[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withShardsParam(Builder,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withShardsParam(Builder,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void withShardsParam(Builder builder, String shardsParam) {\n    List<String> sliceOrUrls = StrUtils.splitSmart(shardsParam, \",\", true);\n    this.slices = new String[sliceOrUrls.size()];\n    this.replicas = new List[sliceOrUrls.size()];\n\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n\n    for (int i = 0; i < sliceOrUrls.size(); i++) {\n      String sliceOrUrl = sliceOrUrls.get(i);\n      if (sliceOrUrl.indexOf('/') < 0) {\n        // this is a logical shard\n        this.slices[i] = sliceOrUrl;\n        replicas[i] = findReplicas(builder, shardsParam, clusterState, clusterState.getCollection(builder.collection).getSlice(sliceOrUrl));\n      } else {\n        // this has urls\n        this.replicas[i] = StrUtils.splitSmart(sliceOrUrl, \"|\", true);\n        builder.replicaListTransformer.transform(replicas[i]);\n        builder.hostChecker.checkWhitelist(clusterState, shardsParam, replicas[i]);\n      }\n    }\n  }\n\n","sourceOld":"  private void withShardsParam(Builder builder, String shardsParam) {\n    List<String> sliceOrUrls = StrUtils.splitSmart(shardsParam, \",\", true);\n    this.slices = new String[sliceOrUrls.size()];\n    this.replicas = new List[sliceOrUrls.size()];\n\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n\n    for (int i = 0; i < sliceOrUrls.size(); i++) {\n      String sliceOrUrl = sliceOrUrls.get(i);\n      if (sliceOrUrl.indexOf('/') < 0) {\n        // this is a logical shard\n        this.slices[i] = sliceOrUrl;\n        replicas[i] = findReplicas(builder, shardsParam, clusterState, clusterState.getCollection(builder.collection).getSlice(sliceOrUrl));\n      } else {\n        // this has urls\n        this.replicas[i] = StrUtils.splitSmart(sliceOrUrl, \"|\", true);\n        builder.replicaListTransformer.transform(replicas[i]);\n        builder.hostChecker.checkWhitelist(clusterState, shardsParam, replicas[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}