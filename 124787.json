{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    final Map<CategoryListParams,FacetsAggregator> clpAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    clpAggregator.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    clpAggregator.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new FacetsAggregator() {\n          \n          @Override\n          public void rollupValues(int ordinal, int[] children, int[] siblings, FacetArrays facetArrays) {\n            throw new UnsupportedOperationException(\"not supported yet\");\n          }\n          \n          @Override\n          public boolean requiresDocScores() {\n            for (FacetsAggregator aggregator : clpAggregator.values()) {\n              if (aggregator.requiresDocScores()) {\n                return true;\n              }\n            }\n            return false;\n          }\n          \n          @Override\n          public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n            clpAggregator.get(clp).aggregate(matchingDocs, clp, facetArrays);\n          }\n        };\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    Map<CategoryListParams,FacetsAggregator> aggregators = new HashMap<CategoryListParams,FacetsAggregator>();\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    final FacetsAggregator aggregator = new PerCategoryListAggregator(aggregators, fip);\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    final Map<CategoryListParams,FacetsAggregator> clpAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    clpAggregator.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    clpAggregator.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new FacetsAggregator() {\n          \n          @Override\n          public void rollupValues(int ordinal, int[] children, int[] siblings, FacetArrays facetArrays) {\n            throw new UnsupportedOperationException(\"not supported yet\");\n          }\n          \n          @Override\n          public boolean requiresDocScores() {\n            for (FacetsAggregator aggregator : clpAggregator.values()) {\n              if (aggregator.requiresDocScores()) {\n                return true;\n              }\n            }\n            return false;\n          }\n          \n          @Override\n          public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n            clpAggregator.get(clp).aggregate(matchingDocs, clp, facetArrays);\n          }\n        };\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    Map<CategoryListParams,FacetsAggregator> aggregators = new HashMap<CategoryListParams,FacetsAggregator>();\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    final FacetsAggregator aggregator = new PerCategoryListAggregator(aggregators, fip);\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    Map<CategoryListParams,FacetsAggregator> aggregators = new HashMap<CategoryListParams,FacetsAggregator>();\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    final FacetsAggregator aggregator = new PerCategoryListAggregator(aggregators, fip);\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    Map<CategoryListParams,FacetsAggregator> aggregators = new HashMap<CategoryListParams,FacetsAggregator>();\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    final FacetsAggregator aggregator = new PerCategoryListAggregator(aggregators, fip);\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    Map<CategoryListParams,FacetsAggregator> aggregators = new HashMap<CategoryListParams,FacetsAggregator>();\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"a\")), new FastCountingFacetsAggregator());\n    aggregators.put(fip.getCategoryListParams(new CategoryPath(\"b\")), new SumScoreFacetsAggregator());\n    final FacetsAggregator aggregator = new PerCategoryListAggregator(aggregators, fip);\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n    \n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new FacetLabel(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<FacetLabel> cats = new ArrayList<FacetLabel>();\n      cats.add(new FacetLabel(\"a\"));\n      cats.add(new FacetLabel(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new FacetLabel(\"a\"), 10), \n        new SumScoreFacetRequest(new FacetLabel(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new FacetLabel(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<FacetLabel> cats = new ArrayList<FacetLabel>();\n      cats.add(new FacetLabel(\"a\"));\n      cats.add(new FacetLabel(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new FacetLabel(\"a\"), 10), \n        new SumScoreFacetRequest(new FacetLabel(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testCountAndSumScore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCountAndSumScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new SumScoreFacetRequest(new CategoryPath(\"b\"), 10));\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    newSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    FacetResult fresA = facetResults.get(0);\n    assertEquals(\"unexpected count for \" + fresA, r.maxDoc(), (int) fresA.getFacetResultNode().value);\n    \n    FacetResult fresB = facetResults.get(1);\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(\"unexpected value for \" + fresB, expected, fresB.getFacetResultNode().value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","ae75def1e2525383b6e1397ed97c44387da9941c"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}