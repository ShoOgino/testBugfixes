{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningfull. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningfull. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"487b6150786f5145006f5d0d38a5f514b4472319","date":1355684762,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningfull. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningfull. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Init arrays for partition by total counts, optionally applying a factor\n   */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","487b6150786f5145006f5d0d38a5f514b4472319"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["487b6150786f5145006f5d0d38a5f514b4472319"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"487b6150786f5145006f5d0d38a5f514b4472319":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","487b6150786f5145006f5d0d38a5f514b4472319"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"487b6150786f5145006f5d0d38a5f514b4472319":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}