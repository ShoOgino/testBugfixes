{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState)_state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState)_state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}