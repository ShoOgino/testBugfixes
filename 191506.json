{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomWhitespace(Random,int,int).mjava","commits":[{"id":"8e6deb81c6b16f810baf365f9c768efa270e8d2a","date":1349474419,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomWhitespace(Random,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a random string in the specified length range consisting \n   * entirely of whitespace characters \n   * @see #WHITESPACE_CHARACTERS\n   */\n  public static String randomWhitespace(Random r, int minLength, int maxLength) {\n    final int end = nextInt(r, minLength, maxLength);\n    StringBuilder out = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int offset = nextInt(r, 0, WHITESPACE_CHARACTERS.length-1);\n      char c = WHITESPACE_CHARACTERS[offset];\n      // sanity check\n      Assert.assertTrue(\"Not really whitespace? (@\"+offset+\"): \" + c, Character.isWhitespace(c));\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomWhitespace(Random,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomWhitespace(Random,int,int).mjava","sourceNew":"  /**\n   * Returns a random string in the specified length range consisting \n   * entirely of whitespace characters \n   * @see #WHITESPACE_CHARACTERS\n   */\n  public static String randomWhitespace(Random r, int minLength, int maxLength) {\n    final int end = nextInt(r, minLength, maxLength);\n    StringBuilder out = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int offset = nextInt(r, 0, WHITESPACE_CHARACTERS.length-1);\n      char c = WHITESPACE_CHARACTERS[offset];\n      // sanity check\n      Assert.assertTrue(\"Not really whitespace? (@\"+offset+\"): \" + c, Character.isWhitespace(c));\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a random string in the specified length range consisting \n   * entirely of whitespace characters \n   * @see #WHITESPACE_CHARACTERS\n   */\n  public static String randomWhitespace(Random r, int minLength, int maxLength) {\n    final int end = nextInt(r, minLength, maxLength);\n    StringBuilder out = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int offset = nextInt(r, 0, WHITESPACE_CHARACTERS.length-1);\n      char c = WHITESPACE_CHARACTERS[offset];\n      // sanity check\n      Assert.assertTrue(\"Not really whitespace? (@\"+offset+\"): \" + c, Character.isWhitespace(c));\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}