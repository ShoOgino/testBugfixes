{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, null, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,SuggestMode,float).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query.build(), maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   *\n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param suggestMode \n   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)\n   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   * \n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, SuggestMode suggestMode, float accuracy) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try {\n      if (ir == null || field == null) {\n        suggestMode = SuggestMode.SUGGEST_ALWAYS;\n      }\n      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {\n        ir = null;\n        field = null;\n      }\n\n      final int lengthWord = word.length();\n\n      final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;\n      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;\n      // if the word exists in the real index and we don't care for word frequency, return the word itself\n      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {\n        return new String[] { word };\n      }\n\n      BooleanQuery query = new BooleanQuery();\n      String[] grams;\n      String key;\n\n      for (int ng = getMin(lengthWord); ng <= getMax(lengthWord); ng++) {\n\n        key = \"gram\" + ng; // form key\n\n        grams = formGrams(word, ng); // form word into ngrams (allow dups too)\n\n        if (grams.length == 0) {\n          continue; // hmm\n        }\n\n        if (bStart > 0) { // should we boost prefixes?\n          add(query, \"start\" + ng, grams[0], bStart); // matches start of word\n\n        }\n        if (bEnd > 0) { // should we boost suffixes\n          add(query, \"end\" + ng, grams[grams.length - 1], bEnd); // matches end of word\n\n        }\n        for (int i = 0; i < grams.length; i++) {\n          add(query, key, grams[i]);\n        }\n      }\n\n      int maxHits = 10 * numSug;\n\n  //    System.out.println(\"Q: \" + query);\n      ScoreDoc[] hits = indexSearcher.search(query, maxHits).scoreDocs;\n  //    System.out.println(\"HITS: \" + hits.length());\n      SuggestWordQueue sugQueue = new SuggestWordQueue(numSug, comparator);\n\n      // go thru more than 'maxr' matches in case the distance filter triggers\n      int stop = Math.min(hits.length, maxHits);\n      SuggestWord sugWord = new SuggestWord();\n      for (int i = 0; i < stop; i++) {\n\n        sugWord.string = indexSearcher.doc(hits[i].doc).get(F_WORD); // get orig word\n\n        // don't suggest a word for itself, that would be silly\n        if (sugWord.string.equals(word)) {\n          continue;\n        }\n\n        // edit distance\n        sugWord.score = sd.getDistance(word,sugWord.string);\n        if (sugWord.score < accuracy) {\n          continue;\n        }\n\n        if (ir != null && field != null) { // use the user index\n          sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index\n          // don't suggest a word that is not present in the field\n          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {\n            continue;\n          }\n        }\n        sugQueue.insertWithOverflow(sugWord);\n        if (sugQueue.size() == numSug) {\n          // if queue full, maintain the minScore score\n          accuracy = sugQueue.top().score;\n        }\n        sugWord = new SuggestWord();\n      }\n\n      // convert to array string\n      String[] list = new String[sugQueue.size()];\n      for (int i = sugQueue.size() - 1; i >= 0; i--) {\n        list[i] = sugQueue.pop().string;\n      }\n\n      return list;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}