{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = unsignedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(unsignedIndexDir.minR);\n    String maxRP = pad(unsignedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}