{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","commits":[{"id":"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1","date":1504564803,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6331fb5344e3d737be63af3a7bd470ee133004a","date":1569798100,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","sourceNew":"  public static double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    double d = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    return Precision.round(d, 8);\n  }\n\n","sourceOld":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator#cosineSimilarity(double[],double[]).mjava","sourceNew":"  public static double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    double d = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    return Precision.round(d, 8);\n  }\n\n","sourceOld":"  private double cosineSimilarity(double[] vectorA, double[] vectorB) {\n    double dotProduct = 0.0;\n    double normA = 0.0;\n    double normB = 0.0;\n    for (int i = 0; i < vectorA.length; i++) {\n      dotProduct += vectorA[i] * vectorB[i];\n      normA += Math.pow(vectorA[i], 2);\n      normB += Math.pow(vectorB[i], 2);\n    }\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6331fb5344e3d737be63af3a7bd470ee133004a":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","b6331fb5344e3d737be63af3a7bd470ee133004a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6331fb5344e3d737be63af3a7bd470ee133004a"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","b6331fb5344e3d737be63af3a7bd470ee133004a","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}