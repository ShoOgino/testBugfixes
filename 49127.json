{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = TermRangeQuery.newStringRange(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = TermRangeQuery.newStringRange(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = TermRangeQuery.newStringRange(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    // force the filter to be executed as bits\n    tRangeQuery(true);\n    tRangeQuery(false);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = TermRangeQuery.newStringRange(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    // force the filter to be executed as bits\n    tRangeQuery(true);\n    tRangeQuery(false);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    // force the filter to be executed as bits\n    tRangeQuery(true);\n    tRangeQuery(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e492fb0f2bb0b4b47208286f9331ff55963c656","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["6620df8541b174097b1133a4fc370adb2e570524","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}