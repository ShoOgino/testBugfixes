{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","sourceNew":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","sourceNew":null,"sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","sourceNew":null,"sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}