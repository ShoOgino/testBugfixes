{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    setSliceAsInactive(SHARD1);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a982453fa5a954e86ce77b1be9daf749881c13b3","0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    setSliceAsInactive(SHARD1);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5f2c825882b5378afd6f911e0d1cd0274b7410","date":1378970050,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    setSliceAsInactive(SHARD1);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    setSliceAsInactive(SHARD1);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion();\n  }\n\n","bugFix":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a982453fa5a954e86ce77b1be9daf749881c13b3","date":1400848395,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    setSliceAsInactive(SHARD1);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n  }\n\n","bugFix":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a982453fa5a954e86ce77b1be9daf749881c13b3"],"a982453fa5a954e86ce77b1be9daf749881c13b3":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"a982453fa5a954e86ce77b1be9daf749881c13b3":["bafca15d8e408346a67f4282ad1143b88023893b"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["a982453fa5a954e86ce77b1be9daf749881c13b3"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}