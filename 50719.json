{"path":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.SKGSlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.SKGSlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int collect(DocSet docs, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n      // NOTE: we don't actaully care about the doc set being collected for the bucket\n      // so we only worry about ensuring that every \"slot\" / bucket is processed exactly once\n      \n      // if we're doing bulk collection, we better not be getting asked to re-use slots\n      assert null == slotvalues[slot];\n      processSlot(slot, slotContext);\n\n      // we don't do any filtering, we collect the whole docset, so return that as out collected count\n      // (as a stat, we're actually required to return this by assertions in FacetFieldProcessor.processStats)\n      return docs.size();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}