{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) \n  throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) \n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03","date":1353235561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) \n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dfc9a1c0f8c40dae949281597c97e61defe903fc","date":1359040461,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.  Note that if the field was only indexed\n   *  as DocValues then this method will not work (it will return a Bits stating\n   *  that no documents contain the field).\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.  Note that if the field was only indexed\n   *  as DocValues then this method will not work (it will return a Bits stating\n   *  that no documents contain the field).\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> and returns a bit set at the size of\n   * <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   * does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) \n  throws IOException;\n\n","bugFix":["da6d5ac19a80d65b1e864251f155d30960353b7e","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.  Note that if the field was only indexed\n   *  as DocValues then this method will not work (it will return a Bits stating\n   *  that no documents contain the field).\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.  Note that if the field was only indexed\n   *  as DocValues then this method will not work (it will return a Bits stating\n   *  that no documents contain the field).\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.  Note that if the field was only indexed\n   *  as DocValues then this method will not work (it will return a Bits stating\n   *  that no documents contain the field).\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is found,\n   *  reads the terms in <code>field</code> and returns a bit set at the size of\n   *  <code>reader.maxDoc()</code>, with turned on bits for each docid that \n   *  does have a value for this field.\n   */\n  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dfc9a1c0f8c40dae949281597c97e61defe903fc":["34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","dfc9a1c0f8c40dae949281597c97e61defe903fc"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"56572ec06f1407c066d6b7399413178b33176cd8":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"dfc9a1c0f8c40dae949281597c97e61defe903fc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["dfc9a1c0f8c40dae949281597c97e61defe903fc"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["93dd449115a9247533e44bab47e8429e5dccbc6d","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}