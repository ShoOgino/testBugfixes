{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"236dac0597e3e2ea3535193a93c6e434c3034240","date":1350928539,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5626bd803178375ddd3b1d121587f4e5d1bcbd8c","date":1350997809,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsAndPositionsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["5626bd803178375ddd3b1d121587f4e5d1bcbd8c"],"5626bd803178375ddd3b1d121587f4e5d1bcbd8c":["236dac0597e3e2ea3535193a93c6e434c3034240"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","5626bd803178375ddd3b1d121587f4e5d1bcbd8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"236dac0597e3e2ea3535193a93c6e434c3034240":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["3d4e5ccb1c589a2962235f13b65cc725050818d9","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","236dac0597e3e2ea3535193a93c6e434c3034240"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"5626bd803178375ddd3b1d121587f4e5d1bcbd8c":["3d4e5ccb1c589a2962235f13b65cc725050818d9","62e52115b56781006682fd92c6938efaf174304d"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"236dac0597e3e2ea3535193a93c6e434c3034240":["5626bd803178375ddd3b1d121587f4e5d1bcbd8c"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}