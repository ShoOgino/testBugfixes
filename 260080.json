{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            // TODO: should we fail here now? really test should be failing?\n            System.err.println(\"PLEASE CLOSE YOUR INDEXREADERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            // TODO: should we fail here now? really test should be failing?\n            System.err.println(\"PLEASE CLOSE YOUR INDEXREADERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            // TODO: should we fail here now? really test should be failing?\n            System.err.println(\"PLEASE CLOSE YOUR INDEXREADERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}