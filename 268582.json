{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getRangeByNewFormat(Map[String,Object]).mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getRangeByNewFormat(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeByNewFormat(Map[String,Object]).mjava","sourceNew":"  /**\n   * Parses the range given in format {from:val1, to:val2, inclusive_to:true}\n   * and returns the {@link Range}\n   *\n   * @param rangeMap Map containing the range info\n   * @return {@link Range}\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Range getRangeByNewFormat(Map<String, Object> rangeMap) {\n    Object fromObj = rangeMap.get(\"from\");\n    Object toObj = rangeMap.get(\"to\");\n\n    String fromStr = fromObj == null? \"*\" : fromObj.toString();\n    String toStr = toObj == null? \"*\": toObj.toString();\n    boolean includeUpper = getBoolean(rangeMap, \"inclusive_to\", false);\n    boolean includeLower = getBoolean(rangeMap, \"inclusive_from\", true);\n\n    Object key = rangeMap.get(\"key\");\n    // if (key == null) {\n    //  key = (includeLower? \"[\": \"(\") + fromStr + \",\" + toStr + (includeUpper? \"]\": \")\");\n    // }\n    // using the default key as custom key won't work with refine\n    // refine would need both low and high values\n    key = (includeLower? \"[\": \"(\") + fromStr + \",\" + toStr + (includeUpper? \"]\": \")\");\n\n    Comparable from = getComparableFromString(fromStr);\n    Comparable to = getComparableFromString(toStr);\n\n    if (from != null && to != null && from.compareTo(to) > 0) {\n      // allowing from and to be same\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'from' is higher than 'to' in range for key: \" + key);\n    }\n\n    return new Range(key, from, to, includeLower, includeUpper);\n  }\n\n","sourceOld":"  /**\n   * Parses the range given in format {from:val1, to:val2, inclusive_to:true}\n   * and returns the {@link Range}\n   *\n   * @param rangeMap Map containing the range info\n   * @return {@link Range}\n   */\n  private Range getRangeByNewFormat(Map<String, Object> rangeMap) {\n    Object fromObj = rangeMap.get(\"from\");\n    Object toObj = rangeMap.get(\"to\");\n\n    String fromStr = fromObj == null? \"*\" : fromObj.toString();\n    String toStr = toObj == null? \"*\": toObj.toString();\n    boolean includeUpper = getBoolean(rangeMap, \"inclusive_to\", false);\n    boolean includeLower = getBoolean(rangeMap, \"inclusive_from\", true);\n\n    Object key = rangeMap.get(\"key\");\n    // if (key == null) {\n    //  key = (includeLower? \"[\": \"(\") + fromStr + \",\" + toStr + (includeUpper? \"]\": \")\");\n    // }\n    // using the default key as custom key won't work with refine\n    // refine would need both low and high values\n    key = (includeLower? \"[\": \"(\") + fromStr + \",\" + toStr + (includeUpper? \"]\": \")\");\n\n    Comparable from = getComparableFromString(fromStr);\n    Comparable to = getComparableFromString(toStr);\n    if (from != null && to != null && from.compareTo(to) > 0) {\n      // allowing from and to be same\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'from' is higher than 'to' in range for key: \" + key);\n    }\n\n    return new Range(key, from, to, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}