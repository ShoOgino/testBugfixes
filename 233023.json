{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","commits":[{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    try (InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n        InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\")) {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    try (InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n        InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\")) {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b9214e93abd5c360b7dc32483691d5555a9c7e","date":1394289706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","sourceOld":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    try (InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n        InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\")) {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","bugFix":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","sourceOld":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    try (InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n        InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\")) {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n    a.close();\n  }\n\n","sourceOld":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n    a.close();\n  }\n\n","sourceOld":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testIgnoreCaseNoSideEffects().mjava","sourceNew":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    Directory tempDir = getDirectory();\n    try {\n      d = new Dictionary(tempDir, \"dictionary\", affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n    a.close();\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testIgnoreCaseNoSideEffects() throws Exception {\n    final Dictionary d;\n    // no multiple try-with to workaround bogus VerifyError\n    InputStream affixStream = TestStemmer.class.getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = TestStemmer.class.getResourceAsStream(\"simple.dic\");\n    try {\n      d = new Dictionary(affixStream, Collections.singletonList(dictStream), true);\n    } finally {\n      IOUtils.closeWhileHandlingException(affixStream, dictStream);\n    }\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, d));\n      }\n    };\n    checkOneTerm(a, \"NoChAnGy\", \"NoChAnGy\");\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b6b9214e93abd5c360b7dc32483691d5555a9c7e","a56958d7f71a28824f20031ffbb2e13502a0274e"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae9942cbee38a49d234c2f022e3a265133d1914"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"5ae9942cbee38a49d234c2f022e3a265133d1914":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}