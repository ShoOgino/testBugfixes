{"path":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      LeafReader r = searcher.getLeafReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a7c13535572b8e97cc477fc3388a57321a7751a","date":1427500960,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b850f06b1db39c994c6386cbbaa486651f490b","date":1523385145,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    assert TestInjection.injectUIFOutOfMemoryError();\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    assert TestInjection.injectUIFOutOfMemoryError();\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '{}' : bucket size={}\", field, target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"UnInverted multi-valued field {}\", toString());\n    }\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    assert TestInjection.injectUIFOutOfMemoryError();\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    assert TestInjection.injectUIFOutOfMemoryError();\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '{}' : bucket size={}\", field, target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    log.info(\"UnInverted multi-valued field {}\", this);\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n\n    assert TestInjection.injectUIFOutOfMemoryError();\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          log.warn(\"Approaching too many values for UnInvertedField faceting on field '{}' : bucket size={}\", field, target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"UnInverted multi-valued field {}\", toString());\n    }\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a7c13535572b8e97cc477fc3388a57321a7751a"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["f0b850f06b1db39c994c6386cbbaa486651f490b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["4a7c13535572b8e97cc477fc3388a57321a7751a"],"f0b850f06b1db39c994c6386cbbaa486651f490b":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"4a7c13535572b8e97cc477fc3388a57321a7751a":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["4a7c13535572b8e97cc477fc3388a57321a7751a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["f0b850f06b1db39c994c6386cbbaa486651f490b"],"4a7c13535572b8e97cc477fc3388a57321a7751a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"f0b850f06b1db39c994c6386cbbaa486651f490b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}