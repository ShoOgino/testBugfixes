{"path":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}