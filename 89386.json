{"path":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","commits":[{"id":"56f0812b01cb0620e0240c4c705162386719f24a","date":1184256894,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"/dev/null","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["56f0812b01cb0620e0240c4c705162386719f24a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"56f0812b01cb0620e0240c4c705162386719f24a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"56f0812b01cb0620e0240c4c705162386719f24a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56f0812b01cb0620e0240c4c705162386719f24a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}