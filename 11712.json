{"path":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","commits":[{"id":"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","date":1450976696,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","pathOld":"/dev/null","sourceNew":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        int term = segmentSDV.getOrd(docNum);\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        segmentSSDV.setDocument(docNum);\n        int term = (int) segmentSSDV.nextOrd();\n        do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n          accumulateTermOrd(term, iter.getAggKey());\n        } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","sourceNew":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSDV.docID()) {\n          segmentSDV.advance(docNum);\n        }\n        \n        int term;\n        if (docNum == segmentSDV.docID()) {\n          term = segmentSDV.ordValue();\n        } else {\n          term = -1;\n        }\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSSDV.docID()) {\n          segmentSSDV.advance(docNum);\n        }\n        if (docNum == segmentSSDV.docID()) {\n          int term = (int) segmentSSDV.nextOrd();\n          do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n            accumulateTermOrd(term, iter.getAggKey());\n          } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        int term = segmentSDV.getOrd(docNum);\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        segmentSSDV.setDocument(docNum);\n        int term = (int) segmentSSDV.nextOrd();\n        do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n          accumulateTermOrd(term, iter.getAggKey());\n        } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","sourceNew":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSDV.docID()) {\n          segmentSDV.advance(docNum);\n        }\n        \n        int term;\n        if (docNum == segmentSDV.docID()) {\n          term = segmentSDV.ordValue();\n        } else {\n          term = -1;\n        }\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSSDV.docID()) {\n          segmentSSDV.advance(docNum);\n        }\n        if (docNum == segmentSSDV.docID()) {\n          int term = (int) segmentSSDV.nextOrd();\n          do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n            accumulateTermOrd(term, iter.getAggKey());\n          } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        int term = segmentSDV.getOrd(docNum);\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        segmentSSDV.setDocument(docNum);\n        int term = (int) segmentSSDV.nextOrd();\n        do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n          accumulateTermOrd(term, iter.getAggKey());\n        } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","sourceNew":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSDV.docID()) {\n          segmentSDV.advance(docNum);\n        }\n        \n        int term;\n        if (docNum == segmentSDV.docID()) {\n          term = segmentSDV.ordValue();\n        } else {\n          term = -1;\n        }\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSSDV.docID()) {\n          segmentSSDV.advance(docNum);\n        }\n        if (docNum == segmentSSDV.docID()) {\n          int term = (int) segmentSSDV.nextOrd();\n          do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n            accumulateTermOrd(term, iter.getAggKey());\n          } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        int term = segmentSDV.getOrd(docNum);\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        segmentSSDV.setDocument(docNum);\n        int term = (int) segmentSSDV.nextOrd();\n        do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n          accumulateTermOrd(term, iter.getAggKey());\n        } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","sourceNew":null,"sourceOld":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSDV.docID()) {\n          segmentSDV.advance(docNum);\n        }\n        \n        int term;\n        if (docNum == segmentSDV.docID()) {\n          term = segmentSDV.ordValue();\n        } else {\n          term = -1;\n        }\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSSDV.docID()) {\n          segmentSSDV.advance(docNum);\n        }\n        if (docNum == segmentSSDV.docID()) {\n          int term = (int) segmentSSDV.nextOrd();\n          do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n            accumulateTermOrd(term, iter.getAggKey());\n          } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFieldFacetAccumulator#updateCountsWithMatchedBlock(AggregatableDocIter).mjava","sourceNew":null,"sourceOld":"  void updateCountsWithMatchedBlock(AggregatableDocIter iter) throws IOException {\n    if (segmentSDV != null) {\n      // some codecs may optimize SORTED_SET storage for single-valued fields\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSDV.docID()) {\n          segmentSDV.advance(docNum);\n        }\n        \n        int term;\n        if (docNum == segmentSDV.docID()) {\n          term = segmentSDV.ordValue();\n        } else {\n          term = -1;\n        }\n        accumulateTermOrd(term, iter.getAggKey());\n        //System.out.println(\"doc# \"+docNum+\" \"+fieldName+\" term# \"+term+\" tick \"+Long.toHexString(segmentAccums[1+term]));\n      }\n    } else {\n      for (iter.reset(); iter.hasNext(); ) {\n        final int docNum = iter.nextDoc();\n        if (docNum > segmentSSDV.docID()) {\n          segmentSSDV.advance(docNum);\n        }\n        if (docNum == segmentSSDV.docID()) {\n          int term = (int) segmentSSDV.nextOrd();\n          do { // absent values are designated by term=-1, first iteration counts [0] as \"missing\", and exit, otherwise it spins \n            accumulateTermOrd(term, iter.getAggKey());\n          } while (term>=0 && (term = (int) segmentSSDV.nextOrd()) >= 0);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","00a778ad8ad6c2c04607538d2f36fee001239eef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00a778ad8ad6c2c04607538d2f36fee001239eef"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["246314af59d76a47fccc31e9494eefee01ec9c00","00a778ad8ad6c2c04607538d2f36fee001239eef","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}