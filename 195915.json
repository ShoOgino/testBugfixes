{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#syncDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","commits":[{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#syncDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void syncDelete(DeleteUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    log.info(\"SYNCDELETE on {} : \", nodes, cmd);\n    checkResponses(false);\n    // flush all pending adds\n    flushAdds(1);\n    // flush all pending deletes\n    flushDeletes(1);\n    // finish pending requests\n    checkResponses(false);\n\n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n\n    UpdateRequestExt ureq = new UpdateRequestExt();\n    if (cmd.isDeleteById()) {\n      ureq.deleteById(cmd.getId(), cmd.getVersion());\n    } else {\n      ureq.deleteByQuery(cmd.query);\n    }\n    ureq.setParams(params);\n    for (Node node : nodes) {\n      syncRequest(node, ureq);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#syncDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#syncDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void syncDelete(DeleteUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    log.info(\"SYNCDELETE on {} : \", nodes, cmd);\n    checkResponses(false);\n    // flush all pending adds\n    flushAdds(1);\n    // flush all pending deletes\n    flushDeletes(1);\n    // finish pending requests\n    checkResponses(false);\n\n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n\n    UpdateRequest ureq = new UpdateRequest();\n    if (cmd.isDeleteById()) {\n      ureq.deleteById(cmd.getId(), cmd.getVersion());\n    } else {\n      ureq.deleteByQuery(cmd.query);\n    }\n    ureq.setParams(params);\n    for (Node node : nodes) {\n      syncRequest(node, ureq);\n    }\n  }\n\n","sourceOld":"  public void syncDelete(DeleteUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    log.info(\"SYNCDELETE on {} : \", nodes, cmd);\n    checkResponses(false);\n    // flush all pending adds\n    flushAdds(1);\n    // flush all pending deletes\n    flushDeletes(1);\n    // finish pending requests\n    checkResponses(false);\n\n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n\n    UpdateRequestExt ureq = new UpdateRequestExt();\n    if (cmd.isDeleteById()) {\n      ureq.deleteById(cmd.getId(), cmd.getVersion());\n    } else {\n      ureq.deleteByQuery(cmd.query);\n    }\n    ureq.setParams(params);\n    for (Node node : nodes) {\n      syncRequest(node, ureq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#syncDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":null,"sourceOld":"  public void syncDelete(DeleteUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    log.info(\"SYNCDELETE on {} : \", nodes, cmd);\n    checkResponses(false);\n    // flush all pending adds\n    flushAdds(1);\n    // flush all pending deletes\n    flushDeletes(1);\n    // finish pending requests\n    checkResponses(false);\n\n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n\n    UpdateRequest ureq = new UpdateRequest();\n    if (cmd.isDeleteById()) {\n      ureq.deleteById(cmd.getId(), cmd.getVersion());\n    } else {\n      ureq.deleteByQuery(cmd.query);\n    }\n    ureq.setParams(params);\n    for (Node node : nodes) {\n      syncRequest(node, ureq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"]},"commit2Childs":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}