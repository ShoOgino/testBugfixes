{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","sourceNew":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      if (size < 0) {\n        System.out.println();\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","sourceOld":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      if (size < 0) {\n        System.out.println();\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80a4851212f9d622db935c1915734fedaa4f1dd","date":1331902480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","sourceNew":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","sourceOld":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      if (size < 0) {\n        System.out.println();\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedSource#getByOrd(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n      int size = this.size;\n      long offset = (ord*size);\n      if (ordToOffset != null) {\n        offset =  ordToOffset[ord];\n        size = (int) (ordToOffset[1 + ord] - offset);\n      }\n      assert size >=0;\n      return data.fillSlice(bytesRef, offset, size);\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["e80a4851212f9d622db935c1915734fedaa4f1dd","0837ab0472feecb3a54260729d845f839e1cbd72"],"e80a4851212f9d622db935c1915734fedaa4f1dd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["e80a4851212f9d622db935c1915734fedaa4f1dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e80a4851212f9d622db935c1915734fedaa4f1dd":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e80a4851212f9d622db935c1915734fedaa4f1dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}