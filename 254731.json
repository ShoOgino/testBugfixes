{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","558f47e41524183823173884b3aaf0c03653dec0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","bugFix":null,"bugIntro":["558f47e41524183823173884b3aaf0c03653dec0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"558f47e41524183823173884b3aaf0c03653dec0","date":1499192348,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: \" + docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    log.info(\"####### DocCollection after: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","bugFix":["b1777912fb613f51063554d81f71c1b70d6bcd77","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: \" + docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    log.info(\"####### DocCollection after: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    String node2bdecommissioned = l.get(0);\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: \" + docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    log.info(\"####### DocCollection after: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: \" + docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    log.info(\"####### DocCollection after: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","bugFix":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: {}\", docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"####### DocCollection after: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: \" + docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    log.info(\"####### DocCollection after: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ','));\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: {}\", docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"####### DocCollection after: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    String coll = \"deletenodetest_coll\";\n    ClusterState state = cloudClient.getZkStateReader().getClusterState();\n    Set<String> liveNodes = state.getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    CollectionAdminRequest.Create create = pickRandom(\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 1, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 1),\n        // check RF=1\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1, 0, 0),\n        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0, 1, 0)\n        );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    state = cloudClient.getZkStateReader().getClusterState();\n    String node2bdecommissioned = l.get(0);\n    // check what replicas are on the node, and whether the call should fail\n    boolean shouldFail = false;\n    DocCollection docColl = state.getCollection(coll);\n    log.info(\"#### DocCollection: {}\", docColl);\n    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n        Slice slice = docColl.getSlice(shard);\n        boolean hasOtherNonPullReplicas = false;\n        for (Replica r: slice.getReplicas()) {\n          if (!r.getName().equals(replica.getName()) &&\n              !r.getNodeName().equals(node2bdecommissioned) &&\n              r.getType() != Replica.Type.PULL) {\n            hasOtherNonPullReplicas = true;\n            break;\n          }\n        }\n        if (!hasOtherNonPullReplicas) {\n          shouldFail = true;\n          break;\n        }\n      }\n    }\n    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync(\"003\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"003\");\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"####### DocCollection after: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    if (shouldFail) {\n      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    } else {\n      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","61c45e99cf6676da48f19d7511c73712ad39402b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1777912fb613f51063554d81f71c1b70d6bcd77"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","558f47e41524183823173884b3aaf0c03653dec0"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["558f47e41524183823173884b3aaf0c03653dec0"],"558f47e41524183823173884b3aaf0c03653dec0":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","558f47e41524183823173884b3aaf0c03653dec0"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"558f47e41524183823173884b3aaf0c03653dec0":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}