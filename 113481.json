{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","commits":[{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"/dev/null","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"/dev/null","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}