{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","commits":[{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}