{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","commits":[{"id":"54668f9ceae36bd32ddd82aca6d9abc2ba3dc92f","date":1256594800,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      //System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      //System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(ramDir, true);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(NUMERIC_FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54668f9ceae36bd32ddd82aca6d9abc2ba3dc92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["54668f9ceae36bd32ddd82aca6d9abc2ba3dc92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"54668f9ceae36bd32ddd82aca6d9abc2ba3dc92f":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54668f9ceae36bd32ddd82aca6d9abc2ba3dc92f"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}