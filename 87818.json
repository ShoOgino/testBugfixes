{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","commits":[{"id":"c3480728ed564c17162fff1200a8d15c1a5f24cd","date":1527693339,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator]).mjava","sourceNew":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators, boolean allowOverlaps) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n      this.allowOverlaps = allowOverlaps;\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","sourceOld":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff275d3941a30f2db7c9278444015f412b835254","date":1544435249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","sourceNew":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators, boolean allowOverlaps) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n      this.innerPositions = new int[subIterators.size() * 2];\n      this.allowOverlaps = allowOverlaps;\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","sourceOld":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators, boolean allowOverlaps) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n      this.allowOverlaps = allowOverlaps;\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/UnorderedIntervalsSource.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#UnorderedIntervalIterator(List[IntervalIterator],boolean).mjava","sourceNew":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators, boolean allowOverlaps) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n      this.innerPositions = new int[subIterators.size() * 2];\n      this.allowOverlaps = allowOverlaps;\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","sourceOld":"    UnorderedIntervalIterator(List<IntervalIterator> subIterators, boolean allowOverlaps) {\n      super(subIterators);\n      this.queue = new PriorityQueue<IntervalIterator>(subIterators.size()) {\n        @Override\n        protected boolean lessThan(IntervalIterator a, IntervalIterator b) {\n          return a.start() < b.start() || (a.start() == b.start() && a.end() >= b.end());\n        }\n      };\n      this.subIterators = new IntervalIterator[subIterators.size()];\n      this.innerPositions = new int[subIterators.size() * 2];\n      this.allowOverlaps = allowOverlaps;\n\n      for (int i = 0; i < subIterators.size(); i++) {\n        this.subIterators[i] = subIterators.get(i);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["ff275d3941a30f2db7c9278444015f412b835254"],"ff275d3941a30f2db7c9278444015f412b835254":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"]},"commit2Childs":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff275d3941a30f2db7c9278444015f412b835254":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["ff275d3941a30f2db7c9278444015f412b835254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}