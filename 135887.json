{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    Query functionQuery = getFunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestExactScore(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    Query functionQuery = getFunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits.value);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (ValueSource valueSource) throws Exception {\n    Query functionQuery = getFunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    TopDocs td = s.search(functionQuery,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(functionQuery, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}