{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#compareCharsAlphabetically(char,char).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#compareCharsAlphabetically(char,char).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#compareCharsAlphabetically(char,char).mjava","sourceNew":"  /**\n   * Compares characters by alfabetical order.\n   * \n   *@param cCompare2\n   *          The first char in the comparison.\n   *@param cRef\n   *          The second char in the comparison.\n   *@return A negative number, 0 or a positive number if the second char is\n   *         less, equal or greater.\n   */\n  private static int compareCharsAlphabetically(char cCompare2, char cRef) {\n    return Character.toLowerCase(cCompare2) - Character.toLowerCase(cRef);\n  }\n\n","sourceOld":"  /**\n   * Compares characters by alfabetical order.\n   * \n   *@param cCompare2\n   *          The first char in the comparison.\n   *@param cRef\n   *          The second char in the comparison.\n   *@return A negative number, 0 or a positive number if the second char is\n   *         less, equal or greater.\n   */\n  private static int compareCharsAlphabetically(char cCompare2, char cRef) {\n    return Character.toLowerCase(cCompare2) - Character.toLowerCase(cRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#compareCharsAlphabetically(char,char).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#compareCharsAlphabetically(char,char).mjava","sourceNew":"  /**\n   * Compares characters by alphabetical order.\n   * \n   *@param cCompare2\n   *          The first char in the comparison.\n   *@param cRef\n   *          The second char in the comparison.\n   *@return A negative number, 0 or a positive number if the second char is\n   *         less, equal or greater.\n   */\n  private static int compareCharsAlphabetically(char cCompare2, char cRef) {\n    return Character.toLowerCase(cCompare2) - Character.toLowerCase(cRef);\n  }\n\n","sourceOld":"  /**\n   * Compares characters by alfabetical order.\n   * \n   *@param cCompare2\n   *          The first char in the comparison.\n   *@param cRef\n   *          The second char in the comparison.\n   *@return A negative number, 0 or a positive number if the second char is\n   *         less, equal or greater.\n   */\n  private static int compareCharsAlphabetically(char cCompare2, char cRef) {\n    return Character.toLowerCase(cCompare2) - Character.toLowerCase(cRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}