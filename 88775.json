{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true)) {\n          events.add(event);\n          long currentTimeNanos = TriggerIntegrationTest.timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true)) {\n          events.add(event);\n          long currentTimeNanos = TriggerIntegrationTest.timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true)) {\n          events.add(event);\n          long currentTimeNanos = actionContext.getCloudManager().getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true)) {\n          events.add(event);\n          long currentTimeNanos = TriggerIntegrationTest.timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true)) {\n          events.add(event);\n          long currentTimeNanos = actionContext.getCloudManager().getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}