{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfa31dc111e7187af45764aea5c8f9ab89275e8a","date":1332442245,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":["ca0759b72726fa1c9e01f190aca788835d3fde80"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      StoredDocument luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( StorableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      StoredDocument luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( StorableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      StoredDocument luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( StorableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      \n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   * @deprecated TODO in 7.0 remove this. It was inlined into ClusteringComponent. DWS: 'ids' is ugly.\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    /*  DWS deprecation note:\n     It's only called by ClusteringComponent, and I think the \"ids\" param aspect is a bit messy and not worth supporting.\n     If someone wants a similar method they can speak up and we can add a method to SolrDocumentFetcher.\n     */\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   * @deprecated TODO in 7.0 remove this. It was inlined into ClusteringComponent. DWS: 'ids' is ugly.\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    /*  DWS deprecation note:\n     It's only called by ClusteringComponent, and I think the \"ids\" param aspect is a bit messy and not worth supporting.\n     If someone wants a similar method they can speak up and we can add a method to SolrDocumentFetcher.\n     */\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94f73754edacbaf85874797d34356b76b3c1312","date":1496425883,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   * @deprecated TODO in 7.0 remove this. It was inlined into ClusteringComponent. DWS: 'ids' is ugly.\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    /*  DWS deprecation note:\n     It's only called by ClusteringComponent, and I think the \"ids\" param aspect is a bit messy and not worth supporting.\n     If someone wants a similar method they can speak up and we can add a method to SolrDocumentFetcher.\n     */\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   * @deprecated TODO in 7.0 remove this. It was inlined into ClusteringComponent. DWS: 'ids' is ugly.\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    /*  DWS deprecation note:\n     It's only called by ClusteringComponent, and I think the \"ids\" param aspect is a bit messy and not worth supporting.\n     If someone wants a similar method they can speak up and we can add a method to SolrDocumentFetcher.\n     */\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   * @deprecated TODO in 7.0 remove this. It was inlined into ClusteringComponent. DWS: 'ids' is ugly.\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    /*  DWS deprecation note:\n     It's only called by ClusteringComponent, and I think the \"ids\" param aspect is a bit messy and not worth supporting.\n     If someone wants a similar method they can speak up and we can add a method to SolrDocumentFetcher.\n     */\n    IndexSchema schema = searcher.getSchema();\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n\n      for( IndexableField field : luceneDoc) {\n        if (null == fields || fields.contains(field.name())) {\n          SchemaField sf = schema.getField( field.name() );\n          doc.addField( field.name(), sf.getType().toObject( field ) );\n        }\n      }\n      if (docs.hasScores() && (null == fields || fields.contains(\"score\"))) {\n        doc.addField(\"score\", dit.score());\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94f73754edacbaf85874797d34356b76b3c1312":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"28288370235ed02234a64753cdbf0c6ec096304a":["63a9344cff6a72bc4c1ef080c69e10ad0635b811","b94f73754edacbaf85874797d34356b76b3c1312"],"cfa31dc111e7187af45764aea5c8f9ab89275e8a":["c26f00b574427b55127e869b935845554afde1fa"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["de548de3ce5405595899f548152d4b93ac9eb9cc","b94f73754edacbaf85874797d34356b76b3c1312"],"1d028314cced5858683a1bb4741423d0f934257b":["cfa31dc111e7187af45764aea5c8f9ab89275e8a","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5296efc4b319f5647b606629c093a94b23692c6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"b94f73754edacbaf85874797d34356b76b3c1312":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["b94f73754edacbaf85874797d34356b76b3c1312","28288370235ed02234a64753cdbf0c6ec096304a"],"c26f00b574427b55127e869b935845554afde1fa":["cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfa31dc111e7187af45764aea5c8f9ab89275e8a":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811","a5296efc4b319f5647b606629c093a94b23692c6"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}