{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","sourceNew":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","sourceOld":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["9454a6510e2db155fb01faa5c049b06ece95fab9","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}