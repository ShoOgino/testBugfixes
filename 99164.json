{"path":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkMatches(String,String).mjava","commits":[{"id":"0ee777f940c2d15973e2ef162012a94e09648ffa","date":1249272382,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkMatches(String,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestComplexPhraseQuery#checkMatches(String,String).mjava","sourceNew":"  private void checkMatches(String qString, String expectedVals)\n      throws Exception {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setFuzzyPrefixLength(1); // usually a good idea\n\n    Query q = qp.parse(qString);\n\n    HashSet expecteds = new HashSet();\n    String[] vals = expectedVals.split(\",\");\n    for (int i = 0; i < vals.length; i++) {\n      if (vals[i].length() > 0)\n        expecteds.add(vals[i]);\n    }\n\n    TopDocs td = searcher.search(q, 10);\n    ScoreDoc[] sd = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      Document doc = searcher.doc(sd[i].doc);\n      String id = doc.get(\"id\");\n      assertTrue(qString + \"matched doc#\" + id + \" not expected\", expecteds\n          .contains(id));\n      expecteds.remove(id);\n    }\n\n    assertEquals(qString + \" missing some matches \", 0, expecteds.size());\n\n  }\n\n","sourceOld":"  private void checkMatches(String qString, String expectedVals)\n      throws Exception {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setFuzzyPrefixLength(1); // usually a good idea\n\n    Query q = qp.parse(qString);\n\n    HashSet expecteds = new HashSet();\n    String[] vals = expectedVals.split(\",\");\n    for (int i = 0; i < vals.length; i++) {\n      if (vals[i].length() > 0)\n        expecteds.add(vals[i]);\n    }\n\n    TopDocs td = searcher.search(q, 10);\n    ScoreDoc[] sd = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      Document doc = searcher.doc(sd[i].doc);\n      String id = doc.get(\"id\");\n      assertTrue(qString + \"matched doc#\" + id + \" not expected\", expecteds\n          .contains(id));\n      expecteds.remove(id);\n    }\n\n    assertEquals(qString + \" missing some matches \", 0, expecteds.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkMatches(String,String).mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkMatches(String,String).mjava","sourceNew":"  private void checkMatches(String qString, String expectedVals)\n      throws Exception {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setFuzzyPrefixLength(1); // usually a good idea\n\n    Query q = qp.parse(qString);\n\n    HashSet expecteds = new HashSet();\n    String[] vals = expectedVals.split(\",\");\n    for (int i = 0; i < vals.length; i++) {\n      if (vals[i].length() > 0)\n        expecteds.add(vals[i]);\n    }\n\n    TopDocs td = searcher.search(q, 10);\n    ScoreDoc[] sd = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      Document doc = searcher.doc(sd[i].doc);\n      String id = doc.get(\"id\");\n      assertTrue(qString + \"matched doc#\" + id + \" not expected\", expecteds\n          .contains(id));\n      expecteds.remove(id);\n    }\n\n    assertEquals(qString + \" missing some matches \", 0, expecteds.size());\n\n  }\n\n","sourceOld":"  private void checkMatches(String qString, String expectedVals)\n      throws Exception {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setFuzzyPrefixLength(1); // usually a good idea\n\n    Query q = qp.parse(qString);\n\n    HashSet expecteds = new HashSet();\n    String[] vals = expectedVals.split(\",\");\n    for (int i = 0; i < vals.length; i++) {\n      if (vals[i].length() > 0)\n        expecteds.add(vals[i]);\n    }\n\n    TopDocs td = searcher.search(q, 10);\n    ScoreDoc[] sd = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      Document doc = searcher.doc(sd[i].doc);\n      String id = doc.get(\"id\");\n      assertTrue(qString + \"matched doc#\" + id + \" not expected\", expecteds\n          .contains(id));\n      expecteds.remove(id);\n    }\n\n    assertEquals(qString + \" missing some matches \", 0, expecteds.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}