{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#merge(List[Map]).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#merge(List[Map]).mjava","pathOld":"/dev/null","sourceNew":"  BucketMetrics[] merge(List<Map> all) {\n    Map<HashKey, Metric[]> bucketAccumulator = new HashMap();\n\n    for(Map top : all) {\n      List<String> ks = (List<String>)top.get(\"buckets\");\n      List<List<Map<String,Double>>> ms = (List<List<Map<String,Double>>>)top.get(\"metrics\");\n      for(int i=0; i<ks.size(); i++) {\n        String key = ks.get(i);\n        List<Map<String,Double>> bucketMs = ms.get(i);\n\n        HashKey hashKey = new HashKey(key);\n        if(bucketAccumulator.containsKey(hashKey)) {\n          Metric[] mergeMetrics = bucketAccumulator.get(hashKey);\n          for(int m=0; m<mergeMetrics.length; m++) {\n            mergeMetrics[m].update(bucketMs.get(m));\n          }\n        } else {\n          Metric[] mergedMetrics = new Metric[metrics.length];\n          for(int m=0; m<metrics.length; m++) {\n            mergedMetrics[m] = metrics[m].newInstance();\n            mergedMetrics[m].update(bucketMs.get(m));\n           }\n          bucketAccumulator.put(hashKey, mergedMetrics);\n        }\n      }\n    }\n\n    Iterator<Map.Entry<HashKey,Metric[]>> it = bucketAccumulator.entrySet().iterator();\n\n    PriorityQueue<BucketMetrics> priorityQueue = new PriorityQueue(topN, rcomp);\n\n    while(it.hasNext()) {\n      Map.Entry<HashKey, Metric[]> entry = it.next();\n      BucketMetrics bms = new BucketMetrics(entry.getKey(), entry.getValue());\n      if(priorityQueue.size() < topN) {\n        priorityQueue.add(bms);\n      } else {\n        BucketMetrics peek = priorityQueue.peek();\n        if(comp.compare(bms, peek) < 0) {\n          priorityQueue.poll();\n          priorityQueue.add(bms);\n        }\n      }\n    }\n\n    int s = priorityQueue.size();\n    BucketMetrics[] bucketMetrics = new BucketMetrics[s];\n\n    for(int i=bucketMetrics.length-1; i>=0; i--) {\n      BucketMetrics b = priorityQueue.poll();\n      bucketMetrics[i]= b;\n    }\n    return bucketMetrics;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#merge(List[Map]).mjava","sourceNew":null,"sourceOld":"  BucketMetrics[] merge(List<Map> all) {\n    Map<HashKey, Metric[]> bucketAccumulator = new HashMap();\n\n    for(Map top : all) {\n      List<String> ks = (List<String>)top.get(\"buckets\");\n      List<List<Map<String,Double>>> ms = (List<List<Map<String,Double>>>)top.get(\"metrics\");\n      for(int i=0; i<ks.size(); i++) {\n        String key = ks.get(i);\n        List<Map<String,Double>> bucketMs = ms.get(i);\n\n        HashKey hashKey = new HashKey(key);\n        if(bucketAccumulator.containsKey(hashKey)) {\n          Metric[] mergeMetrics = bucketAccumulator.get(hashKey);\n          for(int m=0; m<mergeMetrics.length; m++) {\n            mergeMetrics[m].update(bucketMs.get(m));\n          }\n        } else {\n          Metric[] mergedMetrics = new Metric[metrics.length];\n          for(int m=0; m<metrics.length; m++) {\n            mergedMetrics[m] = metrics[m].newInstance();\n            mergedMetrics[m].update(bucketMs.get(m));\n           }\n          bucketAccumulator.put(hashKey, mergedMetrics);\n        }\n      }\n    }\n\n    Iterator<Map.Entry<HashKey,Metric[]>> it = bucketAccumulator.entrySet().iterator();\n\n    PriorityQueue<BucketMetrics> priorityQueue = new PriorityQueue(topN, rcomp);\n\n    while(it.hasNext()) {\n      Map.Entry<HashKey, Metric[]> entry = it.next();\n      BucketMetrics bms = new BucketMetrics(entry.getKey(), entry.getValue());\n      if(priorityQueue.size() < topN) {\n        priorityQueue.add(bms);\n      } else {\n        BucketMetrics peek = priorityQueue.peek();\n        if(comp.compare(bms, peek) < 0) {\n          priorityQueue.poll();\n          priorityQueue.add(bms);\n        }\n      }\n    }\n\n    int s = priorityQueue.size();\n    BucketMetrics[] bucketMetrics = new BucketMetrics[s];\n\n    for(int i=bucketMetrics.length-1; i>=0; i--) {\n      BucketMetrics b = priorityQueue.poll();\n      bucketMetrics[i]= b;\n    }\n    return bucketMetrics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}