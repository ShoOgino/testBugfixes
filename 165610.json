{"path":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","date":1573537504,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a89b9d540812dfb991cad1cd713cf271ec08892c","date":1576443873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if(!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if(!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if (!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path, true);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          List<String> signatures = readSignatures(req, buf);\n          MetaData meta = _createJsonMetaData(buf, signatures);\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, meta, path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if(!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":["8476949555f799dff381770c01cfad051a264487","a89b9d540812dfb991cad1cd713cf271ec08892c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if (!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path, true);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          List<String> signatures = readSignatures(req, buf);\n          MetaData meta = _createJsonMetaData(buf, signatures);\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, meta, path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if(!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(buf));\n          List<String> signatures = readSignatures(req, buf);\n          Map<String, Object> vals = new HashMap<>();\n          vals.put(MetaData.SHA512, sha512);\n          if (signatures != null) {\n            vals.put(\"sig\", signatures);\n          }\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, new MetaData(vals), path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fbcc7055e8c549bce2c868275542860dba71a0e","date":1593065764,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#upload(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @EndPoint(\n        path = \"/cluster/files/*\",\n        method = SolrRequest.METHOD.PUT,\n        permission = PermissionNameProvider.Name.FILESTORE_WRITE_PERM)\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if (!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path, true);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          List<String> signatures = readSignatures(req, buf);\n          MetaData meta = _createJsonMetaData(buf, signatures);\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, meta, path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Command\n    public void upload(SolrQueryRequest req, SolrQueryResponse rsp) {\n      if (!coreContainer.getPackageLoader().getPackageAPI().isEnabled()) {\n        throw new RuntimeException(PackageAPI.ERR_MSG);\n      }\n      try {\n        coreContainer.getZkController().getZkClient().create(TMP_ZK_NODE, \"true\".getBytes(UTF_8),\n            CreateMode.EPHEMERAL, true);\n\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no payload\");\n        String path = req.getPathTemplateValues().get(\"*\");\n        if (path == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No path\");\n        }\n        validateName(path, true);\n        ContentStream stream = streams.iterator().next();\n        try {\n          ByteBuffer buf = SimplePostTool.inputStreamToByteArray(stream.getStream());\n          List<String> signatures = readSignatures(req, buf);\n          MetaData meta = _createJsonMetaData(buf, signatures);\n          PackageStore.FileType type = packageStore.getType(path, true);\n          if(type != PackageStore.FileType.NOFILE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,  \"Path already exists \"+ path);\n          }\n          packageStore.put(new PackageStore.FileEntry(buf, meta, path));\n          rsp.add(CommonParams.FILE, path);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Unexpected error\", e);\n      } catch (KeeperException.NodeExistsException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"A write is already in process , try later\");\n      } catch (KeeperException e) {\n        log.error(\"Unexpected error\", e);\n      } finally {\n        try {\n          coreContainer.getZkController().getZkClient().delete(TMP_ZK_NODE, -1, true);\n        } catch (Exception e) {\n          log.error(\"Unexpected error  \", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","d218decf811b7a0a4d86218c54c79c74a962374b"],"9fbcc7055e8c549bce2c868275542860dba71a0e":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["8476949555f799dff381770c01cfad051a264487"],"d218decf811b7a0a4d86218c54c79c74a962374b":["a89b9d540812dfb991cad1cd713cf271ec08892c"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","a89b9d540812dfb991cad1cd713cf271ec08892c"],"a89b9d540812dfb991cad1cd713cf271ec08892c":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fbcc7055e8c549bce2c868275542860dba71a0e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"9fbcc7055e8c549bce2c868275542860dba71a0e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","a89b9d540812dfb991cad1cd713cf271ec08892c"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","9fbcc7055e8c549bce2c868275542860dba71a0e"],"8476949555f799dff381770c01cfad051a264487":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","b0b597c65628ca9e73913a07e81691f8229bae35"],"a89b9d540812dfb991cad1cd713cf271ec08892c":["d218decf811b7a0a4d86218c54c79c74a962374b","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}