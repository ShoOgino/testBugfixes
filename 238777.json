{"path":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"/dev/null","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, removeMe, container.loader);\n          removeMe.close();\n        } finally {\n          coreMaps.removeClosedFromCloser(removeMe);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, removeMe, container.loader);\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, removeMe, container.loader);\n          removeMe.close();\n        } finally {\n          coreMaps.removeClosedFromCloser(removeMe);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, container.loader, removeMe.getCoreDescriptor(),\n              container.getCoreToOrigName(removeMe));\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, removeMe, container.loader);\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":["a837c064b67fa63a9394136e31218b908cdcf783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n         // nocommit: wtf is this?\n         // coreMaps.addPersistOneCore(cfg, container.loader, removeMe.getCoreDescriptor(),\n         //     container.getCoreToOrigName(removeMe), null);\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          coreMaps.addPersistOneCore(cfg, container.loader, removeMe.getCoreDescriptor(),\n              container.getCoreToOrigName(removeMe));\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd9e8fbc3953476b3d00c2a4759d114e90aafe8","date":1366659667,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n         // nocommit: wtf is this?\n         // coreMaps.addPersistOneCore(cfg, container.loader, removeMe.getCoreDescriptor(),\n         //     container.getCoreToOrigName(removeMe), null);\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (solrCores.getModifyLock()) { // need this so we can wait and be awoken.\n        try {\n          solrCores.getModifyLock().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = solrCores.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = solrCores.getCoreToClose()) {\n        try {\n          removeMe.close();\n        } finally {\n          solrCores.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (coreMaps.getLocker()) { // need this so we can wait and be awoken.\n        try {\n          coreMaps.getLocker().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = coreMaps.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = coreMaps.getCoreToClose()) {\n        try {\n          removeMe.close();\n        } finally {\n          coreMaps.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloserThread[CoreContainer]#run().mjava","sourceNew":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (!container.isShutDown()) {\n      synchronized (solrCores.getModifyLock()) { // need this so we can wait and be awoken.\n        try {\n          solrCores.getModifyLock().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = solrCores.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = solrCores.getCoreToClose()) {\n        try {\n          removeMe.close();\n        } finally {\n          solrCores.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // It's important that this be the _only_ thread removing things from pendingDynamicCloses!\n  // This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so\n  // there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState\n  // essentially create a single-threaded process anyway.\n  @Override\n  public void run() {\n    while (! container.isShutDown()) {\n      synchronized (solrCores.getModifyLock()) { // need this so we can wait and be awoken.\n        try {\n          solrCores.getModifyLock().wait();\n        } catch (InterruptedException e) {\n          // Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are\n          // any cores to close.\n        }\n      }\n      for (SolrCore removeMe = solrCores.getCoreToClose();\n           removeMe != null && !container.isShutDown();\n           removeMe = solrCores.getCoreToClose()) {\n        try {\n          removeMe.close();\n        } finally {\n          solrCores.removeFromPendingOps(removeMe.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"cfd9e8fbc3953476b3d00c2a4759d114e90aafe8":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["cfd9e8fbc3953476b3d00c2a4759d114e90aafe8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"cfd9e8fbc3953476b3d00c2a4759d114e90aafe8":["9409650933cc688e77e565092a25e58adfc2e18d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9409650933cc688e77e565092a25e58adfc2e18d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cfd9e8fbc3953476b3d00c2a4759d114e90aafe8"],"a837c064b67fa63a9394136e31218b908cdcf783":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}