{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","commits":[{"id":"95918c4b26e0ac2851c1de141f970c2e5c37ef95","date":1379059246,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","pathOld":"/dev/null","sourceNew":"  private JavascriptFunction(String call, Method method) {\n    this.call = call;\n    this.arguments = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.signature = Type.getMethodDescriptor(method);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9358cb2f0bbdd56de8104cddce5ba78c2acf1e6","date":1379061430,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","sourceNew":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new Error(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new Error(method + \" does not return a double.\");\n    }\n    \n    final Class<?>[] paramTypes = method.getParameterTypes();\n    for (final Class<?> paramType : paramTypes) {\n      if (paramType != double.class) {\n        throw new Error(method + \" may only take parameters of type 'double'.\");\n      }\n    }\n    \n    this.call = call;\n    this.arguments = paramTypes.length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.signature = Type.getMethodDescriptor(method);\n  }\n\n","sourceOld":"  private JavascriptFunction(String call, Method method) {\n    this.call = call;\n    this.arguments = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.signature = Type.getMethodDescriptor(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389085f24478bf7aa178002b4e4907aeda9bc56f","date":1379108316,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","sourceNew":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new Error(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new Error(method + \" does not return a double.\");\n    }\n    \n    this.call = call;\n    this.arity = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.descriptor = Type.getMethodDescriptor(method);\n  }\n\n","sourceOld":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new Error(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new Error(method + \" does not return a double.\");\n    }\n    \n    final Class<?>[] paramTypes = method.getParameterTypes();\n    for (final Class<?> paramType : paramTypes) {\n      if (paramType != double.class) {\n        throw new Error(method + \" may only take parameters of type 'double'.\");\n      }\n    }\n    \n    this.call = call;\n    this.arguments = paramTypes.length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.signature = Type.getMethodDescriptor(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20d7427b550660651d37d51c4d71e6f913084d2c","date":1379154047,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","sourceNew":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n    \n    this.call = call;\n    this.arity = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.descriptor = Type.getMethodDescriptor(method);\n  }\n\n","sourceOld":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new Error(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new Error(method + \" does not return a double.\");\n    }\n    \n    this.call = call;\n    this.arity = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.descriptor = Type.getMethodDescriptor(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db39d89549f02471cd1655286175cdb23de346b","date":1379183393,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptFunction#JavascriptFunction(String,Method).mjava","sourceNew":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  private JavascriptFunction(String call, Method method) {\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n    \n    this.call = call;\n    this.arity = method.getParameterTypes().length;\n    this.klass = Type.getInternalName(method.getDeclaringClass());\n    this.method = method.getName();\n    this.descriptor = Type.getMethodDescriptor(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"389085f24478bf7aa178002b4e4907aeda9bc56f":["f9358cb2f0bbdd56de8104cddce5ba78c2acf1e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95918c4b26e0ac2851c1de141f970c2e5c37ef95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20d7427b550660651d37d51c4d71e6f913084d2c":["389085f24478bf7aa178002b4e4907aeda9bc56f"],"f9358cb2f0bbdd56de8104cddce5ba78c2acf1e6":["95918c4b26e0ac2851c1de141f970c2e5c37ef95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db39d89549f02471cd1655286175cdb23de346b":["20d7427b550660651d37d51c4d71e6f913084d2c"]},"commit2Childs":{"389085f24478bf7aa178002b4e4907aeda9bc56f":["20d7427b550660651d37d51c4d71e6f913084d2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95918c4b26e0ac2851c1de141f970c2e5c37ef95","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95918c4b26e0ac2851c1de141f970c2e5c37ef95":["f9358cb2f0bbdd56de8104cddce5ba78c2acf1e6"],"20d7427b550660651d37d51c4d71e6f913084d2c":["0db39d89549f02471cd1655286175cdb23de346b"],"f9358cb2f0bbdd56de8104cddce5ba78c2acf1e6":["389085f24478bf7aa178002b4e4907aeda9bc56f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0db39d89549f02471cd1655286175cdb23de346b":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0db39d89549f02471cd1655286175cdb23de346b"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}