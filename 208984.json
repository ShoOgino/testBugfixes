{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#checkIntegrity().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#checkIntegrity().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = dataIn.clone();\n    clone.seek(0);\n\n    // checksum is fixed-width encoded with 20 bytes, plus 1 byte for newline (the space is included in SimpleTextUtil.CHECKSUM):\n    long footerStartPos = dataIn.length() - (SimpleTextUtil.CHECKSUM.length + 21);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while (true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (input.getFilePointer() >= footerStartPos) {\n        // Make sure we landed at precisely the right location:\n        if (input.getFilePointer() != footerStartPos) {\n          throw new CorruptIndexException(\"SimpleText failure: footer does not start at expected position current=\" + input.getFilePointer() + \" vs expected=\" + footerStartPos, input);\n        }\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointReader#checkIntegrity().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = dataIn.clone();\n    clone.seek(0);\n\n    // checksum is fixed-width encoded with 20 bytes, plus 1 byte for newline (the space is included in SimpleTextUtil.CHECKSUM):\n    long footerStartPos = dataIn.length() - (SimpleTextUtil.CHECKSUM.length + 21);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while (true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (input.getFilePointer() >= footerStartPos) {\n        // Make sure we landed at precisely the right location:\n        if (input.getFilePointer() != footerStartPos) {\n          throw new CorruptIndexException(\"SimpleText failure: footer does not start at expected position current=\" + input.getFilePointer() + \" vs expected=\" + footerStartPos, input);\n        }\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = dataIn.clone();\n    clone.seek(0);\n\n    // checksum is fixed-width encoded with 20 bytes, plus 1 byte for newline (the space is included in SimpleTextUtil.CHECKSUM):\n    long footerStartPos = dataIn.length() - (SimpleTextUtil.CHECKSUM.length + 21);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while (true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (input.getFilePointer() >= footerStartPos) {\n        // Make sure we landed at precisely the right location:\n        if (input.getFilePointer() != footerStartPos) {\n          throw new CorruptIndexException(\"SimpleText failure: footer does not start at expected position current=\" + input.getFilePointer() + \" vs expected=\" + footerStartPos, input);\n        }\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}