{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}