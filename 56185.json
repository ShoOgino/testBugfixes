{"path":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateKnownCommitPoints(List[IndexCommitWrapper]).mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateKnownCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates the state of all \"current\" commits.\n   * <p>\n   * This method is safe to call <em>after</em> delegating to ou inner <code>IndexDeletionPolicy</code>\n   * (w/o synchornizing the delegate calls) because even if the delegate decides to \n   * {@link IndexCommit#delete} a commit that a concurrent thread may wish to reserve/save, \n   * that {@link IndexCommitWrapper} will ensure that call is synchronized.  \n   * </p>\n   * \n   * @see #updateLatestCommit\n   */\n  private synchronized void updateKnownCommitPoints(final List<IndexCommitWrapper> list) {\n    assert null != list;\n    assert (list.isEmpty() || null != latestCommit) : \"Code flaw: How is latestCommit not set yet?\";\n    assert (null == latestCommit || ! latestCommit.isDeleted())\n      : \"Code flaw: How did the latestCommit get set but deleted?\";\n    assert (list.isEmpty() || latestCommit == list.get(list.size() - 1).delegate)\n      : \"Code flaw, updateLatestCommit() should have already been called\";\n    \n    final Map<Long, IndexCommit> map = new ConcurrentHashMap<>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted()) {\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n      }\n    }\n    knownCommits = map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f02bb04467ed179738a398a7da80bbbe161c16"]},"commit2Childs":{"19f02bb04467ed179738a398a7da80bbbe161c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}