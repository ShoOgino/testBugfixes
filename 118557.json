{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#computePenalty(int,int).mjava","commits":[{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#computePenalty(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#computePenalty(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#computePenalty(int,int).mjava","sourceNew":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","sourceOld":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}