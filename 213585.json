{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","commits":[{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","pathOld":"/dev/null","sourceNew":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          freqs[bufferLength] = scorer.freq();\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, min, max);\n    }\n    i = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","sourceNew":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          freqs[bufferLength] = scorer.freq();\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, null, min, max);\n    }\n    i = -1;\n  }\n\n","sourceOld":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          freqs[bufferLength] = scorer.freq();\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, min, max);\n    }\n    i = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","sourceNew":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, null, min, max);\n    }\n    i = -1;\n  }\n\n","sourceOld":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          freqs[bufferLength] = scorer.freq();\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, null, min, max);\n    }\n    i = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer#refill(int).mjava","sourceNew":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorable scorer;\n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, null, min, max);\n    }\n    i = -1;\n  }\n\n","sourceOld":"  private void refill(int target) throws IOException {\n    bufferLength = 0;\n    while (next != DocIdSetIterator.NO_MORE_DOCS && bufferLength == 0) {\n      final int min = Math.max(target, next);\n      final int max = min + docs.length;\n      next = scorer.score(new LeafCollector() {\n        Scorer scorer;\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        @Override\n        public void collect(int doc) throws IOException {\n          docs[bufferLength] = doc;\n          scores[bufferLength] = scorer.score();\n          bufferLength += 1;\n        }\n      }, null, min, max);\n    }\n    i = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}