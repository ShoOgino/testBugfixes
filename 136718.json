{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completley tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","sourceNew":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completely tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completley tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","sourceNew":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completely tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completley tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","sourceNew":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completely tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completley tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.SortFieldsCompare#testAndSetGroupValues(Object[],int).mjava","sourceNew":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completely tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Compares the SortField values of the specified contextDoc with the existing values\n     * array, and overwrites them (and returns true) if this document is the new group head in \n     * accordance with the SortFields.\n     * (otherwise returns false)\n     */\n    private boolean testAndSetGroupValues(Object[] values, int contextDoc) throws IOException {\n      Object[] stash = new Object[numClauses];\n      int lastCompare = 0;\n      int testClause = 0;\n      for (/* testClause */; testClause < numClauses; testClause++) {\n        leafFieldComparators[testClause].copy(0, contextDoc);\n        FieldComparator fcomp = fieldComparators[testClause];\n        stash[testClause] = cloneIfBytesRef(fcomp.value(0));\n        lastCompare = reverseMul[testClause] * fcomp.compareValues(stash[testClause], values[testClause]);\n        \n        if (0 != lastCompare) {\n          // no need to keep checking additional clauses\n          break;\n        }\n      }\n\n      if (0 <= lastCompare) {\n        // we're either not competitive, or we're completely tied with another doc that's already group head\n        // that's already been selected\n        return false;\n      } // else...\n      \n      // this doc is our new group head, we've already read some of the values into our stash\n      testClause++;\n      System.arraycopy(stash, 0, values, 0, testClause);\n      // read the remaining values we didn't need to test\n      for (int copyClause = testClause; copyClause < numClauses; copyClause++) {\n        leafFieldComparators[copyClause].copy(0, contextDoc);\n        values[copyClause] = cloneIfBytesRef(fieldComparators[copyClause].value(0));\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0325de99180d346d61d36938843a5c8451fe26ae","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0325de99180d346d61d36938843a5c8451fe26ae","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["0325de99180d346d61d36938843a5c8451fe26ae"]},"commit2Childs":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["50dfd19525c8d73e856dca6edb64b7aea074037f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}