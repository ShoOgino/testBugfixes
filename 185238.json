{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"/dev/null","sourceNew":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          GeoPoint start = points.get(points.size()-1).point;\n          PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        }\n        SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        final GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          final GeoPoint start = points.get(points.size()-1).point;\n          final PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        }\n        final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","sourceOld":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          GeoPoint start = points.get(points.size()-1).point;\n          PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        }\n        SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        final GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          final GeoPoint start = points.get(points.size()-1).point;\n          final PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        } else {\n            // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n            // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n            double newLat = lat + cutoffAngle;\n            double newLon = lon;\n            if (newLat > Math.PI * 0.5) {\n                newLat = Math.PI - newLat;\n                newLon += Math.PI;\n            }\n            while (newLon > Math.PI) {\n                newLon -= Math.PI * 2.0;\n            }\n            final GeoPoint edgePoint = new GeoPoint(newLat,newLon);\n            this.edgePoints = new GeoPoint[]{edgePoint};\n        }\n        final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","sourceOld":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        final GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          final GeoPoint start = points.get(points.size()-1).point;\n          final PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        }\n        final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    final GeoPoint end = new GeoPoint(lat, lon);\n    if (points.size() > 0) {\n      final GeoPoint start = points.get(points.size() - 1).point;\n      final PathSegment ps = new PathSegment(start, end, cutoffOffset, cutoffAngle, chordDistance);\n      // Check for degeneracy; if the segment is degenerate, don't include the point\n      if (ps.isDegenerate())\n        return;\n      segments.add(ps);\n    } else {\n      // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n    final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n    points.add(se);\n  }\n\n","sourceOld":"    public void addPoint(double lat, double lon)\n    {\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of range\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        final GeoPoint end = new GeoPoint(lat,lon);\n        if (points.size() > 0) {\n          final GeoPoint start = points.get(points.size()-1).point;\n          final PathSegment ps = new PathSegment(start,end,cutoffOffset,cutoffAngle,chordDistance);\n          // Check for degeneracy; if the segment is degenerate, don't include the point\n          if (ps.isDegenerate())\n              return;\n          segments.add(ps);\n        } else {\n            // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n            // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n            double newLat = lat + cutoffAngle;\n            double newLon = lon;\n            if (newLat > Math.PI * 0.5) {\n                newLat = Math.PI - newLat;\n                newLon += Math.PI;\n            }\n            while (newLon > Math.PI) {\n                newLon -= Math.PI * 2.0;\n            }\n            final GeoPoint edgePoint = new GeoPoint(newLat,newLon);\n            this.edgePoints = new GeoPoint[]{edgePoint};\n        }\n        final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n        points.add(se);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"/dev/null","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    final GeoPoint end = new GeoPoint(lat, lon);\n    if (points.size() > 0) {\n      final GeoPoint start = points.get(points.size() - 1).point;\n      final PathSegment ps = new PathSegment(start, end, cutoffOffset, cutoffAngle, chordDistance);\n      // Check for degeneracy; if the segment is degenerate, don't include the point\n      if (ps.isDegenerate())\n        return;\n      segments.add(ps);\n    } else {\n      // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n    final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n    points.add(se);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","sourceOld":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    final GeoPoint end = new GeoPoint(lat, lon);\n    if (points.size() > 0) {\n      final GeoPoint start = points.get(points.size() - 1).point;\n      final PathSegment ps = new PathSegment(start, end, cutoffOffset, cutoffAngle, chordDistance);\n      // Check for degeneracy; if the segment is degenerate, don't include the point\n      if (ps.isDegenerate())\n        return;\n      segments.add(ps);\n    } else {\n      // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n    final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n    points.add(se);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","sourceOld":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    final GeoPoint end = new GeoPoint(lat, lon);\n    if (points.size() > 0) {\n      final GeoPoint start = points.get(points.size() - 1).point;\n      final PathSegment ps = new PathSegment(start, end, cutoffOffset, cutoffAngle, chordDistance);\n      // Check for degeneracy; if the segment is degenerate, don't include the point\n      if (ps.isDegenerate())\n        return;\n      segments.add(ps);\n    } else {\n      // First point.  We compute the basic set of edgepoints here because we've got the lat and lon available.\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n    final SegmentEndpoint se = new SegmentEndpoint(end, originDistance, cutoffOffset, cutoffAngle, chordDistance);\n    points.add(se);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call addPoint() if done() already called\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","sourceOld":"  public void addPoint(double lat, double lon) {\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#addPoint(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#addPoint(double,double).mjava","sourceNew":"  public void addPoint(double lat, double lon) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call addPoint() if done() already called\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","sourceOld":"  public void addPoint(double lat, double lon) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call addPoint() if done() already called\");\n    points.add(new GeoPoint(planetModel, lat, lon));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}