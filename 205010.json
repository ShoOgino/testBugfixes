{"path":"src/common/org/apache/solr/common/util/Hash#lookup3ycs64(CharSequence,int,int,long).mjava","commits":[{"id":"80c633e661becbcb6deb6ea2ef4588d230102f50","date":1234308117,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/Hash#lookup3ycs64(CharSequence,int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  /**<p>This is the 64 bit version of lookup3ycs, corresponding to Bob Jenkin's\n   * lookup3 hashlittle2 with initval biased by -(numCodePoints<<2).  It is equivalent\n   * to lookup3ycs in that if the high bits of initval==0, then the low bits of the\n   * result will be the same as lookup3ycs.\n   * </p>\n   */\n  public static long lookup3ycs64(CharSequence s, int start, int end, long initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (int)initval;\n    c += (int)(initval>>>32);\n    // only difference from lookup3 is that \"+ (length<<2)\" is missing\n    // since we don't know the number of code points to start with,\n    // and don't want to have to pre-scan the string to find out.\n\n    int i=start;\n    boolean mixed=true;  // have the 3 state variables been adequately mixed?\n    for(;;) {\n      if (i>= end) break;\n      mixed=false;\n      char ch;\n      ch = s.charAt(i++);\n      a += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      b += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      c += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n      mixed=true;\n    }\n\n\n    if (!mixed) {\n      // final(a,b,c)\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n    }\n\n    return c + (((long)b) << 32);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Hash#lookup3ycs64(CharSequence,int,int,long).mjava","pathOld":"src/common/org/apache/solr/common/util/Hash#lookup3ycs64(CharSequence,int,int,long).mjava","sourceNew":"  /**<p>This is the 64 bit version of lookup3ycs, corresponding to Bob Jenkin's\n   * lookup3 hashlittle2 with initval biased by -(numCodePoints<<2).  It is equivalent\n   * to lookup3ycs in that if the high bits of initval==0, then the low bits of the\n   * result will be the same as lookup3ycs.\n   * </p>\n   */\n  public static long lookup3ycs64(CharSequence s, int start, int end, long initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (int)initval;\n    c += (int)(initval>>>32);\n    // only difference from lookup3 is that \"+ (length<<2)\" is missing\n    // since we don't know the number of code points to start with,\n    // and don't want to have to pre-scan the string to find out.\n\n    int i=start;\n    boolean mixed=true;  // have the 3 state variables been adequately mixed?\n    for(;;) {\n      if (i>= end) break;\n      mixed=false;\n      char ch;\n      ch = s.charAt(i++);\n      a += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      b += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      c += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n      mixed=true;\n    }\n\n\n    if (!mixed) {\n      // final(a,b,c)\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n    }\n\n    return c + (((long)b) << 32);\n  }\n\n","sourceOld":"  /**<p>This is the 64 bit version of lookup3ycs, corresponding to Bob Jenkin's\n   * lookup3 hashlittle2 with initval biased by -(numCodePoints<<2).  It is equivalent\n   * to lookup3ycs in that if the high bits of initval==0, then the low bits of the\n   * result will be the same as lookup3ycs.\n   * </p>\n   */\n  public static long lookup3ycs64(CharSequence s, int start, int end, long initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (int)initval;\n    c += (int)(initval>>>32);\n    // only difference from lookup3 is that \"+ (length<<2)\" is missing\n    // since we don't know the number of code points to start with,\n    // and don't want to have to pre-scan the string to find out.\n\n    int i=start;\n    boolean mixed=true;  // have the 3 state variables been adequately mixed?\n    for(;;) {\n      if (i>= end) break;\n      mixed=false;\n      char ch;\n      ch = s.charAt(i++);\n      a += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      b += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n      ch = s.charAt(i++);\n      c += Character.isHighSurrogate(ch) && i< end ? Character.toCodePoint(ch, s.charAt(i++)) : ch;\n      if (i>= end) break;\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n      mixed=true;\n    }\n\n\n    if (!mixed) {\n      // final(a,b,c)\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n    }\n\n    return c + (((long)b) << 32);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80c633e661becbcb6deb6ea2ef4588d230102f50":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}