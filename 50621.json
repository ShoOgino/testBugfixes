{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Returns a IndexReader reading the index in the given\n   *  Directory, with readOnly=true.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param directory the index directory\n   * @param commit the commit point to open\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, final IndexCommit commit, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(directory, commit, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":6,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Returns a IndexReader reading the index in the given\n   *  Directory\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit} and termInfosIndexDivisor.\n   * @param commit the commit point to open\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(commit.getDirectory(), commit, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}.  You should pass readOnly=true,\n   *  since it gives much better concurrent performance,\n   *  unless you intend to do write operations (delete\n   *  documents or change norms) with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}