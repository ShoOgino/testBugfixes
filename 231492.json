{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testSimple().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    OriginalQueryParserHelper mfqp = new OriginalQueryParserHelper();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    OriginalQueryParserHelper mfqp = new OriginalQueryParserHelper();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}