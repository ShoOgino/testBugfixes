{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive)\n  {\n    boolean isDate = false, isNumber = false;\n\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n      isDate = true;\n    }\n    catch (Exception e) { }\n\n    if (!isDate) {\n      // @@@ Add number support\n    }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199fcfef6092b06089a588bf55391b8ce5aea8f5","date":1064896716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    boolean isDate = false;\n\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n      isDate = true;\n    }\n    catch (Exception e) { }\n\n    if (!isDate) {\n      // @@@ Add number support\n    }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive)\n  {\n    boolean isDate = false, isNumber = false;\n\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n      isDate = true;\n    }\n    catch (Exception e) { }\n\n    if (!isDate) {\n      // @@@ Add number support\n    }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3029a7a46013b533900f159ca12ee4f27e0de5c","date":1065150762,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    boolean isDate = false;\n\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n      isDate = true;\n    }\n    catch (Exception e) { }\n\n    if (!isDate) {\n      // @@@ Add number support\n    }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a744f34b732efe0beb11df92bde24ccc01460dc","date":1094656002,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d","date":1097573772,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getRangeQuery(String, String, String, boolean)}\n   */\n  protected Query getRangeQuery(String field,\n      Analyzer analyzer,\n      String part1,\n      String part2,\n      boolean inclusive) throws ParseException {\n    return getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getRangeQuery(String, String, String, boolean)}\n   */\n  protected Query getRangeQuery(String field,\n      Analyzer analyzer,\n      String part1,\n      String part2,\n      boolean inclusive) throws ParseException {\n    return getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["f3029a7a46013b533900f159ca12ee4f27e0de5c"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"f3029a7a46013b533900f159ca12ee4f27e0de5c":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"f3029a7a46013b533900f159ca12ee4f27e0de5c":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["f3029a7a46013b533900f159ca12ee4f27e0de5c"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}