{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"/dev/null","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"/dev/null","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new ConstantScoreScorer(scorer, theScore));\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new ConstantScoreScorer(scorer, theScore));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public float maxScore() {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public float maxScore() {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public float maxScore() {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(LeafCollector).mjava","sourceNew":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorable(scorer) {\n            @Override\n            public float score() {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","sourceOld":"    private LeafCollector wrapCollector(LeafCollector collector) {\n      return new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          in.setScorer(new FilterScorer(scorer) {\n            @Override\n            public float score() throws IOException {\n              return theScore;\n            }\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return theScore;\n            }\n          });\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["51f5280f31484820499077f41fcdfe92d527d9dc"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["523cc6563c99a55527ef7993efc5413c6648852d"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"51f5280f31484820499077f41fcdfe92d527d9dc":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","51f5280f31484820499077f41fcdfe92d527d9dc"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"523cc6563c99a55527ef7993efc5413c6648852d":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}