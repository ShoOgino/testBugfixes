{"path":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"c26f00b574427b55127e869b935845554afde1fa":["9ce83f0d72db4660fd277a9d357698004d8f4336","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}