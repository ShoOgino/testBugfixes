{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","commits":[{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setIndexOptions(fi.indexOptions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setIndexOptions(fi.indexOptions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}