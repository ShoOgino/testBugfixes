{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","commits":[{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    @SuppressWarnings({\"rawtypes\"})\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FrequencyTableEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    @SuppressWarnings({\"rawtypes\"})\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Tuple tuple = new Tuple();\n      tuple.put(\"value\", value.longValue());\n      tuple.put(\"count\", frequency.getCount(value));\n      tuple.put(\"cumFreq\", frequency.getCumFreq(value));\n      tuple.put(\"cumPct\", frequency.getCumPct(value));\n      tuple.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(tuple);\n    }\n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n\n    List<?> sourceValues;\n\n    if(values.length == 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);\n    }\n    else\n    {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    Frequency frequency = new Frequency();\n\n    for(Object o : sourceValues) {\n      Number number = (Number)o;\n      frequency.addValue(number.longValue());\n    }\n\n    List<Tuple> histogramBins = new ArrayList<>();\n\n    @SuppressWarnings({\"rawtypes\"})\n    Iterator iterator = frequency.valuesIterator();\n\n    while(iterator.hasNext()){\n      Long value = (Long)iterator.next();\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"value\", value.longValue());\n      map.put(\"count\", frequency.getCount(value));\n      map.put(\"cumFreq\", frequency.getCumFreq(value));\n      map.put(\"cumPct\", frequency.getCumPct(value));\n      map.put(\"pct\", frequency.getPct(value));\n      histogramBins.add(new Tuple(map));\n    }\n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}