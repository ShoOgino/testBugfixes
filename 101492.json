{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtimeReload().mjava","commits":[{"id":"27540936a0520bb54b2173565e1d0b473602e47f","date":1342641911,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtimeReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    for (int i=0; i<10; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n    }\n\n\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e7fde54110da1e9584f43efd5192263fc8b6ef","date":1342641956,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtimeReload().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    for (int i=0; i<10; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n    }\n\n\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27540936a0520bb54b2173565e1d0b473602e47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7e7fde54110da1e9584f43efd5192263fc8b6ef":["27540936a0520bb54b2173565e1d0b473602e47f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7e7fde54110da1e9584f43efd5192263fc8b6ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27540936a0520bb54b2173565e1d0b473602e47f"],"27540936a0520bb54b2173565e1d0b473602e47f":["b7e7fde54110da1e9584f43efd5192263fc8b6ef"],"b7e7fde54110da1e9584f43efd5192263fc8b6ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}