{"path":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field)\n          throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e444951e98c00cc6f00fdbc2e00286be07067f8","date":1091825429,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field)\n          throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReader == null) \n      return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReader == null) \n      return null;\n\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00d7c15e6143f079f590d868778a4b4409ecd89a","date":1101076369,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector || termVectorsReaderOrig == null) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["00d7c15e6143f079f590d868778a4b4409ecd89a"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"00d7c15e6143f079f590d868778a4b4409ecd89a":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"8a9e385641d717e641408d8fbbc62be8fc766357":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"3e444951e98c00cc6f00fdbc2e00286be07067f8":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["3e444951e98c00cc6f00fdbc2e00286be07067f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["328c1568e471f0c6eaa49ec00334ca59e573710f"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["3e444951e98c00cc6f00fdbc2e00286be07067f8"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["00d7c15e6143f079f590d868778a4b4409ecd89a"],"00d7c15e6143f079f590d868778a4b4409ecd89a":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e444951e98c00cc6f00fdbc2e00286be07067f8":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}