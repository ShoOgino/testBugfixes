{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","commits":[{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreak() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.STRING)));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<1000;id++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", id));\n      String value;\n      if (id < 500) {\n        value = \"bar2\";\n      } else {\n        value = \"bar1\";\n      }\n      doc.add(new SortedDocValuesField(\"foo\", new BytesRef(value)));\n      w.addDocument(doc);\n      if (id == 500) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    for(int docID=0;docID<1000;docID++) {\n      int expectedID;\n      if (docID < 500) {\n        expectedID = 500 + docID;\n      } else {\n        expectedID = docID - 500;\n      }\n      assertEquals(expectedID, r.document(docID).getField(\"id\").numericValue().intValue());\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreak() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.STRING)));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<1000;id++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", id));\n      String value;\n      if (id < 500) {\n        value = \"bar2\";\n      } else {\n        value = \"bar1\";\n      }\n      doc.add(new SortedDocValuesField(\"foo\", new BytesRef(value)));\n      w.addDocument(doc);\n      if (id == 500) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    for(int docID=0;docID<1000;docID++) {\n      int expectedID;\n      if (docID < 500) {\n        expectedID = 500 + docID;\n      } else {\n        expectedID = docID - 500;\n      }\n      assertEquals(expectedID, r.document(docID).getField(\"id\").numericValue().intValue());\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreak() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.STRING)));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<1000;id++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", id));\n      String value;\n      if (id < 500) {\n        value = \"bar2\";\n      } else {\n        value = \"bar1\";\n      }\n      doc.add(new SortedDocValuesField(\"foo\", new BytesRef(value)));\n      w.addDocument(doc);\n      if (id == 500) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    for(int docID=0;docID<1000;docID++) {\n      int expectedID;\n      if (docID < 500) {\n        expectedID = 500 + docID;\n      } else {\n        expectedID = docID - 500;\n      }\n      assertEquals(expectedID, r.document(docID).getField(\"id\").numericValue().intValue());\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreak() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.STRING)));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<1000;id++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", id));\n      String value;\n      if (id < 500) {\n        value = \"bar2\";\n      } else {\n        value = \"bar1\";\n      }\n      doc.add(new SortedDocValuesField(\"foo\", new BytesRef(value)));\n      w.addDocument(doc);\n      if (id == 500) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    for(int docID=0;docID<1000;docID++) {\n      int expectedID;\n      if (docID < 500) {\n        expectedID = 500 + docID;\n      } else {\n        expectedID = docID - 500;\n      }\n      assertEquals(expectedID, r.document(docID).getField(\"id\").numericValue().intValue());\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testTieBreak().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreak() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.STRING)));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<1000;id++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", id));\n      String value;\n      if (id < 500) {\n        value = \"bar2\";\n      } else {\n        value = \"bar1\";\n      }\n      doc.add(new SortedDocValuesField(\"foo\", new BytesRef(value)));\n      w.addDocument(doc);\n      if (id == 500) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    for(int docID=0;docID<1000;docID++) {\n      int expectedID;\n      if (docID < 500) {\n        expectedID = 500 + docID;\n      } else {\n        expectedID = docID - 500;\n      }\n      assertEquals(expectedID, r.document(docID).getField(\"id\").numericValue().intValue());\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e03940e6e9044943de4b7ac08f8581da37a9534"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5e03940e6e9044943de4b7ac08f8581da37a9534","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}