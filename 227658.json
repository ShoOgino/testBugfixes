{"path":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","commits":[{"id":"c9d6e41db27d65fefe44a81b13acf5a5097a166b","date":1144591501,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = new SolrQueryParser(schema, defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = new SolrQueryParser(schema, defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = new SolrQueryParser(schema, defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1d1f748be6299a4bb58280fa1697824edc82c6","date":1172182682,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = new SolrQueryParser(schema, defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isTraceEnabled() ) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing Lucene query\", e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isTraceEnabled() ) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing Lucene query\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, IndexSchema schema) {\n    try {\n      Query query = schema.getSolrQueryParser(defaultField).parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing Lucene query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["c9d6e41db27d65fefe44a81b13acf5a5097a166b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32ef722831135736529762b4b97a13dd58b06f66":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c9d6e41db27d65fefe44a81b13acf5a5097a166b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c9d6e41db27d65fefe44a81b13acf5a5097a166b"],"c9d6e41db27d65fefe44a81b13acf5a5097a166b":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["32ef722831135736529762b4b97a13dd58b06f66"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}