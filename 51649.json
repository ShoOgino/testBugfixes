{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointsReader,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n      MutablePointValues reader, int from, int to,\n      IndexOutput out,\n      byte[] minPackedValue, byte[] maxPackedValue,\n      byte[] splitPackedValues,\n      long[] leafBlockFPs,\n      int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n      MutablePointsReader reader, int from, int to,\n      IndexOutput out,\n      byte[] minPackedValue, byte[] maxPackedValue,\n      byte[] splitPackedValues,\n      long[] leafBlockFPs,\n      int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n      MutablePointValues reader, int from, int to,\n      IndexOutput out,\n      byte[] minPackedValue, byte[] maxPackedValue,\n      byte[] splitPackedValues,\n      long[] leafBlockFPs,\n      int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n      MutablePointValues reader, int from, int to,\n      IndexOutput out,\n      byte[] minPackedValue, byte[] maxPackedValue,\n      byte[] splitPackedValues,\n      long[] leafBlockFPs,\n      int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly; this method is used\n   * when we are writing a new segment directly from IndexWriter's indexing buffer (MutablePointsReader). */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      assert scratchOut.getPosition() == 0;\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(scratchOut, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(scratchOut, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(scratchOut, commonPrefixLengths, count, sortedDim, packedValues);\n      \n      out.writeBytes(scratchOut.getBytes(), 0, scratchOut.getPosition());\n      scratchOut.reset();\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly; this method is used\n   * when we are writing a new segment directly from IndexWriter's indexing buffer (MutablePointsReader). */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      assert scratchOut.getPosition() == 0;\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(scratchOut, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(scratchOut, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(scratchOut, commonPrefixLengths, count, sortedDim, packedValues);\n      \n      out.writeBytes(scratchOut.getBytes(), 0, scratchOut.getPosition());\n      scratchOut.reset();\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly. */\n  private void build(int nodeID, int leafNodeOffset,\n      MutablePointValues reader, int from, int to,\n      IndexOutput out,\n      byte[] minPackedValue, byte[] maxPackedValue,\n      byte[] splitPackedValues,\n      long[] leafBlockFPs,\n      int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues);\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],int[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly; this method is used\n   * when we are writing a new segment directly from IndexWriter's indexing buffer (MutablePointsReader). */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     int[] parentSplits,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      assert scratchOut.getPosition() == 0;\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(scratchOut, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(scratchOut, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(scratchOut, commonPrefixLengths, count, sortedDim, packedValues);\n      \n      out.writeBytes(scratchOut.getBytes(), 0, scratchOut.getPosition());\n      scratchOut.reset();\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue, parentSplits);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      parentSplits[splitDim]++;\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, parentSplits,\n          splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, parentSplits,\n          splitPackedValues, leafBlockFPs, spareDocIds);\n      parentSplits[splitDim]--;\n    }\n  }\n\n","sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly; this method is used\n   * when we are writing a new segment directly from IndexWriter's indexing buffer (MutablePointsReader). */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      assert scratchOut.getPosition() == 0;\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(scratchOut, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(scratchOut, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(scratchOut, commonPrefixLengths, count, sortedDim, packedValues);\n      \n      out.writeBytes(scratchOut.getBytes(), 0, scratchOut.getPosition());\n      scratchOut.reset();\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,MutablePointValues,int,int,IndexOutput,byte[],byte[],byte[],long[],int[]).mjava","sourceNew":null,"sourceOld":"  /* Recursively reorders the provided reader and writes the bkd-tree on the fly; this method is used\n   * when we are writing a new segment directly from IndexWriter's indexing buffer (MutablePointsReader). */\n  private void build(int nodeID, int leafNodeOffset,\n                     MutablePointValues reader, int from, int to,\n                     IndexOutput out,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n      // leaf node\n      final int count = to - from;\n      assert count <= maxPointsInLeafNode;\n\n      // Compute common prefixes\n      Arrays.fill(commonPrefixLengths, bytesPerDim);\n      reader.getValue(from, scratchBytesRef1);\n      for (int i = from + 1; i < to; ++i) {\n        reader.getValue(i, scratchBytesRef2);\n        for (int dim=0;dim<numDims;dim++) {\n          final int offset = dim * bytesPerDim;\n          for(int j=0;j<commonPrefixLengths[dim];j++) {\n            if (scratchBytesRef1.bytes[scratchBytesRef1.offset+offset+j] != scratchBytesRef2.bytes[scratchBytesRef2.offset+offset+j]) {\n              commonPrefixLengths[dim] = j;\n              break;\n            }\n          }\n        }\n      }\n\n      // Find the dimension that has the least number of unique bytes at commonPrefixLengths[dim]\n      FixedBitSet[] usedBytes = new FixedBitSet[numDims];\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      for (int i = from + 1; i < to; ++i) {\n        for (int dim=0;dim<numDims;dim++) {\n          if (usedBytes[dim] != null) {\n            byte b = reader.getByteAt(i, dim * bytesPerDim + commonPrefixLengths[dim]);\n            usedBytes[dim].set(Byte.toUnsignedInt(b));\n          }\n        }\n      }\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      for (int dim = 0; dim < numDims; ++dim) {\n        if (usedBytes[dim] != null) {\n          final int cardinality = usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort by sortedDim\n      MutablePointsReaderUtils.sortByDim(sortedDim, bytesPerDim, commonPrefixLengths,\n          reader, from, to, scratchBytesRef1, scratchBytesRef2);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n\n      assert scratchOut.getPosition() == 0;\n\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = from; i < to; ++i) {\n        docIDs[i - from] = reader.getDocID(i);\n      }\n      //System.out.println(\"writeLeafBlock pos=\" + out.getFilePointer());\n      writeLeafBlockDocs(scratchOut, docIDs, 0, count);\n\n      // Write the common prefixes:\n      reader.getValue(from, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset, scratch1, 0, packedBytesLength);\n      writeCommonPrefixes(scratchOut, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        @Override\n        public BytesRef apply(int i) {\n          reader.getValue(from + i, scratchBytesRef1);\n          return scratchBytesRef1;\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(scratchOut, commonPrefixLengths, count, sortedDim, packedValues);\n      \n      out.writeBytes(scratchOut.getBytes(), 0, scratchOut.getPosition());\n      scratchOut.reset();\n\n    } else {\n      // inner node\n\n      // compute the split dimension and partition around it\n      final int splitDim = split(minPackedValue, maxPackedValue);\n      final int mid = (from + to + 1) >>> 1;\n\n      int commonPrefixLen = bytesPerDim;\n      for (int i = 0; i < bytesPerDim; ++i) {\n        if (minPackedValue[splitDim * bytesPerDim + i] != maxPackedValue[splitDim * bytesPerDim + i]) {\n          commonPrefixLen = i;\n          break;\n        }\n      }\n\n      MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLen,\n          reader, from, to, mid, scratchBytesRef1, scratchBytesRef2);\n\n      // set the split value\n      final int address = nodeID * (1+bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      reader.getValue(mid, scratchBytesRef1);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = Arrays.copyOf(minPackedValue, packedBytesLength);\n      byte[] maxSplitPackedValue = Arrays.copyOf(maxPackedValue, packedBytesLength);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + splitDim * bytesPerDim,\n          maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      // recurse\n      build(nodeID * 2, leafNodeOffset, reader, from, mid, out,\n          minPackedValue, maxSplitPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n      build(nodeID * 2 + 1, leafNodeOffset, reader, mid, to, out,\n          minSplitPackedValue, maxPackedValue, splitPackedValues, leafBlockFPs, spareDocIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9856095f7afb5a607bf5e65077615ed91273508c","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}