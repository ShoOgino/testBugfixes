{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    CountingListBuilder counting = new CountingListBuilder(categoryListParams, indexingParams, taxonomyWriter);\n    // CountingListBuilder modifies the ordinals array, by e.g. adding parent ordinals, sorting etc.\n    // Therefore first build the associations list and only afterwards the counting list.\n    final Map<String,BytesRef> res = associations.build(ordinals, categories);\n    res.putAll(counting.build(ordinals, categories));\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    CountingListBuilder counting = new CountingListBuilder(categoryListParams, indexingParams, taxonomyWriter);\n    // CountingListBuilder modifies the ordinals array, by e.g. adding parent ordinals, sorting etc.\n    // Therefore first build the associations list and only afterwards the counting list.\n    final Map<String,BytesRef> res = associations.build(ordinals, categories);\n    res.putAll(counting.build(ordinals, categories));\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    return associations.build(ordinals, categories);\n  }\n\n","sourceOld":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    CountingListBuilder counting = new CountingListBuilder(categoryListParams, indexingParams, taxonomyWriter);\n    // CountingListBuilder modifies the ordinals array, by e.g. adding parent ordinals, sorting etc.\n    // Therefore first build the associations list and only afterwards the counting list.\n    final Map<String,BytesRef> res = associations.build(ordinals, categories);\n    res.putAll(counting.build(ordinals, categories));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    return associations.build(ordinals, categories);\n  }\n\n","sourceOld":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    CountingListBuilder counting = new CountingListBuilder(categoryListParams, indexingParams, taxonomyWriter);\n    // CountingListBuilder modifies the ordinals array, by e.g. adding parent ordinals, sorting etc.\n    // Therefore first build the associations list and only afterwards the counting list.\n    final Map<String,BytesRef> res = associations.build(ordinals, categories);\n    res.putAll(counting.build(ordinals, categories));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<FacetLabel> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    return associations.build(ordinals, categories);\n  }\n\n","sourceOld":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    return associations.build(ordinals, categories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#getCategoryListData(CategoryListParams,IntsRef,Iterable[CategoryPath]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Map<String,BytesRef> getCategoryListData(CategoryListParams categoryListParams, IntsRef ordinals,\n      Iterable<CategoryPath> categories) throws IOException {\n    AssociationsListBuilder associations = new AssociationsListBuilder((CategoryAssociationsContainer) categories);\n    return associations.build(ordinals, categories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"]},"commit2Childs":{"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","4e6354dd7c71fe122926fc53d7d29f715b1283db","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}