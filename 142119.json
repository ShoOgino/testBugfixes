{"path":"lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#close().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n\n      // Close all subs\n      IOUtils.close(formats.values());\n\n      // Write _X.per: maps field name -> format name and\n      // format name -> format id\n      final String mapFileName = IndexFileNames.segmentFileName(segmentWriteState.segmentName, segmentWriteState.segmentSuffix, PER_FIELD_EXTENSION);\n      final IndexOutput out = segmentWriteState.directory.createOutput(mapFileName, segmentWriteState.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, PER_FIELD_NAME, VERSION_LATEST);\n\n        // format name -> int id\n        out.writeVInt(formats.size());\n        for(Map.Entry<PostingsFormat,FieldsConsumerAndID> ent : formats.entrySet()) {\n          out.writeString(ent.getValue().segmentSuffix);\n          out.writeString(ent.getKey().getName());\n        }\n\n        // field name -> format name\n        out.writeVInt(fieldToFormat.size());\n        for(Map.Entry<String,PostingsFormat> ent : fieldToFormat.entrySet()) {\n          out.writeString(ent.getKey());\n          out.writeString(ent.getValue().getName());\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        } else {\n          IOUtils.close(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n\n      // Close all subs\n      IOUtils.close(formats.values());\n\n      // Write _X.per: maps field name -> format name and\n      // format name -> format id\n      final String mapFileName = IndexFileNames.segmentFileName(segmentWriteState.segmentName, segmentWriteState.segmentSuffix, PER_FIELD_EXTENSION);\n      final IndexOutput out = segmentWriteState.directory.createOutput(mapFileName, segmentWriteState.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, PER_FIELD_NAME, VERSION_LATEST);\n\n        // format name -> int id\n        out.writeVInt(formats.size());\n        for(Map.Entry<PostingsFormat,FieldsConsumerAndID> ent : formats.entrySet()) {\n          out.writeString(ent.getValue().segmentSuffix);\n          out.writeString(ent.getKey().getName());\n        }\n\n        // field name -> format name\n        out.writeVInt(fieldToFormat.size());\n        for(Map.Entry<String,PostingsFormat> ent : fieldToFormat.entrySet()) {\n          out.writeString(ent.getKey());\n          out.writeString(ent.getValue().getName());\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        } else {\n          IOUtils.close(out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n\n      // Close all subs\n      IOUtils.close(formats.values());\n\n      // Write _X.per: maps field name -> format name and\n      // format name -> format id\n      final String mapFileName = IndexFileNames.segmentFileName(segmentWriteState.segmentName, segmentWriteState.segmentSuffix, PER_FIELD_EXTENSION);\n      final IndexOutput out = segmentWriteState.directory.createOutput(mapFileName, segmentWriteState.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, PER_FIELD_NAME, VERSION_LATEST);\n\n        // format name -> int id\n        out.writeVInt(formats.size());\n        for(Map.Entry<PostingsFormat,FieldsConsumerAndID> ent : formats.entrySet()) {\n          out.writeString(ent.getValue().segmentSuffix);\n          out.writeString(ent.getKey().getName());\n        }\n\n        // field name -> format name\n        out.writeVInt(fieldToFormat.size());\n        for(Map.Entry<String,PostingsFormat> ent : fieldToFormat.entrySet()) {\n          out.writeString(ent.getKey());\n          out.writeString(ent.getValue().getName());\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        } else {\n          IOUtils.close(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n\n      // Close all subs\n      IOUtils.close(formats.values());\n\n      // Write _X.per: maps field name -> format name and\n      // format name -> format id\n      final String mapFileName = IndexFileNames.segmentFileName(segmentWriteState.segmentName, segmentWriteState.segmentSuffix, PER_FIELD_EXTENSION);\n      final IndexOutput out = segmentWriteState.directory.createOutput(mapFileName, segmentWriteState.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, PER_FIELD_NAME, VERSION_LATEST);\n\n        // format name -> int id\n        out.writeVInt(formats.size());\n        for(Map.Entry<PostingsFormat,FieldsConsumerAndID> ent : formats.entrySet()) {\n          out.writeString(ent.getValue().segmentSuffix);\n          out.writeString(ent.getKey().getName());\n        }\n\n        // field name -> format name\n        out.writeVInt(fieldToFormat.size());\n        for(Map.Entry<String,PostingsFormat> ent : fieldToFormat.entrySet()) {\n          out.writeString(ent.getKey());\n          out.writeString(ent.getValue().getName());\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        } else {\n          IOUtils.close(out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}