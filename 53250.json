{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","sourceNew":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndvcf.nextDoc());\n      assertEquals(i, ndvf.nextDoc());\n      assertEquals(ndvcf.longValue(), ndvf.longValue()*2);\n    }\n  }\n\n","sourceOld":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","sourceNew":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndvcf.nextDoc());\n      assertEquals(i, ndvf.nextDoc());\n      assertEquals(ndvcf.longValue(), ndvf.longValue()*2);\n    }\n  }\n\n","sourceOld":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(LeafReader,String,String).mjava","sourceNew":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndvcf.nextDoc());\n      assertEquals(i, ndvf.nextDoc());\n      assertEquals(ndvcf.longValue(), ndvf.longValue()*2);\n    }\n  }\n\n","sourceOld":"  private void assertNumericDocValues(LeafReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}