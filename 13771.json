{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","commits":[{"id":"6e39939cf282e1d1d540335185b8ef575e4b5272","date":1072205847,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = (char) ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e64a71406348a5942a2166256238aff8313d0914"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c37735eb0e74724db8769a2e72869e80a6e3d1","date":1074547408,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = (char) ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["51c37735eb0e74724db8769a2e72869e80a6e3d1"],"6e39939cf282e1d1d540335185b8ef575e4b5272":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51c37735eb0e74724db8769a2e72869e80a6e3d1":["6e39939cf282e1d1d540335185b8ef575e4b5272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e39939cf282e1d1d540335185b8ef575e4b5272":["51c37735eb0e74724db8769a2e72869e80a6e3d1"],"51c37735eb0e74724db8769a2e72869e80a6e3d1":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e39939cf282e1d1d540335185b8ef575e4b5272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}