{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}