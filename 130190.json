{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKnn().mjava","commits":[{"id":"a6fe6699bcc60bb2640032c2682f07a108b1f757","date":1516148439,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKnn().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKnn().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}