{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0f2476332da483dc2ea1fdd80b5968380653166","date":1316180489,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b0f2476332da483dc2ea1fdd80b5968380653166"],"b0f2476332da483dc2ea1fdd80b5968380653166":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0f2476332da483dc2ea1fdd80b5968380653166":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e230a61047bc041516c811baa08a7174d6f8322a":["b0f2476332da483dc2ea1fdd80b5968380653166","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}