{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#getMorphemes(int,char[],int,int).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#getMorphemes(int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Morpheme[] getMorphemes(int wordId, char[] surfaceForm, int off, int len) {\n    POS.Type posType = getPOSType(wordId);\n    if (posType == POS.Type.MORPHEME) {\n      return null;\n    }\n    int offset = wordId + 6;\n    boolean hasSinglePos = hasSinglePOS(wordId);\n    if (hasSinglePos == false) {\n      offset ++; // skip rightPOS\n    }\n    int length = buffer.get(offset++);\n    if (length == 0) {\n      return null;\n    }\n    Morpheme[] morphemes = new Morpheme[length];\n    int surfaceOffset = 0;\n    final POS.Tag leftPOS = getLeftPOS(wordId);\n    for (int i = 0; i < length; i++) {\n      final String form;\n      final POS.Tag tag = hasSinglePos ? leftPOS : POS.resolveTag(buffer.get(offset++));\n      if (posType == POS.Type.INFLECT) {\n        form = readString(offset);\n        offset += form.length() * 2 + 1;\n      } else {\n        int formLen = buffer.get(offset++);\n        form = new String(surfaceForm, off+surfaceOffset, formLen);\n        surfaceOffset += formLen;\n      }\n      morphemes[i] = new Morpheme(tag, form);\n    }\n    return morphemes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#getMorphemes(int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Morpheme[] getMorphemes(int wordId, char[] surfaceForm, int off, int len) {\n    POS.Type posType = getPOSType(wordId);\n    if (posType == POS.Type.MORPHEME) {\n      return null;\n    }\n    int offset = wordId + 6;\n    boolean hasSinglePos = hasSinglePOS(wordId);\n    if (hasSinglePos == false) {\n      offset ++; // skip rightPOS\n    }\n    int length = buffer.get(offset++);\n    if (length == 0) {\n      return null;\n    }\n    Morpheme[] morphemes = new Morpheme[length];\n    int surfaceOffset = 0;\n    final POS.Tag leftPOS = getLeftPOS(wordId);\n    for (int i = 0; i < length; i++) {\n      final String form;\n      final POS.Tag tag = hasSinglePos ? leftPOS : POS.resolveTag(buffer.get(offset++));\n      if (posType == POS.Type.INFLECT) {\n        form = readString(offset);\n        offset += form.length() * 2 + 1;\n      } else {\n        int formLen = buffer.get(offset++);\n        form = new String(surfaceForm, off+surfaceOffset, formLen);\n        surfaceOffset += formLen;\n      }\n      morphemes[i] = new Morpheme(tag, form);\n    }\n    return morphemes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9f7831922bb899baba6064894c8ebb795cdee2","date":1566842943,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#getMorphemes(int,char[],int,int).mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#getMorphemes(int,char[],int,int).mjava","sourceNew":"  @Override\n  public Morpheme[] getMorphemes(int wordId, char[] surfaceForm, int off, int len) {\n    POS.Type posType = getPOSType(wordId);\n    if (posType == POS.Type.MORPHEME) {\n      return null;\n    }\n    int offset = wordId + 6;\n    boolean hasSinglePos = hasSinglePOS(wordId);\n    if (hasSinglePos == false) {\n      offset++; // skip rightPOS\n    }\n    int length = buffer.get(offset++);\n    if (length == 0) {\n      return null;\n    }\n    Morpheme[] morphemes = new Morpheme[length];\n    int surfaceOffset = 0;\n    final POS.Tag leftPOS = getLeftPOS(wordId);\n    for (int i = 0; i < length; i++) {\n      final String form;\n      final POS.Tag tag = hasSinglePos ? leftPOS : POS.resolveTag(buffer.get(offset++));\n      if (posType == POS.Type.INFLECT) {\n        form = readString(offset);\n        offset += form.length() * 2 + 1;\n      } else {\n        int formLen = buffer.get(offset++);\n        form = new String(surfaceForm, off+surfaceOffset, formLen);\n        surfaceOffset += formLen;\n      }\n      morphemes[i] = new Morpheme(tag, form);\n    }\n    return morphemes;\n  }\n\n","sourceOld":"  @Override\n  public Morpheme[] getMorphemes(int wordId, char[] surfaceForm, int off, int len) {\n    POS.Type posType = getPOSType(wordId);\n    if (posType == POS.Type.MORPHEME) {\n      return null;\n    }\n    int offset = wordId + 6;\n    boolean hasSinglePos = hasSinglePOS(wordId);\n    if (hasSinglePos == false) {\n      offset ++; // skip rightPOS\n    }\n    int length = buffer.get(offset++);\n    if (length == 0) {\n      return null;\n    }\n    Morpheme[] morphemes = new Morpheme[length];\n    int surfaceOffset = 0;\n    final POS.Tag leftPOS = getLeftPOS(wordId);\n    for (int i = 0; i < length; i++) {\n      final String form;\n      final POS.Tag tag = hasSinglePos ? leftPOS : POS.resolveTag(buffer.get(offset++));\n      if (posType == POS.Type.INFLECT) {\n        form = readString(offset);\n        offset += form.length() * 2 + 1;\n      } else {\n        int formLen = buffer.get(offset++);\n        form = new String(surfaceForm, off+surfaceOffset, formLen);\n        surfaceOffset += formLen;\n      }\n      morphemes[i] = new Morpheme(tag, form);\n    }\n    return morphemes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c6453827f947004a68ad9db7418781e9df2f660":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}