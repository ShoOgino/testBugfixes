{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new int[numReaders][];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final int maxDoc = reader.reader.maxDoc();\n      final int docCount;\n      final Bits liveDocs = reader.liveDocs;\n      final int[] docMap;\n      if (liveDocs != null) {\n        int delCount = 0;\n        docMap = new int[maxDoc];\n        int newDocID = 0;\n        for(int j=0;j<maxDoc;j++) {\n          if (!liveDocs.get(j)) {\n            docMap[j] = -1;\n            delCount++;\n          } else {\n            docMap[j] = newDocID++;\n          }\n        }\n        docCount = maxDoc - delCount;\n      } else {\n        docCount = maxDoc;\n        docMap = null;\n      }\n\n      mergeState.docMaps[i] = docMap;\n      docBase += docCount;\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new int[numReaders][];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final int maxDoc = reader.reader.maxDoc();\n      final int docCount;\n      final Bits liveDocs = reader.liveDocs;\n      final int[] docMap;\n      if (liveDocs != null) {\n        int delCount = 0;\n        docMap = new int[maxDoc];\n        int newDocID = 0;\n        for(int j=0;j<maxDoc;j++) {\n          if (!liveDocs.get(j)) {\n            docMap[j] = -1;\n            delCount++;\n          } else {\n            docMap[j] = newDocID++;\n          }\n        }\n        docCount = maxDoc - delCount;\n      } else {\n        docCount = maxDoc;\n        docMap = null;\n      }\n\n      mergeState.docMaps[i] = docMap;\n      docBase += docCount;\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new int[numReaders][];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final int maxDoc = reader.reader.maxDoc();\n      final int docCount;\n      final Bits liveDocs = reader.liveDocs;\n      final int[] docMap;\n      if (liveDocs != null) {\n        int delCount = 0;\n        docMap = new int[maxDoc];\n        int newDocID = 0;\n        for(int j=0;j<maxDoc;j++) {\n          if (!liveDocs.get(j)) {\n            docMap[j] = -1;\n            delCount++;\n          } else {\n            docMap[j] = newDocID++;\n          }\n        }\n        docCount = maxDoc - delCount;\n      } else {\n        docCount = maxDoc;\n        docMap = null;\n      }\n\n      mergeState.docMaps[i] = docMap;\n      docBase += docCount;\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":["f25edd3dc1b39b51d0fe10053586711547ccce1d","ccad4bab070f323ce610caa0040346d4a87213dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader.reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n    mergeState.readerPayloadProcessor = new PayloadProcessorProvider.ReaderPayloadProcessor[numReaders];\n    mergeState.currentPayloadProcessor = new PayloadProcessorProvider.PayloadProcessor[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      if (mergeState.payloadProcessorProvider != null) {\n        mergeState.readerPayloadProcessor[i] = mergeState.payloadProcessorProvider.getReaderProcessor(reader);\n      }\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final LeafReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final AtomicReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":null,"sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final LeafReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setDocMaps().mjava","sourceNew":null,"sourceOld":"  // NOTE: removes any \"all deleted\" readers from mergeState.readers\n  private int setDocMaps() throws IOException {\n    final int numReaders = mergeState.readers.size();\n\n    // Remap docIDs\n    mergeState.docMaps = new MergeState.DocMap[numReaders];\n    mergeState.docBase = new int[numReaders];\n\n    int docBase = 0;\n\n    int i = 0;\n    while(i < mergeState.readers.size()) {\n\n      final LeafReader reader = mergeState.readers.get(i);\n\n      mergeState.docBase[i] = docBase;\n      final MergeState.DocMap docMap = MergeState.DocMap.build(reader);\n      mergeState.docMaps[i] = docMap;\n      docBase += docMap.numDocs();\n\n      i++;\n    }\n\n    return docBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["c95a819869502635864dac0a788f874787e3395b","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["bc124b3b129ef11a255212f3af482b771c5b3a6c"],"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e25729298aefe258b77e1b2676ae1088c1a2c49d","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fe33227f6805edab2036cbb80645cc4e2d1fa424","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}