{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","commits":[{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for 1shards and 2 replicas.\", e);\n    }\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for 1shards and 2 replicas.\", e);\n    }\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for 1shards and 2 replicas.\", e);\n    }\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitShardWithRule(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for 1shards and 2 replicas.\", e);\n    }\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  private void doSplitShardWithRule(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for 1shards and 2 replicas.\", e);\n    }\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\").setSplitMethod(splitMethod.toLower());\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}