{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","commits":[{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"/dev/null","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"/dev/null","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcd5c85eb915cc76364e331e44a9040a7638d7ca","date":1479107519,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n\n    try  {\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#trySortWithQt(String).mjava","sourceNew":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n\n    try  {\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  private void trySortWithQt(String which) throws Exception {\n    //Basic CloudSolrStream Test bools desc\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing asc,id asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    try  {\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      //Basic CloudSolrStream Test bools desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,b_sing\", \"sort\", \"b_sing desc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 4, 3, 1, 2, 0);\n\n      //Basic CloudSolrStream Test dates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing desc,id asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 2, 0, 1, 4, 3);\n\n      //Basic CloudSolrStream Test ates desc\n      sParams = mapParams(\"q\", \"*:*\", \"qt\", which, \"fl\", \"id,dt_sing\", \"sort\", \"dt_sing asc,id desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals (5,tuples.size());\n      assertOrder(tuples, 3, 4, 1, 0, 2);\n    } finally {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["dcd5c85eb915cc76364e331e44a9040a7638d7ca","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}