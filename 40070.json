{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new Payload(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new Payload(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new BytesRef(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new Payload(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      // must copy because encoders may change the buffer\n      encoder.encode(IntsRef.deepCopyOf(data[idx]), buf);\n      exhausted = true;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new BytesRef(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      // must copy because encoders may change the buffer\n      encoder.encode(IntsRef.deepCopyOf(data[idx]), buf);\n      exhausted = true;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      int[] values = data[idx];\n      ubaos.reInit(buf);\n      encoder.reInit(ubaos);\n      for (int val : values) {\n        encoder.encode(val);\n      }\n      encoder.close();\n      payload.setPayload(new BytesRef(buf, 0, ubaos.length()));\n\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      // must copy because encoders may change the buffer\n      encoder.encode(IntsRef.deepCopyOf(data[idx]), buf);\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.DataTokenStream#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (exhausted) {\n        return false;\n      }\n\n      // must copy because encoders may change the buffer\n      encoder.encode(IntsRef.deepCopyOf(data[idx]), buf);\n      exhausted = true;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["76fa9933adb0556e752e8af9734c4d0ae14622ff","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}