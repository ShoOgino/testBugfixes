{"path":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In classic mode (<code>DEFAULT_OPERATOR_OR</mode>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a9c25687aa751efff1049f8b18ae27091ec453","date":1078313089,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In classic mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In classic mode (<code>DEFAULT_OPERATOR_OR</mode>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f618017540c7d142945729862463ce101e0b95","date":1097869663,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In classic mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7","date":1101251614,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   * @deprecated use {@link #setDefaultOperator(QueryParser.Operator)} instead\n   */\n  public void setOperator(int op) {\n    if (op == DEFAULT_OPERATOR_AND)\n      this.operator = AND_OPERATOR;\n    else if (op == DEFAULT_OPERATOR_OR)\n      this.operator = OR_OPERATOR;\n    else\n      throw new IllegalArgumentException(\"Unknown operator \" + op);\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setOperator(int operator) {\n    this.operator = operator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setOperator(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   * @deprecated use {@link #setDefaultOperator(QueryParser.Operator)} instead\n   */\n  public void setOperator(int op) {\n    if (op == DEFAULT_OPERATOR_AND)\n      this.operator = AND_OPERATOR;\n    else if (op == DEFAULT_OPERATOR_OR)\n      this.operator = OR_OPERATOR;\n    else\n      throw new IllegalArgumentException(\"Unknown operator \" + op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f618017540c7d142945729862463ce101e0b95":["23a9c25687aa751efff1049f8b18ae27091ec453"],"23a9c25687aa751efff1049f8b18ae27091ec453":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["95f618017540c7d142945729862463ce101e0b95"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"95f618017540c7d142945729862463ce101e0b95":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"23a9c25687aa751efff1049f8b18ae27091ec453":["95f618017540c7d142945729862463ce101e0b95"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["23a9c25687aa751efff1049f8b18ae27091ec453"],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}