{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanUnevenly#testQueries02().mjava","commits":[{"id":"8aae1538c21c924fd47d27878baaadfc938b6a0d","date":1407764387,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanUnevenly#testQueries02().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueries02() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    TopDocs tops1 = collector.topDocs();\n    ScoreDoc[] hits1 = tops1.scoreDocs;\n    int hitsNum1 = tops1.totalHits;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    TopDocs tops2 = collector.topDocs();\n    ScoreDoc[] hits2 = tops2.scoreDocs;\n    int hitsNum2 = tops2.totalHits;\n\n    assertEquals(hitsNum1, count1);\n    assertEquals(hitsNum2, count1);\n    CheckHits.checkEqual(query, hits1, hits2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97c7f64d6e0e9d88e67b8f3cc60a261cd70ffaab","date":1407886605,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanUnevenly#testQueries02().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanUnevenly#testQueries02().mjava","sourceNew":"  @Test\n  public void testQueries02() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    TopDocs tops1 = collector.topDocs();\n    ScoreDoc[] hits1 = tops1.scoreDocs;\n    int hitsNum1 = tops1.totalHits;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    TopDocs tops2 = collector.topDocs();\n    ScoreDoc[] hits2 = tops2.scoreDocs;\n    int hitsNum2 = tops2.totalHits;\n\n    assertEquals(count1, hitsNum1);\n    assertEquals(count1, hitsNum2);\n    CheckHits.checkEqual(query, hits1, hits2);\n  }\n\n","sourceOld":"  @Test\n  public void testQueries02() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    TopDocs tops1 = collector.topDocs();\n    ScoreDoc[] hits1 = tops1.scoreDocs;\n    int hitsNum1 = tops1.totalHits;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    TopDocs tops2 = collector.topDocs();\n    ScoreDoc[] hits2 = tops2.scoreDocs;\n    int hitsNum2 = tops2.totalHits;\n\n    assertEquals(hitsNum1, count1);\n    assertEquals(hitsNum2, count1);\n    CheckHits.checkEqual(query, hits1, hits2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanUnevenly#testQueries02().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testQueries02() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(field, \"1\")), BooleanClause.Occur.SHOULD);\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query, null, collector);\n    TopDocs tops1 = collector.topDocs();\n    ScoreDoc[] hits1 = tops1.scoreDocs;\n    int hitsNum1 = tops1.totalHits;\n\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, null, collector);\n    TopDocs tops2 = collector.topDocs();\n    ScoreDoc[] hits2 = tops2.scoreDocs;\n    int hitsNum2 = tops2.totalHits;\n\n    assertEquals(count1, hitsNum1);\n    assertEquals(count1, hitsNum2);\n    CheckHits.checkEqual(query, hits1, hits2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aae1538c21c924fd47d27878baaadfc938b6a0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"97c7f64d6e0e9d88e67b8f3cc60a261cd70ffaab":["8aae1538c21c924fd47d27878baaadfc938b6a0d"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["97c7f64d6e0e9d88e67b8f3cc60a261cd70ffaab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"8aae1538c21c924fd47d27878baaadfc938b6a0d":["97c7f64d6e0e9d88e67b8f3cc60a261cd70ffaab"],"97c7f64d6e0e9d88e67b8f3cc60a261cd70ffaab":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8aae1538c21c924fd47d27878baaadfc938b6a0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}