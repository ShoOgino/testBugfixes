{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","commits":[{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8b7a48eeb8284df9144b8b5d363a7802f09a753","date":1396042121,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eed9ef4e0643df39f0ec323623b372cc5ba6e52","date":1396461071,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState cloud state map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState cloud state map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, String shardStr) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param clusterState cloud state map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> clusterState, String name, String shardStr) {\n    Map<String, Object> docCollection = (Map<String, Object>) clusterState.get(name);\n    if (docCollection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return docCollection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) docCollection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        docCollection.put(\"shards\", selected);\n      }\n      return docCollection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, String shardStr) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, String shardStr) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec381030975b88c20fde64532548a9e9a4bc4f51","date":1432653875,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,String).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param shardStr comma separated shard names\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, String shardStr) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (shardStr == null) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      List<String> selectedShards = Arrays.asList(shardStr.split(\",\"));\n      for (String selectedShard : selectedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9eed9ef4e0643df39f0ec323623b372cc5ba6e52"],"ec381030975b88c20fde64532548a9e9a4bc4f51":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"5b15576cafd8b5d06857055c28f26912321937e3":["e8b7a48eeb8284df9144b8b5d363a7802f09a753"],"9eed9ef4e0643df39f0ec323623b372cc5ba6e52":["5b15576cafd8b5d06857055c28f26912321937e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"e8b7a48eeb8284df9144b8b5d363a7802f09a753":["78ae724e55b07e7d158110151c0a7247cd54b460"],"78ae724e55b07e7d158110151c0a7247cd54b460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["9eed9ef4e0643df39f0ec323623b372cc5ba6e52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec381030975b88c20fde64532548a9e9a4bc4f51"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ec381030975b88c20fde64532548a9e9a4bc4f51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b15576cafd8b5d06857055c28f26912321937e3":["9eed9ef4e0643df39f0ec323623b372cc5ba6e52"],"9eed9ef4e0643df39f0ec323623b372cc5ba6e52":["5eb2511ababf862ea11e10761c70ee560cd84510","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","78ae724e55b07e7d158110151c0a7247cd54b460"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["ec381030975b88c20fde64532548a9e9a4bc4f51"],"e8b7a48eeb8284df9144b8b5d363a7802f09a753":["5b15576cafd8b5d06857055c28f26912321937e3"],"78ae724e55b07e7d158110151c0a7247cd54b460":["e8b7a48eeb8284df9144b8b5d363a7802f09a753"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}