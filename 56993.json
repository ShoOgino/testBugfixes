{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#testV2Forwarding().mjava","commits":[{"id":"06162402a4b5a56531e9bd52e5e05f51b86ccfea","date":1540518645,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#testV2Forwarding().mjava","pathOld":"/dev/null","sourceNew":"  public void testV2Forwarding() throws Exception {\n    SolrClient client = cluster.getSolrClient();\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'v2forward',\" +\n            \"    'numShards' : 1,\" +\n            \"    'replicationFactor' : 1,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n\n    ClusterState cs = cluster.getSolrClient().getClusterStateProvider().getClusterState();\n    System.out.println(\"livenodes: \" + cs.getLiveNodes());\n\n    String[] node = new String[1];\n    cs.getCollection(\"v2forward\").forEachReplica((s, replica) -> node[0] = replica.getNodeName());\n\n    //find a node that does not have a replica for this collection\n    final String[] testNode = new String[1];\n    cs.getLiveNodes().forEach(s -> {\n      if (!s.equals(node[0])) testNode[0] = s;\n    });\n\n    String testServer = cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(testNode[0]);\n     V2Request v2r = new V2Request.Builder(\"/c/v2forward/_introspect\")\n        .withMethod(SolrRequest.METHOD.GET).build();\n\n    try(HttpSolrClient client1 = new HttpSolrClient.Builder()\n        .withBaseSolrUrl(testServer)\n        .build()) {\n      V2Response rsp = v2r.process(client1);\n      assertEquals(\"0\",rsp._getStr(\"responseHeader/status\", null));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06162402a4b5a56531e9bd52e5e05f51b86ccfea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06162402a4b5a56531e9bd52e5e05f51b86ccfea"]},"commit2Childs":{"06162402a4b5a56531e9bd52e5e05f51b86ccfea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06162402a4b5a56531e9bd52e5e05f51b86ccfea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}