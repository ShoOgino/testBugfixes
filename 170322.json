{"path":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  public char[] resizeBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f0f0ff797193d872fd9975a920db7e8134b952","date":1270803161,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","sourceNew":"  public char[] resizeBuffer(int newSize) {\n    if(termBuffer.length < newSize){\n      // Not big enough; create a new array with slight\n      // over allocation and preserve content\n      final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;\n    }\n    return termBuffer;   \n  }\n\n","sourceOld":"  public char[] resizeBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b298ec7eee064feb32314fd646a95e38f1152835","date":1271673925,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","sourceNew":"  public final char[] resizeBuffer(int newSize) {\n    if(termBuffer.length < newSize){\n      // Not big enough; create a new array with slight\n      // over allocation and preserve content\n      final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;\n    }\n    return termBuffer;   \n  }\n\n","sourceOld":"  public char[] resizeBuffer(int newSize) {\n    if(termBuffer.length < newSize){\n      // Not big enough; create a new array with slight\n      // over allocation and preserve content\n      final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;\n    }\n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl#resizeBuffer(int).mjava","sourceNew":"  public final char[] resizeBuffer(int newSize) {\n    if(termBuffer.length < newSize){\n      // Not big enough; create a new array with slight\n      // over allocation and preserve content\n      final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;\n    }\n    return termBuffer;   \n  }\n\n","sourceOld":"  public final char[] resizeBuffer(int newSize) {\n    if(termBuffer.length < newSize){\n      // Not big enough; create a new array with slight\n      // over allocation and preserve content\n      final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;\n    }\n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b298ec7eee064feb32314fd646a95e38f1152835"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b298ec7eee064feb32314fd646a95e38f1152835":["d0f0f0ff797193d872fd9975a920db7e8134b952"],"d0f0f0ff797193d872fd9975a920db7e8134b952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b298ec7eee064feb32314fd646a95e38f1152835":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0f0f0ff797193d872fd9975a920db7e8134b952":["b298ec7eee064feb32314fd646a95e38f1152835"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d0f0f0ff797193d872fd9975a920db7e8134b952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}