{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lock();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      cloudManager.submit(new LeaderElection(Collections.singleton(collectionName), true));\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lock();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lock();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      cloudManager.submit(new LeaderElection(Collections.singleton(collectionName), true));\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lock();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lock();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n        try {\n          simAddReplica(addReplicasProps, results);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n        try {\n          simAddReplica(addReplicasProps, results);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n      List<ReplicaPosition> positions = CreateShardCmd.buildReplicaPositions(cloudManager, clusterState, collectionName,\n          message, sessionWrapper);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      AtomicInteger replicaNum = new AtomicInteger(1);\n      positions.forEach(pos -> {\n        Map<String, Object> replicaProps = new HashMap<>();\n        replicaProps.put(ZkStateReader.SHARD_ID_PROP, pos.shard);\n        replicaProps.put(ZkStateReader.NODE_NAME_PROP, pos.node);\n        replicaProps.put(ZkStateReader.REPLICA_TYPE, pos.type.toString());\n        replicaProps.put(ZkStateReader.BASE_URL_PROP, Utils.getBaseUrlForNodeName(pos.node, \"http\"));\n        String coreName = String.format(Locale.ROOT, \"%s_%s_replica_%s%s\", collectionName, pos.shard, pos.type.name().substring(0,1).toLowerCase(Locale.ROOT),\n            replicaNum.getAndIncrement());\n        try {\n          replicaProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n          ReplicaInfo ri = new ReplicaInfo(\"core_node\" + Assign.incAndGetId(stateManager, collectionName, 0),\n              coreName, collectionName, pos.shard, pos.type, pos.node, replicaProps);\n          simAddReplica(pos.node, ri, false);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n      Map<String, Object> colProps = collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n        try {\n          simAddReplica(addReplicasProps, results);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n\n      simRunLeaderElection(Collections.singleton(collectionName), true);\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a4422b331d00607258b0ed3e43934306e67764aa"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"deea3439de4f487ae553317e50d5d641ca386374":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a4422b331d00607258b0ed3e43934306e67764aa","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}