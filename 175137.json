{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfb8001b6712216ccbf7ccc85f830f08ce3b544","date":1576882501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponse.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponse.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a4045268caa5f6094d5a8d80519a1c152295f3","date":1580840817,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponseSerializer.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponse.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponseSerializer.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponseSerializer.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["2209af2c265d2258ec4b29c8cc78622d36994a15","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","b6a4045268caa5f6094d5a8d80519a1c152295f3"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}