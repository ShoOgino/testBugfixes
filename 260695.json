{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","commits":[{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","pathOld":"/dev/null","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole();\n    addRoleRequest.setNode(replica.getNodeName());\n    addRoleRequest.setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    CollectionAdminRequest.RemoveRole removeRoleRequest = new CollectionAdminRequest.RemoveRole();\n    removeRoleRequest.setNode(replica.getNodeName());\n    removeRoleRequest.setRole(\"overseer\");\n    removeRoleRequest.process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole();\n    addRoleRequest.setNode(replica.getNodeName());\n    addRoleRequest.setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    CollectionAdminRequest.RemoveRole removeRoleRequest = new CollectionAdminRequest.RemoveRole();\n    removeRoleRequest.setNode(replica.getNodeName());\n    removeRoleRequest.setRole(\"overseer\");\n    removeRoleRequest.process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}