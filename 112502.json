{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonForState(byte[],int,int,int).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonForState(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the automaton and return the final state (not necessary accepted). -1 signifies no state / no match.\n   * Sets {@link #numBytesAccepted} with the offset of the first byte rejected by the automaton;\n   * or (offset + length) if no byte is rejected.\n   */\n  protected int runAutomatonForState(byte[] s, int offset, int length, int initialState) {\n    //see ByteRunAutomaton.run(); similar\n    int state = initialState;\n    int index = 0;\n    while (index < length) {\n      state = runAutomaton.step(state, s[index + offset] & 0xFF);\n      if (state == -1) {\n        break;\n      }\n      index++;\n    }\n    numBytesAccepted = index;\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonForState(byte[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Run the automaton and return the final state (not necessary accepted). -1 signifies no state / no match.\n   * Sets {@link #numBytesAccepted} with the offset of the first byte rejected by the automaton;\n   * or (offset + length) if no byte is rejected.\n   */\n  protected int runAutomatonForState(byte[] s, int offset, int length, int initialState) {\n    //see ByteRunAutomaton.run(); similar\n    int state = initialState;\n    int index = 0;\n    while (index < length) {\n      state = runAutomaton.step(state, s[index + offset] & 0xFF);\n      if (state == -1) {\n        break;\n      }\n      index++;\n    }\n    numBytesAccepted = index;\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}