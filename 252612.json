{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"/dev/null","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateBinaryDocValue(t, f, null);\n                writer.updateBinaryDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateBinaryDocValue(t, f, toBytes(updValue));\n                writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithBdv.get(j), docsWithControl.get(j));\n            if (docsWithBdv.get(j)) {\n              assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateBinaryDocValue(t, f, null);\n                writer.updateBinaryDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateBinaryDocValue(t, f, toBytes(updValue));\n                writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithBdv.get(j), docsWithControl.get(j));\n            if (docsWithBdv.get(j)) {\n              assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateBinaryDocValue(t, f, null);\n                writer.updateBinaryDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateBinaryDocValue(t, f, toBytes(updValue));\n                writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithBdv.get(j), docsWithControl.get(j));\n            if (docsWithBdv.get(j)) {\n              assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateBinaryDocValue(t, f, toBytes(updValue));\n              writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              if (random.nextBoolean()) { // sometimes unset a value\n                writer.updateBinaryDocValue(t, f, null);\n                writer.updateBinaryDocValue(t, cf, null);\n              } else {\n                long updValue = random.nextInt();\n                writer.updateBinaryDocValue(t, f, toBytes(updValue));\n                writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              }\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(docsWithBdv.get(j), docsWithControl.get(j));\n            if (docsWithBdv.get(j)) {\n              assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n            }\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70285ef5917fa2c8feec026d4be4d9c20fa89162","date":1401366288,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numThreads; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      final String f = \"f\" + i;\n      final String cf = \"cf\" + i;\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t);\n              long updValue = random.nextInt();\n              writer.updateBinaryDocValue(t, f, toBytes(updValue));\n              writer.updateBinaryDocValue(t, cf, toBytes(updValue * 2));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numThreads; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j, scratch), getValue(bdv, j, scratch) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer, true);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer, true);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, bdv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(getValue(control), getValue(bdv) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, bdv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(getValue(control), getValue(bdv) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, bdv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(getValue(control), getValue(bdv) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits docsWithBdv = r.getDocsWithField(\"f\" + i);\n        Bits docsWithControl = r.getDocsWithField(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertTrue(docsWithBdv.get(j));\n            assertTrue(docsWithControl.get(j));\n            assertEquals(getValue(control, j), getValue(bdv, j) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testStressMultiThreading().mjava","sourceNew":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = TEST_NIGHTLY ? atLeast(2000) : atLeast(200);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TEST_NIGHTLY ? TestUtil.nextInt(random(), 3, 6) : 2;\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, bdv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(getValue(control), getValue(bdv) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testStressMultiThreading() throws Exception {\n    final Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // create index\n    final int numFields = TestUtil.nextInt(random(), 1, 4);\n    final int numDocs = atLeast(2000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n      double group = random().nextDouble();\n      String g;\n      if (group < 0.1) g = \"g0\";\n      else if (group < 0.5) g = \"g1\";\n      else if (group < 0.8) g = \"g2\";\n      else g = \"g3\";\n      doc.add(new StringField(\"updKey\", g, Store.NO));\n      for (int j = 0; j < numFields; j++) {\n        long value = random().nextInt();\n        doc.add(new BinaryDocValuesField(\"f\" + j, toBytes(value)));\n        doc.add(new BinaryDocValuesField(\"cf\" + j, toBytes(value * 2))); // control, always updated to f * 2\n      }\n      writer.addDocument(doc);\n    }\n    \n    final int numThreads = TestUtil.nextInt(random(), 3, 6);\n    final CountDownLatch done = new CountDownLatch(numThreads);\n    final AtomicInteger numUpdates = new AtomicInteger(atLeast(100));\n    \n    // same thread updates a field as well as reopens\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"UpdateThread-\" + i) {\n        @Override\n        public void run() {\n          DirectoryReader reader = null;\n          boolean success = false;\n          try {\n            Random random = random();\n            while (numUpdates.getAndDecrement() > 0) {\n              double group = random.nextDouble();\n              Term t;\n              if (group < 0.1) t = new Term(\"updKey\", \"g0\");\n              else if (group < 0.5) t = new Term(\"updKey\", \"g1\");\n              else if (group < 0.8) t = new Term(\"updKey\", \"g2\");\n              else t = new Term(\"updKey\", \"g3\");\n\n              final int field = random().nextInt(numFields);\n              final String f = \"f\" + field;\n              final String cf = \"cf\" + field;\n//              System.out.println(\"[\" + Thread.currentThread().getName() + \"] numUpdates=\" + numUpdates + \" updateTerm=\" + t + \" field=\" + field);\n              long updValue = random.nextInt();\n              writer.updateDocValues(t, new BinaryDocValuesField(f, toBytes(updValue)), new BinaryDocValuesField(cf, toBytes(updValue*2)));\n              \n              if (random.nextDouble() < 0.2) {\n                // delete a random document\n                int doc = random.nextInt(numDocs);\n//                System.out.println(\"[\" + Thread.currentThread().getName() + \"] deleteDoc=doc\" + doc);\n                writer.deleteDocuments(new Term(\"id\", \"doc\" + doc));\n              }\n  \n              if (random.nextDouble() < 0.05) { // commit every 20 updates on average\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] commit\");\n                writer.commit();\n              }\n              \n              if (random.nextDouble() < 0.1) { // reopen NRT reader (apply updates), on average once every 10 updates\n                if (reader == null) {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] open NRT\");\n                  reader = DirectoryReader.open(writer);\n                } else {\n//                  System.out.println(\"[\" + Thread.currentThread().getName() + \"] reopen NRT\");\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(reader, writer);\n                  if (r2 != null) {\n                    reader.close();\n                    reader = r2;\n                  }\n                }\n              }\n            }\n//            System.out.println(\"[\" + Thread.currentThread().getName() + \"] DONE\");\n            success = true;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } finally {\n            if (reader != null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                if (success) { // suppress this exception only if there was another exception\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            done.countDown();\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    done.await();\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      for (int i = 0; i < numFields; i++) {\n        BinaryDocValues bdv = r.getBinaryDocValues(\"f\" + i);\n        BinaryDocValues control = r.getBinaryDocValues(\"cf\" + i);\n        Bits liveDocs = r.getLiveDocs();\n        for (int j = 0; j < r.maxDoc(); j++) {\n          if (liveDocs == null || liveDocs.get(j)) {\n            assertEquals(j, bdv.advance(j));\n            assertEquals(j, control.advance(j));\n            assertEquals(getValue(control), getValue(bdv) * 2);\n          }\n        }\n      }\n    }\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["2a1862266772deb28cdcb7d996b64d2177022687"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2a1862266772deb28cdcb7d996b64d2177022687":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}