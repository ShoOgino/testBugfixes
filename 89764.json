{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","commits":[{"id":"de2eb3b472fe7cac06b5781613efcd2a659b7d7b","date":1332241070,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","sourceNew":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["de2eb3b472fe7cac06b5781613efcd2a659b7d7b"],"de2eb3b472fe7cac06b5781613efcd2a659b7d7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de2eb3b472fe7cac06b5781613efcd2a659b7d7b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de2eb3b472fe7cac06b5781613efcd2a659b7d7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}