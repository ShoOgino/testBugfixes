{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","pathOld":"/dev/null","sourceNew":"  public void testTagRead() throws Exception {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    FastOutputStream faos = FastOutputStream.wrap(baos);\n\n    JavaBinCodec codec = new JavaBinCodec(faos, null);\n    codec.writeVal(10);\n    codec.writeVal(100);\n    codec.writeVal(\"Hello!\");\n\n    faos.flushBuffer();\n    faos.close();\n\n\n    FastInputStream fis = new FastInputStream(null, baos.getbuf(), 0, baos.size());\n    FastJavaBinDecoder.StreamCodec scodec = new FastJavaBinDecoder.StreamCodec(fis);\n    scodec.start();\n    Tag tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(10, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(100, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._STR, tag);\n    assertEquals(\"Hello!\", scodec.readStr(fis));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","sourceNew":"  public void testTagRead() throws Exception {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    FastOutputStream faos = FastOutputStream.wrap(baos);\n\n    try (JavaBinCodec codec = new JavaBinCodec(faos, null)) {\n      codec.writeVal(10);\n      codec.writeVal(100);\n      codec.writeVal(\"Hello!\");\n    }\n\n    faos.flushBuffer();\n    faos.close();\n\n\n    FastInputStream fis = new FastInputStream(null, baos.getbuf(), 0, baos.size());\n    try (FastJavaBinDecoder.StreamCodec scodec = new FastJavaBinDecoder.StreamCodec(fis)) {\n      scodec.start();\n      Tag tag = scodec.getTag();\n      assertEquals(Tag._SINT, tag);\n      assertEquals(10, scodec.readSmallInt(scodec.dis));\n      tag = scodec.getTag();\n      assertEquals(Tag._SINT, tag);\n      assertEquals(100, scodec.readSmallInt(scodec.dis));\n      tag = scodec.getTag();\n      assertEquals(Tag._STR, tag);\n      assertEquals(\"Hello!\", scodec.readStr(fis));\n    }\n  }\n\n","sourceOld":"  public void testTagRead() throws Exception {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    FastOutputStream faos = FastOutputStream.wrap(baos);\n\n    JavaBinCodec codec = new JavaBinCodec(faos, null);\n    codec.writeVal(10);\n    codec.writeVal(100);\n    codec.writeVal(\"Hello!\");\n\n    faos.flushBuffer();\n    faos.close();\n\n\n    FastInputStream fis = new FastInputStream(null, baos.getbuf(), 0, baos.size());\n    FastJavaBinDecoder.StreamCodec scodec = new FastJavaBinDecoder.StreamCodec(fis);\n    scodec.start();\n    Tag tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(10, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(100, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._STR, tag);\n    assertEquals(\"Hello!\", scodec.readStr(fis));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testTagRead().mjava","sourceNew":"  public void testTagRead() throws Exception {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    FastOutputStream faos = FastOutputStream.wrap(baos);\n\n    try (JavaBinCodec codec = new JavaBinCodec(faos, null)) {\n      codec.writeVal(10);\n      codec.writeVal(100);\n      codec.writeVal(\"Hello!\");\n    }\n\n    faos.flushBuffer();\n    faos.close();\n\n\n    FastInputStream fis = new FastInputStream(null, baos.getbuf(), 0, baos.size());\n    try (FastJavaBinDecoder.StreamCodec scodec = new FastJavaBinDecoder.StreamCodec(fis)) {\n      scodec.start();\n      Tag tag = scodec.getTag();\n      assertEquals(Tag._SINT, tag);\n      assertEquals(10, scodec.readSmallInt(scodec.dis));\n      tag = scodec.getTag();\n      assertEquals(Tag._SINT, tag);\n      assertEquals(100, scodec.readSmallInt(scodec.dis));\n      tag = scodec.getTag();\n      assertEquals(Tag._STR, tag);\n      assertEquals(\"Hello!\", scodec.readStr(fis));\n    }\n  }\n\n","sourceOld":"  public void testTagRead() throws Exception {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    FastOutputStream faos = FastOutputStream.wrap(baos);\n\n    JavaBinCodec codec = new JavaBinCodec(faos, null);\n    codec.writeVal(10);\n    codec.writeVal(100);\n    codec.writeVal(\"Hello!\");\n\n    faos.flushBuffer();\n    faos.close();\n\n\n    FastInputStream fis = new FastInputStream(null, baos.getbuf(), 0, baos.size());\n    FastJavaBinDecoder.StreamCodec scodec = new FastJavaBinDecoder.StreamCodec(fis);\n    scodec.start();\n    Tag tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(10, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._SINT, tag);\n    assertEquals(100, scodec.readSmallInt(scodec.dis));\n    tag = scodec.getTag();\n    assertEquals(Tag._STR, tag);\n    assertEquals(\"Hello!\", scodec.readStr(fis));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["220577719e3753e52195ed66dc9af6c4e65e2873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["220577719e3753e52195ed66dc9af6c4e65e2873","8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c5cdabe00d4d433e6a831e18f68201284973eef"]},"commit2Childs":{"220577719e3753e52195ed66dc9af6c4e65e2873":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}