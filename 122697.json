{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    assertMultipleReaders();\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["10b75a457eb5518da0fa1db5755d9cd71f8a4676"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b75a457eb5518da0fa1db5755d9cd71f8a4676","date":1407975689,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 10) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    assertMultipleReaders();\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","bugFix":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 20) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n      i++;\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 10) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 20) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n      i++;\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 10) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 10) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 20) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n      i++;\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testMultipleSegments().mjava","sourceNew":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 20) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n      i++;\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSegments() {\n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    int i = 11;\n    while (getNumberOfReaders() < 2 && i < 10) {\n      //try to get more than one segment\n      assertU(adoc(\"id\", String.valueOf(i), \"test_i_dv\", String.valueOf(i)));\n      assertU(commit());\n    }\n    if (getNumberOfReaders() < 2) {\n      // It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with\n      // segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.\n      log.warn(\"Could not generate more than 1 segment for this seed. Will skip the test\");\n      return;\n    }\n\n    assertIntervalQueriesString(\"test_s_dv\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["10b75a457eb5518da0fa1db5755d9cd71f8a4676","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10b75a457eb5518da0fa1db5755d9cd71f8a4676":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"744b111b17d15d490a648eb021bfa240e7f11556":["10b75a457eb5518da0fa1db5755d9cd71f8a4676"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"10b75a457eb5518da0fa1db5755d9cd71f8a4676":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["10b75a457eb5518da0fa1db5755d9cd71f8a4676"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}