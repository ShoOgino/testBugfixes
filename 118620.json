{"path":"solr/core/src/java/org/apache/solr/util/PackageTool#getZkHost(CommandLine).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#getZkHost(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"  private String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    String systemInfoUrl = solrUrl+\"/admin/info/system\";\n    CloseableHttpClient httpClient = SolrCLI.getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = SolrCLI.getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl+\"/\", systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#getZkHost(CommandLine).mjava","sourceNew":"  private String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    String systemInfoUrl = solrUrl+\"/admin/info/system\";\n    CloseableHttpClient httpClient = SolrCLI.getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = SolrCLI.getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl+\"/\", systemInfo, httpClient);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  private String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    String systemInfoUrl = solrUrl+\"/admin/info/system\";\n    CloseableHttpClient httpClient = SolrCLI.getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = SolrCLI.getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl+\"/\", systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}