{"path":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource#doInit().mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource#doInit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrCore.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null != indent && (\"\".equals(indent) || \"off\".equals(indent))) {\n              doIndent = false;\n            } else {                       // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            final String firstPathElement = path.substring(0, path.indexOf(\"/\", 1));\n            solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrCore.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null != indent && (\"\".equals(indent) || \"off\".equals(indent))) {\n              doIndent = false;\n            } else {                       // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            final String firstPathElement = path.substring(0, path.indexOf(\"/\", 1));\n            solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrCore.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null != indent && (\"\".equals(indent) || \"off\".equals(indent))) {\n              doIndent = false;\n            } else {                       // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            final String firstPathElement = path.substring(0, path.indexOf(\"/\", 1));\n            solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}