{"path":"src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","commits":[{"id":"366fcca5de1fe02aa77c7aca163ce4c0dbf30112","date":1138917988,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","pathOld":"src/lucene_extras/org/apache/lucene/search/function/FunctionQuery.AllScorer#next().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1489a6cc46d2aee93ac7b3caad58d8ec068d9cf","date":1219178375,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","pathOld":"src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (hasDeletions && reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","pathOld":"src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#next().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (hasDeletions && reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    public boolean next() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return false;\n        }\n        if (hasDeletions && reader.isDeleted(doc)) continue;\n        // todo: maybe allow score() to throw a specific exception\n        // and continue on to the next document if it is thrown...\n        // that may be useful, but exceptions aren't really good\n        // for flow control.\n        return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"366fcca5de1fe02aa77c7aca163ce4c0dbf30112":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c1489a6cc46d2aee93ac7b3caad58d8ec068d9cf"],"c1489a6cc46d2aee93ac7b3caad58d8ec068d9cf":["366fcca5de1fe02aa77c7aca163ce4c0dbf30112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"366fcca5de1fe02aa77c7aca163ce4c0dbf30112":["c1489a6cc46d2aee93ac7b3caad58d8ec068d9cf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["366fcca5de1fe02aa77c7aca163ce4c0dbf30112"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c1489a6cc46d2aee93ac7b3caad58d8ec068d9cf":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}