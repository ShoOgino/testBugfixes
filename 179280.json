{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","commits":[{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6c544fc28b1a67cc06478eee0658f2f67c5c27","date":1467109641,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":["a71849bd31d150133a9a1027bf1607967b406c57"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d","date":1467111241,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      if (points.length > 1) {\n        throw new IllegalArgumentException(\"Ambiguous boundary points; path too short\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d":["760628478e121972168791a2afa6af915192c4a6","ba6c544fc28b1a67cc06478eee0658f2f67c5c27"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","760628478e121972168791a2afa6af915192c4a6"],"ba6c544fc28b1a67cc06478eee0658f2f67c5c27":["760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["760628478e121972168791a2afa6af915192c4a6","4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d","09af2c9610ce53a4b25fd99344299b40318a4a1a","ba6c544fc28b1a67cc06478eee0658f2f67c5c27","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"ba6c544fc28b1a67cc06478eee0658f2f67c5c27":["4e0f93a3fd6cd33c48963e4f0871699c3b58fd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}