{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","commits":[{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    FacetLabel[] cp = new FacetLabel[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new FacetLabel(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new FacetLabel(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxonomy(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    FacetLabel[] cp = new FacetLabel[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new FacetLabel(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new FacetLabel(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxonomy(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j = 0; j <= k; j++) {\n          tw.addCategory(cp[j]);\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n          assertNotNull(newtr);\n          tr.close();\n          tr = newtr;\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}