{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#writeMissingBitset(Iterable[#]).mjava","sourceNew":null,"sourceOld":"  // TODO: in some cases representing missing with minValue-1 wouldn't take up additional space and so on,\n  // but this is very simple, and algorithms only check this for values of 0 anyway (doesnt slow down normal decode)\n  void writeMissingBitset(Iterable<?> values) throws IOException {\n    byte bits = 0;\n    int count = 0;\n    for (Object v : values) {\n      if (count == 8) {\n        data.writeByte(bits);\n        count = 0;\n        bits = 0;\n      }\n      if (v != null) {\n        bits |= 1 << (count & 7);\n      }\n      count++;\n    }\n    if (count > 0) {\n      data.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}