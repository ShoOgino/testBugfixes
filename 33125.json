{"path":"solr/core/src/test/org/apache/solr/handler/admin/ThreadDumpHandlerTest#testMonitor().mjava","commits":[{"id":"43773b467552e527b377ad41ba33808922816e42","date":1594321982,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ThreadDumpHandlerTest#testMonitor().mjava","pathOld":"/dev/null","sourceNew":"  public void testMonitor() throws Exception {\n    assumeTrue(\"monitor checking not supported on this JVM\",\n               ManagementFactory.getThreadMXBean().isObjectMonitorUsageSupported());\n    \n    /** unique class name to show up as a lock class name in output */\n    final class TestMonitorStruct { /* empty */ }\n    \n    final List<String> failures = new ArrayList<>();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final Object monitor = new TestMonitorStruct();\n    final Thread owner = new Thread(() -> {\n        synchronized (monitor) {\n          log.info(\"monitor owner waiting for latch to release me...\");\n          try {\n            if ( ! latch.await(5, TimeUnit.SECONDS ) ){\n              failures.add(\"owner: never saw latch release\");\n            }\n          } catch (InterruptedException ie) {\n            failures.add(\"owner: \" + ie.toString());\n          }\n        }\n      }, \"test-thread-monitor-owner\");\n    final Thread blocked = new Thread(() -> {\n        log.info(\"blocked waiting for monitor...\");\n        synchronized (monitor) {\n          log.info(\"monitor now unblocked\");\n        }\n      }, \"test-thread-monitor-blocked\");\n    try {\n      owner.start();\n      blocked.start();\n      \n      assertQ(req(\"qt\", \"/admin/threads\", \"indent\", \"true\")\n              // monitor owner thread (which is also currently waiting on CountDownLatch)\n              , \"//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-owner']]\"\n              + \"                     [lst[@name='lock-waiting'][null[@name='owner']]]\" // latch\n              + \"                     [arr[@name='monitors-locked']/str[contains(.,'TestMonitorStruct')]]\"\n              // blocked thread, waiting on the monitor\n              , \"//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-blocked']]\"\n              + \"                     [lst[@name='lock-waiting'][lst[@name='owner']/str[.='test-thread-monitor-owner']]]\"\n              );\n      \n    } finally {\n      latch.countDown();\n      owner.join(1000);\n      assertFalse(\"owner is still alive\", owner.isAlive());\n      blocked.join(1000);\n      assertFalse(\"blocked is still alive\", blocked.isAlive());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e38b745e9eee882a51b0b965cc5ba8daf1009891","date":1594668544,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ThreadDumpHandlerTest#testMonitor().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ThreadDumpHandlerTest#testMonitor().mjava","sourceNew":"  public void testMonitor() throws Exception {\n    doTestMonitor(false);\n  }\n\n","sourceOld":"  public void testMonitor() throws Exception {\n    assumeTrue(\"monitor checking not supported on this JVM\",\n               ManagementFactory.getThreadMXBean().isObjectMonitorUsageSupported());\n    \n    /** unique class name to show up as a lock class name in output */\n    final class TestMonitorStruct { /* empty */ }\n    \n    final List<String> failures = new ArrayList<>();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final Object monitor = new TestMonitorStruct();\n    final Thread owner = new Thread(() -> {\n        synchronized (monitor) {\n          log.info(\"monitor owner waiting for latch to release me...\");\n          try {\n            if ( ! latch.await(5, TimeUnit.SECONDS ) ){\n              failures.add(\"owner: never saw latch release\");\n            }\n          } catch (InterruptedException ie) {\n            failures.add(\"owner: \" + ie.toString());\n          }\n        }\n      }, \"test-thread-monitor-owner\");\n    final Thread blocked = new Thread(() -> {\n        log.info(\"blocked waiting for monitor...\");\n        synchronized (monitor) {\n          log.info(\"monitor now unblocked\");\n        }\n      }, \"test-thread-monitor-blocked\");\n    try {\n      owner.start();\n      blocked.start();\n      \n      assertQ(req(\"qt\", \"/admin/threads\", \"indent\", \"true\")\n              // monitor owner thread (which is also currently waiting on CountDownLatch)\n              , \"//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-owner']]\"\n              + \"                     [lst[@name='lock-waiting'][null[@name='owner']]]\" // latch\n              + \"                     [arr[@name='monitors-locked']/str[contains(.,'TestMonitorStruct')]]\"\n              // blocked thread, waiting on the monitor\n              , \"//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-blocked']]\"\n              + \"                     [lst[@name='lock-waiting'][lst[@name='owner']/str[.='test-thread-monitor-owner']]]\"\n              );\n      \n    } finally {\n      latch.countDown();\n      owner.join(1000);\n      assertFalse(\"owner is still alive\", owner.isAlive());\n      blocked.join(1000);\n      assertFalse(\"blocked is still alive\", blocked.isAlive());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43773b467552e527b377ad41ba33808922816e42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e38b745e9eee882a51b0b965cc5ba8daf1009891":["43773b467552e527b377ad41ba33808922816e42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e38b745e9eee882a51b0b965cc5ba8daf1009891"]},"commit2Childs":{"43773b467552e527b377ad41ba33808922816e42":["e38b745e9eee882a51b0b965cc5ba8daf1009891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43773b467552e527b377ad41ba33808922816e42"],"e38b745e9eee882a51b0b965cc5ba8daf1009891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}