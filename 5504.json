{"path":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","sourceNew":null,"sourceOld":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.add(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}