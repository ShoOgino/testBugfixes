{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParentArray add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parentOrdinals.length) {\n      int[] newarray = ArrayUtil.grow(parentOrdinals);\n      newarray[ordinal] = parentOrdinal;\n      return new ParentArray(newarray);\n    }\n    parentOrdinals[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParentArray add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parentOrdinals.length) {\n      int[] newarray = ArrayUtil.grow(parentOrdinals);\n      newarray[ordinal] = parentOrdinal;\n      return new ParentArray(newarray);\n    }\n    parentOrdinals[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":["209b03e6aa9098ac043cc757e46f758400427b15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}