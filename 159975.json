{"path":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","commits":[{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c55f8ed39db09042eb12b26e85d104958d4739a3","date":1332334591,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        if (!errors.isEmpty()) {\n          if (ltc == null) {\n            // class level failure (e.g. afterclass)\n            LuceneTestCase.reportPartialFailureInfo();\n          } else {\n            // failure in a method\n            ltc.reportAdditionalFailureInfo();\n          }\n        }\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a874c3f0cf9cbc09e611f4c32f9f003f77d28ffb","date":1332365293,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        if (hasNonAssumptionErrors(errors)) {\n          if (ltc == null) {\n            // class level failure (e.g. afterclass)\n            LuceneTestCase.reportPartialFailureInfo();\n          } else {\n            // failure in a method\n            ltc.reportAdditionalFailureInfo();\n          }\n        }\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        if (!errors.isEmpty()) {\n          if (ltc == null) {\n            // class level failure (e.g. afterclass)\n            LuceneTestCase.reportPartialFailureInfo();\n          } else {\n            // failure in a method\n            ltc.reportAdditionalFailureInfo();\n          }\n        }\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        if (hasNonAssumptionErrors(errors)) {\n          if (ltc == null) {\n            // class level failure (e.g. afterclass)\n            LuceneTestCase.reportPartialFailureInfo();\n          } else {\n            // failure in a method\n            ltc.reportAdditionalFailureInfo();\n          }\n        }\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a874c3f0cf9cbc09e611f4c32f9f003f77d28ffb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a874c3f0cf9cbc09e611f4c32f9f003f77d28ffb":["c55f8ed39db09042eb12b26e85d104958d4739a3"],"c55f8ed39db09042eb12b26e85d104958d4739a3":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"a874c3f0cf9cbc09e611f4c32f9f003f77d28ffb":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"c55f8ed39db09042eb12b26e85d104958d4739a3":["a874c3f0cf9cbc09e611f4c32f9f003f77d28ffb"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","c55f8ed39db09042eb12b26e85d104958d4739a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}