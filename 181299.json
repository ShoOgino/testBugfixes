{"path":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    if (bytes.bytes == null) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_INT];\n    } else if (bytes.bytes.length < NumericUtils.BUF_SIZE_INT) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.length = nChars+1;\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fdc35812ba3a566ec91032d28da131ae8dc601c","date":1272905807,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    if (bytes.bytes == null) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_INT];\n    } else if (bytes.bytes.length < NumericUtils.BUF_SIZE_INT) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.length = nChars+1;\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f97c800c54039c501f9eded0add4287e483cac1","date":1272910009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fdc35812ba3a566ec91032d28da131ae8dc601c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5f97c800c54039c501f9eded0add4287e483cac1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f97c800c54039c501f9eded0add4287e483cac1":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6fdc35812ba3a566ec91032d28da131ae8dc601c":["5f97c800c54039c501f9eded0add4287e483cac1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"5f97c800c54039c501f9eded0add4287e483cac1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}