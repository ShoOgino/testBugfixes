{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8","1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0], Float.NEGATIVE_INFINITY);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    float maxScore = (totalHits[0]==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits[0], scoreDocs, maxScore);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9792120b189197625a243c2b501e802851a69c79","date":1136239207,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    TopDocCollector collector = new TopDocCollector(nDocs);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0], Float.NEGATIVE_INFINITY);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    float maxScore = (totalHits[0]==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits[0], scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    TopScoreDocCollector collector = new TopScoreDocCollector(nDocs);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    TopDocCollector collector = new TopDocCollector(nDocs);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, false);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    TopScoreDocCollector collector = new TopScoreDocCollector(nDocs);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(QueryWeight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, false);\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":["259055feeba9afa10e21ab63032f3778bb1802f1","259055feeba9afa10e21ab63032f3778bb1802f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(QueryWeight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Weight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34086bd39404420e6e5699d7c5f35c1c146bb2a4","date":1260099686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, final int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fac04ca9f7d283216cb7716937deecb68f4a5cc1","date":1260143791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs) throws IOException {\n\n    if (nDocs <= 0) {\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n    }\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fac04ca9f7d283216cb7716937deecb68f4a5cc1":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"63bc3238545c6012bd44f5d294077997f236bc4e":["9792120b189197625a243c2b501e802851a69c79"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"9792120b189197625a243c2b501e802851a69c79":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["8a9e385641d717e641408d8fbbc62be8fc766357"],"052fac7830290bd38a04cddee1a121ee07656b56":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fac04ca9f7d283216cb7716937deecb68f4a5cc1"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"fac04ca9f7d283216cb7716937deecb68f4a5cc1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe941135bdfc28c81e20b4d21422f8726af34925":["8a9e385641d717e641408d8fbbc62be8fc766357"],"63bc3238545c6012bd44f5d294077997f236bc4e":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["9792120b189197625a243c2b501e802851a69c79"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["052fac7830290bd38a04cddee1a121ee07656b56"],"9792120b189197625a243c2b501e802851a69c79":["63bc3238545c6012bd44f5d294077997f236bc4e"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["fac04ca9f7d283216cb7716937deecb68f4a5cc1"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}