{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a094a3cf22dfb1f022ba368c1605239343aa873","date":1384012589,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propagate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propagate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propagate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propogate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":null,"sourceOld":"    public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n      if (null == deleteVersionParamName) {\n        // not suppose to look at deletes at all\n        super.processDelete(cmd);\n        return;\n      }\n\n      if ( ! cmd.isDeleteById() ) {\n        // nothing to do\n        super.processDelete(cmd);\n        return;\n      }\n\n      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);\n      if (null == deleteParamValue) {\n        throw new SolrException(BAD_REQUEST,\n            \"Delete by ID must specify doc version param: \" +\n                deleteVersionParamName);\n      }\n\n\n      if (!isLeader(cmd)) {\n        // transform delete to add earlier rather than later\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        newDoc.setField(versionFieldName, deleteParamValue);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n        super.processAdd(newCmd);\n        return;\n      }\n\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {\n          // drop this older update\n          return;\n        }\n\n        // :TODO: should this logic be split and driven by two params?\n        //   - deleteVersionParam to do a version check\n        //   - some new boolean param to determine if a stub document gets added in place?\n        try {\n          // drop the delete, and instead propagate an AddDoc that\n          // replaces the doc with a new \"empty\" one that records the deleted version\n\n          SolrInputDocument newDoc = new SolrInputDocument();\n          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n              cmd.getId());\n          newDoc.setField(versionFieldName, deleteParamValue);\n\n          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n          newCmd.solrDoc = newDoc;\n          newCmd.commitWithin = cmd.commitWithin;\n\n          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(newCmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["9a094a3cf22dfb1f022ba368c1605239343aa873"],"9a094a3cf22dfb1f022ba368c1605239343aa873":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f8973f28b29873ff0d7a016e562c9036ae649a9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3f8973f28b29873ff0d7a016e562c9036ae649a9","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["3f8973f28b29873ff0d7a016e562c9036ae649a9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["9a094a3cf22dfb1f022ba368c1605239343aa873"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"9a094a3cf22dfb1f022ba368c1605239343aa873":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}