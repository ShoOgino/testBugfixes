{"path":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testGrow().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testGrow().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testGrow().mjava","sourceNew":"  public void testGrow() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a StringBuilder, first variant\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(t);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","sourceOld":"  public void testGrow() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a StringBuilder, first variant\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(t);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testGrow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testGrow().mjava","sourceNew":"  @Slow\n  public void testGrow() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a StringBuilder, first variant\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(t);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","sourceOld":"  public void testGrow() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a StringBuilder, first variant\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(t);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new CharTermAttributeImpl();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["71da933d30aea361ccc224d6544c451cbf49916d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}