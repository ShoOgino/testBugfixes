{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","commits":[{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private ServletResponse closeShield(ServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper((HttpServletResponse) response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private ServletResponse closeShield(ServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper((HttpServletResponse) response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d55d0cc95bfc03461b5c355153ca28c49076eb","date":1515469157,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper(response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private ServletResponse closeShield(ServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper((HttpServletResponse) response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private ServletResponse closeShield(ServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper((HttpServletResponse) response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["b94236357aaa22b76c10629851fe4e376e0cea82","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}