{"path":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"name\", \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spellCheckCompRH\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"Incorrect spelling results\", \"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"name\", \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spellCheckCompRH\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"Incorrect spelling results\", \"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43d0b52eb175dec4303bec3c923b29b394d91d8","date":1249762096,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"Incorrect spelling results\", \"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"name\", \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spellCheckCompRH\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"Incorrect spelling results\", \"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65a5358ab784aed1eada0d344601b7d994ea64a","date":1252448553,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"Incorrect spelling results\", \"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":["7b58c10d3071acfc0277e964ed8714e9746b4206"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  public void testSpellCheckResponse_Extended() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a43d0b52eb175dec4303bec3c923b29b394d91d8":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"b65a5358ab784aed1eada0d344601b7d994ea64a":["a43d0b52eb175dec4303bec3c923b29b394d91d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["a43d0b52eb175dec4303bec3c923b29b394d91d8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a43d0b52eb175dec4303bec3c923b29b394d91d8":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b65a5358ab784aed1eada0d344601b7d994ea64a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}