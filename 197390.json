{"path":"backwards/src/java/org/apache/lucene/index/MultiReader#reopen().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MultiReader#reopen().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MultiReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}