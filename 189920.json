{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery#compareTo(QualityQuery).mjava","commits":[{"id":"2b745e43ad81c2f93b7b4bde098bf99c2139ea73","date":1255715234,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery#compareTo(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery#compareTo(Object).mjava","sourceNew":"  /* for a nicer sort of input queries before running them.\n   * Try first as ints, fall back to string if not int. */ \n  public int compareTo(QualityQuery other) {\n    try {\n      // compare as ints when ids ints\n      int n = Integer.parseInt(queryID);\n      int nOther = Integer.parseInt(other.queryID);\n      return n - nOther;\n    } catch (NumberFormatException e) {\n      // fall back to string comparison\n      return queryID.compareTo(other.queryID);\n    }\n  }\n\n","sourceOld":"  /* for a nicer sort of input queries before running them.\n   * Try first as ints, fall back to string if not int. */ \n  public int compareTo(Object o) {\n    QualityQuery other = (QualityQuery) o;\n    try {\n      // compare as ints when ids ints\n      int n = Integer.parseInt(queryID);\n      int nOther = Integer.parseInt(other.queryID);\n      return n - nOther;\n    } catch (NumberFormatException e) {\n      // fall back to string comparison\n      return queryID.compareTo(other.queryID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery#compareTo(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery#compareTo(QualityQuery).mjava","sourceNew":"  /* for a nicer sort of input queries before running them.\n   * Try first as ints, fall back to string if not int. */ \n  public int compareTo(QualityQuery other) {\n    try {\n      // compare as ints when ids ints\n      int n = Integer.parseInt(queryID);\n      int nOther = Integer.parseInt(other.queryID);\n      return n - nOther;\n    } catch (NumberFormatException e) {\n      // fall back to string comparison\n      return queryID.compareTo(other.queryID);\n    }\n  }\n\n","sourceOld":"  /* for a nicer sort of input queries before running them.\n   * Try first as ints, fall back to string if not int. */ \n  public int compareTo(QualityQuery other) {\n    try {\n      // compare as ints when ids ints\n      int n = Integer.parseInt(queryID);\n      int nOther = Integer.parseInt(other.queryID);\n      return n - nOther;\n    } catch (NumberFormatException e) {\n      // fall back to string comparison\n      return queryID.compareTo(other.queryID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b745e43ad81c2f93b7b4bde098bf99c2139ea73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2b745e43ad81c2f93b7b4bde098bf99c2139ea73"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b745e43ad81c2f93b7b4bde098bf99c2139ea73"],"2b745e43ad81c2f93b7b4bde098bf99c2139ea73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}