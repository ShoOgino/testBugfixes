{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","commits":[{"id":"71f8255d67554b78ea0a26a5cdb916a759261aab","date":1471024473,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // this should trigger a happens-before - so flushes all caches\n      barrier.lazySet(0);\n      Thread.yield();\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dded48b5d72be2ce3fcc494c63aaea7322d8aba","date":1471032964,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","sourceNew":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // This call should hopefully flush any CPU caches and as a result make\n      // the \"invalidated\" field update visible to other threads. We specifically\n      // don't make \"invalidated\" field volatile for performance reasons, hoping the\n      // JVM won't optimize away reads of that field and hardware should ensure\n      // caches are in sync after this call. This isn't entirely \"fool-proof\" \n      // (see LUCENE-7409 discussion), but it has been shown to work in practice\n      // and we count on this behavior.\n      barrier.lazySet(0);\n      // we give other threads a bit of time to finish reads on their ByteBuffer...:\n      Thread.yield();\n      // finally unmap the ByteBuffers:\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // this should trigger a happens-before - so flushes all caches\n      barrier.lazySet(0);\n      Thread.yield();\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // This call should hopefully flush any CPU caches and as a result make\n      // the \"invalidated\" field update visible to other threads. We specifically\n      // don't make \"invalidated\" field volatile for performance reasons, hoping the\n      // JVM won't optimize away reads of that field and hardware should ensure\n      // caches are in sync after this call. This isn't entirely \"fool-proof\" \n      // (see LUCENE-7409 discussion), but it has been shown to work in practice\n      // and we count on this behavior.\n      barrier.lazySet(0);\n      // we give other threads a bit of time to finish reads on their ByteBuffer...:\n      Thread.yield();\n      // finally unmap the ByteBuffers:\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // This call should hopefully flush any CPU caches and as a result make\n      // the \"invalidated\" field update visible to other threads. We specifically\n      // don't make \"invalidated\" field volatile for performance reasons, hoping the\n      // JVM won't optimize away reads of that field and hardware should ensure\n      // caches are in sync after this call. This isn't entirely \"fool-proof\" \n      // (see LUCENE-7409 discussion), but it has been shown to work in practice\n      // and we count on this behavior.\n      barrier.lazySet(0);\n      // we give other threads a bit of time to finish reads on their ByteBuffer...:\n      Thread.yield();\n      // finally unmap the ByteBuffers:\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferGuard#invalidateAndUnmap(ByteBuffer...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invalidates this guard and unmaps (if supported).\n   */\n  public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n    if (cleaner != null) {\n      invalidated = true;\n      // This call should hopefully flush any CPU caches and as a result make\n      // the \"invalidated\" field update visible to other threads. We specifically\n      // don't make \"invalidated\" field volatile for performance reasons, hoping the\n      // JVM won't optimize away reads of that field and hardware should ensure\n      // caches are in sync after this call. This isn't entirely \"fool-proof\" \n      // (see LUCENE-7409 discussion), but it has been shown to work in practice\n      // and we count on this behavior.\n      barrier.lazySet(0);\n      // we give other threads a bit of time to finish reads on their ByteBuffer...:\n      Thread.yield();\n      // finally unmap the ByteBuffers:\n      for (ByteBuffer b : bufs) {\n        cleaner.freeBuffer(resourceDescription, b);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4dded48b5d72be2ce3fcc494c63aaea7322d8aba"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4dded48b5d72be2ce3fcc494c63aaea7322d8aba":["71f8255d67554b78ea0a26a5cdb916a759261aab"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","71f8255d67554b78ea0a26a5cdb916a759261aab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["4dded48b5d72be2ce3fcc494c63aaea7322d8aba"],"4dded48b5d72be2ce3fcc494c63aaea7322d8aba":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}