{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(IndexReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(IndexReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(IndexReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = new SlowCompositeReaderWrapper(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.shutdown();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.shutdown();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.shutdown();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.shutdown();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":null,"sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterHandleNumericParseError().mjava","sourceNew":null,"sourceOld":"  public void testGetFilterHandleNumericParseError() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(false);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    Directory ramDir = newDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, newIndexWriterConfig(null));\n    writer.commit();\n    try {\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(ramDir));\n      try {\n        assertNull(filter.getDocIdSet(reader.getContext(), reader.getLiveDocs()));\n      }\n      finally {\n        reader.close();\n      }\n    }\n    finally {\n      writer.commit();\n      writer.close();\n      ramDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2713584a660051cd646423be682771e3bbd99985":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["211b1506e56f7860762fbd4698f6d1d1b57f672c","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}