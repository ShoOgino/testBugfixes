{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testParse().mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testParse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParse() throws SyntaxError {\n    assertInterval(\"test_l_dv\", \"(0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,2]\", new long[]{1, 2}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2]\", new long[]{0, 1, 2}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2)\", new long[]{0, 1}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,*)\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, 0, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(*,2)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1}, new long[]{}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(*,*)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"[0,*]\", new long[]{0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"[*,2]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2}, new long[]{}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[*,*]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"(2,2)\", new long[]{}, new long[]{2, 1, 0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,0)\", new long[]{}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \"]\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \")\", new long[]{1, 2, 3, Integer.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \"]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 1, 2, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \")\", new long[]{-1, Integer.MIN_VALUE, 1, 2, Integer.MAX_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"( 0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(   0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,   2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(  0  ,   2  )\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"  (  0  ,   2  )  \", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"[-1,1]\", new long[]{-1, 0, 1}, new long[]{-2, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertStringInterval(\"test_s_dv\", \"[A,B]\", \"A\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A,b]\", \"A\", \"b\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\,,B]\", \"A,\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\),B]\", \"A)\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"['A',B]\", \"'A'\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[\\\"A\\\",B]\", \"\\\"A\\\"\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A B C,B]\", \"A B C\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[ A B C ,B]\", \"A B C\", \"B\");\n//    These two are currently not possible\n//    assertStringInterval(\"test_s_dv\", \"[\\\\ A B C ,B]\", \" A B C\", \"B\");\n//    assertStringInterval(\"test_s_dv\", \"[\\\\*,B]\", \"*\", \"B\");\n    \n    //invalid intervals\n    assertBadInterval(\"test_l_dv\", \"0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"{0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2}\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0, )\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(,0)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 TO 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 \\\\, 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(A, 2)\", \"Invalid start interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(2, A)\", \"Invalid end interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(0,)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0,-1)\", \"Start is higher than end in interval for key\");\n\n    assertBadInterval(\"test_s_dv\", \"A,B)\", \"Invalid start character\");\n    assertBadInterval(\"test_s_dv\", \"(B,A)\", \"Start is higher than end in interval for key\");\n    assertBadInterval(\"test_s_dv\", \"(a,B)\", \"Start is higher than end in interval for key\");\n    \n    \n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\", \"test_l_dv\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\", \"test_l_dv\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\", \"test_l_dv\", \"5\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\", \"test_l_dv\", \"6\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"7\"));\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"8\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"9\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    \n    // facet.interval not set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=0\");\n    \n    // facet.interval only on one of the fields\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=1\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\");\n    \n    // existing fields in facet.interval with no intervals defined\n    assertQEx(\"Unexpected exception\", \n        \"Missing required parameter: f.test_l_dv.facet.interval.set (or default: facet.interval.set)\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // use of facet.interval.set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\"\n      );\n    \n    // multiple facet.interval.set \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[2,3]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[3,4]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set and override\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,4]\",\n        \"f.test_l_dv.facet.interval.set\", \"[4,5]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=2\", // interval [1,2] not present\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[4,5]'][.=2]\"\n      );\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int)=1\", // only [cat,dog] in test_s_dv\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=3\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set with wrong field type\n    assertQEx(\"Unexpected Exception\",\n        \"Invalid start interval\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_l_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e3055974cda209e4f95efadcd904f0ebf03ada","date":1406238198,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testParse().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testParse().mjava","sourceNew":"  @Test\n  public void testParse() throws SyntaxError {\n    assertInterval(\"test_l_dv\", \"(0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,2]\", new long[]{1, 2}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2]\", new long[]{0, 1, 2}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2)\", new long[]{0, 1}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,*)\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, 0, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(*,2)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1}, new long[]{}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(*,*)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"[0,*]\", new long[]{0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"[*,2]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2}, new long[]{}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[*,*]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"(2,2)\", new long[]{}, new long[]{2, 1, 0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,0)\", new long[]{}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \"]\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \")\", new long[]{1, 2, 3, Integer.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \"]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 1, 2, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \")\", new long[]{-1, Integer.MIN_VALUE, 1, 2, Integer.MAX_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"( 0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(   0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,   2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(  0  ,   2  )\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"  (  0  ,   2  )  \", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"[-1,1]\", new long[]{-1, 0, 1}, new long[]{-2, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertStringInterval(\"test_s_dv\", \"[A,B]\", \"A\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A,b]\", \"A\", \"b\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\,,B]\", \"A,\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\),B]\", \"A)\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"['A',B]\", \"'A'\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[\\\"A\\\",B]\", \"\\\"A\\\"\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A B C,B]\", \"A B C\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[ A B C ,B]\", \"A B C\", \"B\");\n//    These two are currently not possible\n//    assertStringInterval(\"test_s_dv\", \"[\\\\ A B C ,B]\", \" A B C\", \"B\");\n//    assertStringInterval(\"test_s_dv\", \"[\\\\*,B]\", \"*\", \"B\");\n    \n    //invalid intervals\n    assertBadInterval(\"test_l_dv\", \"0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"{0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2}\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0, )\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(,0)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 TO 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 \\\\, 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(A, 2)\", \"Invalid start interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(2, A)\", \"Invalid end interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(0,)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0,-1)\", \"Start is higher than end in interval for key\");\n\n    assertBadInterval(\"test_s_dv\", \"A,B)\", \"Invalid start character\");\n    assertBadInterval(\"test_s_dv\", \"(B,A)\", \"Start is higher than end in interval for key\");\n    assertBadInterval(\"test_s_dv\", \"(a,B)\", \"Start is higher than end in interval for key\");\n    \n    assertIntervalKey(\"test_s_dv\", \"[A,B]\", \"[A,B]\");\n    assertIntervalKey(\"test_s_dv\", \"(A,*]\", \"(A,*]\");\n    assertIntervalKey(\"test_s_dv\", \"{!}(A,*]\", \"(A,*]\");\n    assertIntervalKey(\"test_s_dv\", \"{!key=foo}(A,*]\", \"foo\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='foo'}(A,*]\", \"foo\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='foo bar'}(A,*]\", \"foo bar\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='foo' bar}(A,*]\", \"foo\");\n    assertIntervalKey(\"test_s_dv\", \"{!key=$i}(A,*]\", \"foo\", \"i\", \"foo\");\n    assertIntervalKey(\"test_s_dv\", \"{!key=$i}(A,*]\", \"foo bar\", \"i\", \"foo bar\");\n    assertIntervalKey(\"test_s_dv\", \"{!key=$i}(A,*]\", \"'foo'\", \"i\", \"'foo'\");\n    assertIntervalKey(\"test_s_dv\", \"{!key=$i}(A,*]\", \"\\\"foo\\\"\", \"i\", \"\\\"foo\\\"\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='[A,B]'}(A,B)\", \"[A,B]\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='\\\\{\\\\{\\\\{'}(A,B)\", \"{{{\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='\\\\{A,B\\\\}'}(A,B)\", \"{A,B}\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='\\\"A,B\\\"'}(A,B)\", \"\\\"A,B\\\"\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='A..B'}(A,B)\", \"A..B\");\n    assertIntervalKey(\"test_s_dv\", \"{!key='A TO B'}(A,B)\", \"A TO B\");\n    \n    \n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\", \"test_l_dv\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\", \"test_l_dv\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\", \"test_l_dv\", \"5\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\", \"test_l_dv\", \"6\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"7\"));\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"8\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"9\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    \n    // facet.interval not set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=0\");\n    \n    // facet.interval only on one of the fields\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=1\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\");\n    \n    // existing fields in facet.interval with no intervals defined\n    assertQEx(\"Unexpected exception\", \n        \"Missing required parameter: f.test_l_dv.facet.interval.set (or default: facet.interval.set)\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // use of facet.interval.set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\"\n      );\n    \n    // multiple facet.interval.set \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[2,3]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[3,4]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set and override\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,4]\",\n        \"f.test_l_dv.facet.interval.set\", \"[4,5]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=2\", // interval [1,2] not present\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[4,5]'][.=2]\"\n      );\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int)=1\", // only [cat,dog] in test_s_dv\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=3\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set with wrong field type\n    assertQEx(\"Unexpected Exception\",\n        \"Invalid start interval\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_l_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParse() throws SyntaxError {\n    assertInterval(\"test_l_dv\", \"(0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,2]\", new long[]{1, 2}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2]\", new long[]{0, 1, 2}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[0,2)\", new long[]{0, 1}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,*)\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, 0, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(*,2)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1}, new long[]{}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(*,*)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"[0,*]\", new long[]{0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"[*,2]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2}, new long[]{}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[*,*]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 0, 1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n\n    assertInterval(\"test_l_dv\", \"(2,2)\", new long[]{}, new long[]{2, 1, 0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,0)\", new long[]{}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \"]\", new long[]{1, 2, 3, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(0,\" + Long.MAX_VALUE + \")\", new long[]{1, 2, 3, Integer.MAX_VALUE}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",0)\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{}, new long[]{1, 2, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"[\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \"]\", new long[]{-1, Integer.MIN_VALUE, Long.MIN_VALUE, 1, 2, Integer.MAX_VALUE, Long.MAX_VALUE}, new long[]{}, new long[]{});\n    assertInterval(\"test_l_dv\", \"(\" + Long.MIN_VALUE + \",\" + Long.MAX_VALUE + \")\", new long[]{-1, Integer.MIN_VALUE, 1, 2, Integer.MAX_VALUE}, new long[]{Long.MIN_VALUE}, new long[]{Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"( 0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(   0,2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(0,   2)\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"(  0  ,   2  )\", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n    assertInterval(\"test_l_dv\", \"  (  0  ,   2  )  \", new long[]{1}, new long[]{0, -1, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertInterval(\"test_l_dv\", \"[-1,1]\", new long[]{-1, 0, 1}, new long[]{-2, Integer.MIN_VALUE, Long.MIN_VALUE}, new long[]{2, 3, Integer.MAX_VALUE, Long.MAX_VALUE});\n\n    assertStringInterval(\"test_s_dv\", \"[A,B]\", \"A\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A,b]\", \"A\", \"b\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\,,B]\", \"A,\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A\\\\),B]\", \"A)\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"['A',B]\", \"'A'\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[\\\"A\\\",B]\", \"\\\"A\\\"\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[A B C,B]\", \"A B C\", \"B\");\n    assertStringInterval(\"test_s_dv\", \"[ A B C ,B]\", \"A B C\", \"B\");\n//    These two are currently not possible\n//    assertStringInterval(\"test_s_dv\", \"[\\\\ A B C ,B]\", \" A B C\", \"B\");\n//    assertStringInterval(\"test_s_dv\", \"[\\\\*,B]\", \"*\", \"B\");\n    \n    //invalid intervals\n    assertBadInterval(\"test_l_dv\", \"0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"{0,2)\", \"Invalid start character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0,2}\", \"Invalid end character\");\n    assertBadInterval(\"test_l_dv\", \"(0, )\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(,0)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 TO 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(0 \\\\, 2)\", \"Missing unescaped comma separating interval\");\n    assertBadInterval(\"test_l_dv\", \"(A, 2)\", \"Invalid start interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(2, A)\", \"Invalid end interval for key\");\n    assertBadInterval(\"test_l_dv\", \"(0,)\", \"Empty interval limit\");\n    assertBadInterval(\"test_l_dv\", \"(0,-1)\", \"Start is higher than end in interval for key\");\n\n    assertBadInterval(\"test_s_dv\", \"A,B)\", \"Invalid start character\");\n    assertBadInterval(\"test_s_dv\", \"(B,A)\", \"Start is higher than end in interval for key\");\n    assertBadInterval(\"test_s_dv\", \"(a,B)\", \"Start is higher than end in interval for key\");\n    \n    \n    assertU(adoc(\"id\", \"1\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"test_s_dv\", \"bird\", \"test_l_dv\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"test_s_dv\", \"turtle\", \"test_l_dv\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"test_s_dv\", \"\\\\goodbye,\", \"test_l_dv\", \"5\"));\n    assertU(adoc(\"id\", \"6\", \"test_s_dv\", \",hello\\\\\", \"test_l_dv\", \"6\"));\n    assertU(adoc(\"id\", \"7\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"7\"));\n    assertU(adoc(\"id\", \"8\", \"test_s_dv\", \"dog\", \"test_l_dv\", \"8\"));\n    assertU(adoc(\"id\", \"9\", \"test_s_dv\", \"cat\", \"test_l_dv\", \"9\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(commit());\n    \n    // facet.interval not set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=0\");\n    \n    // facet.interval only on one of the fields\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,6]\",\n        \"f.test_l_dv.facet.interval.set\", \"[5,9]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=1\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\");\n    \n    // existing fields in facet.interval with no intervals defined\n    assertQEx(\"Unexpected exception\", \n        \"Missing required parameter: f.test_l_dv.facet.interval.set (or default: facet.interval.set)\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // use of facet.interval.set\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\"\n      );\n    \n    // multiple facet.interval.set \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[2,3]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[3,4]'][.=0]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set and override\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"f.test_l_dv.facet.interval.set\", \"[3,4]\",\n        \"f.test_l_dv.facet.interval.set\", \"[4,5]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=2\", // interval [1,2] not present\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[4,5]'][.=2]\"\n      );\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_s_dv\",\n        \"facet.interval\", \"test_l_dv\",\n        \"facet.interval.set\", \"[1,2]\",\n        \"facet.interval.set\", \"[2,3]\",\n        \"facet.interval.set\", \"[3,4]\",\n        \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n      \"count(//lst[@name='facet_intervals']/lst)=2\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int)=1\", // only [cat,dog] in test_s_dv\n      \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]\",\n      \"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=3\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]\",\n      \"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]\"\n      );\n    \n    // use of facet.interval.set with wrong field type\n    assertQEx(\"Unexpected Exception\",\n        \"Invalid start interval\",\n        req(\"q\", \"*:*\", \"facet\", \"true\",\n        \"facet.interval\", \"test_l_dv\",\n        \"f.test_l_dv.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e3055974cda209e4f95efadcd904f0ebf03ada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e3055974cda209e4f95efadcd904f0ebf03ada"],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}