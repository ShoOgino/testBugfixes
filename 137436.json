{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#parseAffix(CharArrayMap[List[Affix]],String,LineNumberReader,String).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#parseAffix(CharArrayMap[List[Affix]],String,LineNumberReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<Affix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n      }\n\n      Affix affix = new Affix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && !condition.endsWith(\"]\")) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = condition.replace(\"-\", \"\\\\-\");\n      }\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<Affix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<Affix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33c65b3ff11b1892d2291b7504c908e0192b8983","5dc1f9b25a92ab637175c85b5338de21a939f56f","e663fc56207ad514a58b831676d2b407daef80ab","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d","date":1393355889,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#parseAffix(CharArrayMap[List[Affix]],String,LineNumberReader,String,Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#parseAffix(CharArrayMap[List[Affix]],String,LineNumberReader,String).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<Affix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n      }\n\n      Affix affix = new Affix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && !condition.endsWith(\"]\")) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = condition.replace(\"-\", \"\\\\-\");\n      }\n      // deduplicate patterns\n      String regex = String.format(Locale.ROOT, conditionPattern, condition);\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        seenPatterns.put(regex, patternIndex);\n        Pattern pattern = Pattern.compile(regex);\n        patterns.add(pattern);\n      }\n      affix.setCondition(patterns.get(patternIndex));\n      affix.setCrossProduct(crossProduct);\n      \n      List<Affix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<Affix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<Affix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n      }\n\n      Affix affix = new Affix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && !condition.endsWith(\"]\")) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = condition.replace(\"-\", \"\\\\-\");\n      }\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<Affix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<Affix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}