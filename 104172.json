{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","commits":[{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95bf9c30ed04bd202c0161831dc06decc6670b73","date":1200828698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64","date":1201200417,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bc667c48cc0a6ef96df2ed9a764da342e3d1730","date":1205081012,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker\",\n      \"doc.maker.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"doc.maker.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocMaker.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"autocommit=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 500;\n\n    // Creates a line file with first 500 docs from reuters\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource\",\n      \"content.source.forever=false\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    // Verify we got somewhere between 1-500 lines (some\n    // Reuters docs have no body, which WriteLineDoc task\n    // skips).\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertTrue(\"did not see the right number of docs; should be > 0 and <= \" + NUM_TRY_DOCS + \" but was \" + numLines, numLines > 0 && numLines <= NUM_TRY_DOCS);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT)\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT)\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(System.getProperty(\"tempDir\"), \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"95bf9c30ed04bd202c0161831dc06decc6670b73":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["95bf9c30ed04bd202c0161831dc06decc6670b73"],"4256bc1b3c94786287ccdfc751230374521843cf":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"]},"commit2Childs":{"95bf9c30ed04bd202c0161831dc06decc6670b73":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"4256bc1b3c94786287ccdfc751230374521843cf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["4256bc1b3c94786287ccdfc751230374521843cf"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["95bf9c30ed04bd202c0161831dc06decc6670b73"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}