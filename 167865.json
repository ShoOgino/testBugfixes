{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaCopyFields#doTest().mjava","commits":[{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaCopyFields#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add the same copy field directive a bunch of times.    \n    // Then verify each shard's schema has it.\n    int numFields = 200;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      final String content = \"[{\\\"source\\\":\\\"\"+\"sku1\"+\"\\\",\\\"dest\\\":[\\\"sku2\\\"]}]\";\n      String request = \"/schema/copyfields/?wt=xml\";             \n      String response = publisher.post(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"POST REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n    \n    String request = \"/schema/copyfields/?wt=xml&indent=on&source.fl=sku1\";\n    for (RestTestHarness client : restTestHarnesses) {\n      String response = client.query(request);\n      String result = client.validateXPath(response,\n          \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n          \"/response/arr[@name='copyFields']/lst/str[@name='dest'][.='sku2']\");\n      if (null != result) {\n        fail(\"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b51843dd98041bc40be26a47e44d7cb49bef72","date":1403043869,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaCopyFields#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add the same copy field directive a bunch of times.    \n    // Then verify each shard's schema has it.\n    int numFields = 200;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      final String content = \"[{\\\"source\\\":\\\"\"+\"sku1\"+\"\\\",\\\"dest\\\":[\\\"sku2\\\"]}]\";\n      String request = \"/schema/copyfields/?wt=xml\";             \n      String response = publisher.post(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"POST REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n    \n    String request = \"/schema/copyfields/?wt=xml&indent=on&source.fl=sku1\";\n    for (RestTestHarness client : restTestHarnesses) {\n      String response = client.query(request);\n      String result = client.validateXPath(response,\n          \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n          \"/response/arr[@name='copyFields']/lst/str[@name='dest'][.='sku2']\");\n      if (null != result) {\n        fail(\"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaCopyFields#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add the same copy field directive a bunch of times.    \n    // Then verify each shard's schema has it.\n    int numFields = 200;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      final String content = \"[{\\\"source\\\":\\\"\"+\"sku1\"+\"\\\",\\\"dest\\\":[\\\"sku2\\\"]}]\";\n      String request = \"/schema/copyfields/?wt=xml\";             \n      String response = publisher.post(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"POST REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n    \n    String request = \"/schema/copyfields/?wt=xml&indent=on&source.fl=sku1\";\n    for (RestTestHarness client : restTestHarnesses) {\n      String response = client.query(request);\n      String result = client.validateXPath(response,\n          \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n          \"/response/arr[@name='copyFields']/lst/str[@name='dest'][.='sku2']\");\n      if (null != result) {\n        fail(\"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","24b51843dd98041bc40be26a47e44d7cb49bef72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24b51843dd98041bc40be26a47e44d7cb49bef72"]},"commit2Childs":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["24b51843dd98041bc40be26a47e44d7cb49bef72","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}