{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testNoRewrite().mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testNoRewrite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Rewritten Boolean queries may omit matches from {@link\n   * org.apache.lucene.search.BooleanClause.Occur#SHOULD} clauses. Check that this isn't the case.\n   */\n  @Test\n  public void testNoRewrite() throws IOException {\n    String field1 = FLD_TEXT_POS_OFFS1;\n    String field2 = FLD_TEXT_POS_OFFS2;\n    withReader(\n        List.of(\n            Map.of(\n                field1, values(\"0100\"),\n                field2, values(\"loo bar\")),\n            Map.of(\n                field1, values(\"0200\"),\n                field2, values(\"foo bar\"))),\n        reader -> {\n          String expected = fmt(\"0: (%s: '>0100<')(%s: 'loo >bar<')\", field1, field2);\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* OR %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* AND %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testNoRewrite().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testNoRewrite().mjava","sourceNew":"  /**\n   * Rewritten Boolean queries may omit matches from {@link\n   * org.apache.lucene.search.BooleanClause.Occur#SHOULD} clauses. Check that this isn't the case.\n   */\n  @Test\n  public void testNoRewrite() throws IOException {\n    String field1 = FLD_TEXT_POS_OFFS1;\n    String field2 = FLD_TEXT_POS_OFFS2;\n\n    new IndexBuilder(this::toField)\n        .doc(fields -> {\n          fields.add(field1, \"0100\");\n          fields.add(field2, \"loo bar\");\n        })\n        .doc(fields -> {\n          fields.add(field1, \"0200\");\n          fields.add(field2, \"foo bar\");\n        })\n        .build(analyzer, reader -> {\n          String expected = fmt(\"0: (%s: '>0100<')(%s: 'loo >bar<')\", field1, field2);\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* OR %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* AND %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n        }\n    );\n  }\n\n","sourceOld":"  /**\n   * Rewritten Boolean queries may omit matches from {@link\n   * org.apache.lucene.search.BooleanClause.Occur#SHOULD} clauses. Check that this isn't the case.\n   */\n  @Test\n  public void testNoRewrite() throws IOException {\n    String field1 = FLD_TEXT_POS_OFFS1;\n    String field2 = FLD_TEXT_POS_OFFS2;\n    withReader(\n        List.of(\n            Map.of(\n                field1, values(\"0100\"),\n                field2, values(\"loo bar\")),\n            Map.of(\n                field1, values(\"0200\"),\n                field2, values(\"foo bar\"))),\n        reader -> {\n          String expected = fmt(\"0: (%s: '>0100<')(%s: 'loo >bar<')\", field1, field2);\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* OR %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n\n          assertThat(\n              highlights(\n                  reader,\n                  stdQueryParser.apply(fmt(\"+%s:01* AND %s:bar\", field1, field2), field1)),\n              containsInAnyOrder(expected));\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}