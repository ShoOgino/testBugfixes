{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateBinaryDocValue(term, \"bdv\", toBytes(value));\n    writer.updateBinaryDocValue(term, \"control\", toBytes(value * 2));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateBinaryDocValue(term, \"bdv\", toBytes(value));\n    writer.updateBinaryDocValue(term, \"control\", toBytes(value * 2));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateBinaryDocValue(term, \"bdv\", toBytes(value));\n    writer.updateBinaryDocValue(term, \"control\", toBytes(value * 2));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70285ef5917fa2c8feec026d4be4d9c20fa89162","date":1401366288,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateBinaryDocValue(term, \"bdv\", toBytes(value));\n    writer.updateBinaryDocValue(term, \"control\", toBytes(value * 2));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i, scratch)*2, getValue(control, i, scratch));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.shutdown();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      writer.addIndexes(reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":["06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, bdv.nextDoc());\n        assertEquals(i, control.nextDoc());\n        assertEquals(getValue(bdv)*2, getValue(control));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, bdv.nextDoc());\n        assertEquals(i, control.nextDoc());\n        assertEquals(getValue(bdv)*2, getValue(control));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, bdv.nextDoc());\n        assertEquals(i, control.nextDoc());\n        assertEquals(getValue(bdv)*2, getValue(control));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir1, conf);\n    \n    final int numDocs = atLeast(50);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n\n    // create first index\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", RandomPicks.randomFrom(random(), randomTerms), Store.NO));\n      doc.add(new BinaryDocValuesField(\"bdv\", toBytes(4L)));\n      doc.add(new BinaryDocValuesField(\"control\", toBytes(8L)));\n      writer.addDocument(doc);\n    }\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    // update some docs to a random value\n    long value = random().nextInt();\n    Term term = new Term(\"id\", RandomPicks.randomFrom(random(), randomTerms));\n    writer.updateDocValues(term, new BinaryDocValuesField(\"bdv\", toBytes(value)), new BinaryDocValuesField(\"control\", toBytes(value * 2)));\n    writer.close();\n    \n    Directory dir2 = newDirectory();\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir2, conf);\n    if (random().nextBoolean()) {\n      writer.addIndexes(dir1);\n    } else {\n      DirectoryReader reader = DirectoryReader.open(dir1);\n      TestUtil.addIndexesSlowly(writer, reader);\n      reader.close();\n    }\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir2);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      BinaryDocValues control = r.getBinaryDocValues(\"control\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(getValue(bdv, i)*2, getValue(control, i));\n      }\n    }\n    reader.close();\n    \n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"70285ef5917fa2c8feec026d4be4d9c20fa89162":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70285ef5917fa2c8feec026d4be4d9c20fa89162"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}