{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","commits":[{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed, true);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a485550d032df41f9ff97f4d97d81e2be011d3ca","date":1414053996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    if (hasDocValues == false) {\n      // This will throw an exc if the caller tried to\n      // change the DV type for the field:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    // This will throw an exc if the caller tried to\n    // change the DV type for the field:\n    fp.fieldInfo.setDocValuesType(dvType);\n    if (hasDocValues == false) {\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This will throw an exc if the caller tried to\n      // change the DV type for the field:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    boolean hasDocValues = fp.fieldInfo.hasDocValues();\n\n    if (hasDocValues == false) {\n      // This will throw an exc if the caller tried to\n      // change the DV type for the field:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This will throw an exc if the caller tried to\n      // change the DV type for the field:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc\n   *  value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3394716f52b34ab259ad5247e7595d9f9db6e935"],"8881d151c969a46b4293caa77faa7ecd63239100":["556a4aab886d75371b2af129d87be3c2795cea76"],"556a4aab886d75371b2af129d87be3c2795cea76":["a485550d032df41f9ff97f4d97d81e2be011d3ca"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["3394716f52b34ab259ad5247e7595d9f9db6e935","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"a485550d032df41f9ff97f4d97d81e2be011d3ca":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c7e49be259508735752fba88085255014a6ecf"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["8881d151c969a46b4293caa77faa7ecd63239100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"52c7e49be259508735752fba88085255014a6ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"8881d151c969a46b4293caa77faa7ecd63239100":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"556a4aab886d75371b2af129d87be3c2795cea76":["8881d151c969a46b4293caa77faa7ecd63239100"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"a485550d032df41f9ff97f4d97d81e2be011d3ca":["556a4aab886d75371b2af129d87be3c2795cea76"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a485550d032df41f9ff97f4d97d81e2be011d3ca"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","22a2e66dfda83847e80095b8693c660742ab3e9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}