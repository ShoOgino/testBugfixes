{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    if (collectionStates.size() == 1) {\n      CollectionRef ref = collectionStates.values().iterator().next();\n      DocCollection docCollection = ref.get();\n      if (docCollection.getStateFormat() > 1) {\n        jsonWriter.write(Collections.singletonMap(docCollection.getName(), docCollection));\n        // serializing a single DocCollection that is persisted outside of clusterstate.json\n        return;\n      }\n    }\n\n    LinkedHashMap<String , DocCollection> map = new LinkedHashMap<>();\n    for (Entry<String, CollectionRef> e : collectionStates.entrySet()) {\n      // using this class check to avoid fetching from ZK in case of lazily loaded collection\n      if (e.getValue().getClass() == CollectionRef.class) {\n        // check if it is a lazily loaded collection outside of clusterstate.json\n        DocCollection coll = e.getValue().get();\n        if (coll.getStateFormat() == 1) {\n          map.put(coll.getName(),coll);\n        }\n      }\n    }\n    jsonWriter.write(map);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    jsonWriter.write(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28ac6f4e1415bdb37652b37bbf30c3c571c97688","date":1422364884,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    LinkedHashMap<String , DocCollection> map = new LinkedHashMap<>();\n    for (Entry<String, CollectionRef> e : collectionStates.entrySet()) {\n      // using this class check to avoid fetching from ZK in case of lazily loaded collection\n      if (e.getValue().getClass() == CollectionRef.class) {\n        // check if it is a lazily loaded collection outside of clusterstate.json\n        DocCollection coll = e.getValue().get();\n        if (coll.getStateFormat() == 1) {\n          map.put(coll.getName(),coll);\n        }\n      }\n    }\n    jsonWriter.write(map);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    if (collectionStates.size() == 1) {\n      CollectionRef ref = collectionStates.values().iterator().next();\n      DocCollection docCollection = ref.get();\n      if (docCollection.getStateFormat() > 1) {\n        jsonWriter.write(Collections.singletonMap(docCollection.getName(), docCollection));\n        // serializing a single DocCollection that is persisted outside of clusterstate.json\n        return;\n      }\n    }\n\n    LinkedHashMap<String , DocCollection> map = new LinkedHashMap<>();\n    for (Entry<String, CollectionRef> e : collectionStates.entrySet()) {\n      // using this class check to avoid fetching from ZK in case of lazily loaded collection\n      if (e.getValue().getClass() == CollectionRef.class) {\n        // check if it is a lazily loaded collection outside of clusterstate.json\n        DocCollection coll = e.getValue().get();\n        if (coll.getStateFormat() == 1) {\n          map.put(coll.getName(),coll);\n        }\n      }\n    }\n    jsonWriter.write(map);\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#write(JSONWriter).mjava","sourceNew":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    LinkedHashMap<String , DocCollection> map = new LinkedHashMap<>();\n    for (Entry<String, CollectionRef> e : collectionStates.entrySet()) {\n      if (e.getValue().getClass() == CollectionRef.class) {\n        DocCollection coll = e.getValue().get();\n        map.put(coll.getName(),coll);\n      }\n    }\n    jsonWriter.write(map);\n  }\n\n","sourceOld":"  @Override\n  public void write(JSONWriter jsonWriter) {\n    LinkedHashMap<String , DocCollection> map = new LinkedHashMap<>();\n    for (Entry<String, CollectionRef> e : collectionStates.entrySet()) {\n      // using this class check to avoid fetching from ZK in case of lazily loaded collection\n      if (e.getValue().getClass() == CollectionRef.class) {\n        // check if it is a lazily loaded collection outside of clusterstate.json\n        DocCollection coll = e.getValue().get();\n        if (coll.getStateFormat() == 1) {\n          map.put(coll.getName(),coll);\n        }\n      }\n    }\n    jsonWriter.write(map);\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"28ac6f4e1415bdb37652b37bbf30c3c571c97688":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"9279b175e5e66258442d2123a50f052219a9cc1b":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","9279b175e5e66258442d2123a50f052219a9cc1b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28ac6f4e1415bdb37652b37bbf30c3c571c97688":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}