{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"/dev/null","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":null,"sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"/dev/null","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1","date":1298826885,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        Source xsltSource = new StreamSource(xslt);\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        xslTransformer = transFact.newTransformer(xsltSource);\n        LOG\n                .info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b24326411db492f92ea49f6fb947c90bc73cf19e":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1","c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"1da8d55113b689b06716246649de6f62430f15c0":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}