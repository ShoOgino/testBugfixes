{"path":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","commits":[{"id":"15345a5c40a4fa937f1b1b8462ddd6677135378a","date":1276548894,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["15345a5c40a4fa937f1b1b8462ddd6677135378a"],"15345a5c40a4fa937f1b1b8462ddd6677135378a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["15345a5c40a4fa937f1b1b8462ddd6677135378a","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15345a5c40a4fa937f1b1b8462ddd6677135378a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15345a5c40a4fa937f1b1b8462ddd6677135378a":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15345a5c40a4fa937f1b1b8462ddd6677135378a","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}