{"path":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"/dev/null","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":null,"sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"/dev/null","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      boolean b = te.skipTo(proto.createTerm(s));\n      assertEquals(b, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(proto.createTerm(\"000\")));\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().text());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        boolean b = te.skipTo(rnum);\n        assertEquals(true, b);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().text());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    TermIndex ti = new TermIndex(proto.field());\n    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    // iterate through first\n    while(te.term() != null) te.next();\n    assertEquals(size, te.getTermNumber());\n    te.close();\n\n    te = ti.getEnumerator(req.getSearcher().getIndexReader());\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      BytesRef br = te.skipTo(new BytesRef(s));\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      } else {\n        assertEquals(null, te.term());\n        assertEquals(size, te.getTermNumber());\n      }\n    }\n\n    // test seeking before term\n    assertEquals(size>0, te.skipTo(new BytesRef(\"000\")) != null);\n    assertEquals(0, te.getTermNumber());\n    if (size>0) {\n      assertEquals(t(0), te.term().utf8ToString());\n    } else {\n      assertEquals(null, te.term());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        BytesRef br = te.skipTo(rnum);\n        assertNotNull(br);\n        assertEquals(rnum, te.pos);\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seek(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seek(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        assertTrue(te.seek((long) rnum) != TermsEnum.SeekStatus.END);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["fd9cc9d77712aba3662f24632df7539ab75e3667","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","28427ef110c4c5bf5b4057731b83110bd1e13724"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["95ae76773bf2b95987d5f9c8f566ab3738953fb4","fd9cc9d77712aba3662f24632df7539ab75e3667"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c220849f876de24a79f756f65b3eb045db59f63f","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["28427ef110c4c5bf5b4057731b83110bd1e13724","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["c220849f876de24a79f756f65b3eb045db59f63f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","c220849f876de24a79f756f65b3eb045db59f63f"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"c220849f876de24a79f756f65b3eb045db59f63f":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","95ae76773bf2b95987d5f9c8f566ab3738953fb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667","45669a651c970812a680841b97a77cce06af559f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}