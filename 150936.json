{"path":"src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","commits":[{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttribute(Class).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   */\n  public <A extends Attribute> A addAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      addAttributeImpl(attImpl = this.factory.createAttributeInstance(attClass));\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   * <p>Signature for Java 1.5: <code>public &lt;T extends Attribute&gt; T addAttribute(Class&lt;T&gt;)</code>\n   */\n  public Attribute addAttribute(Class attClass) {\n    final Attribute att = (Attribute) attributes.get(attClass);\n    if (att == null) {\n      final AttributeImpl attImpl = this.factory.createAttributeInstance(attClass);\n      addAttributeImpl(attImpl);\n      return attImpl;\n    } else {\n      return att;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d93afaa54986ce3bf1e98013e0f443da042ef7","date":1258895890,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   */\n  public <A extends Attribute> A addAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      if (!(attClass.isInterface() && Attribute.class.isAssignableFrom(attClass))) {\n        throw new IllegalArgumentException(\n          \"addAttribute() only accepts an interface that extends Attribute, but \" +\n          attClass.getName() + \" does not fulfil this contract.\"\n        );\n      }\n      addAttributeImpl(attImpl = this.factory.createAttributeInstance(attClass));\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   */\n  public <A extends Attribute> A addAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      addAttributeImpl(attImpl = this.factory.createAttributeInstance(attClass));\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_addAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   */\n  public <A extends Attribute> A addAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      if (!(attClass.isInterface() && Attribute.class.isAssignableFrom(attClass))) {\n        throw new IllegalArgumentException(\n          \"addAttribute() only accepts an interface that extends Attribute, but \" +\n          attClass.getName() + \" does not fulfil this contract.\"\n        );\n      }\n      addAttributeImpl(attImpl = this.factory.createAttributeInstance(attClass));\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value.\n   * This method first checks if an instance of that class is \n   * already in this AttributeSource and returns it. Otherwise a\n   * new instance is created, added to this AttributeSource and returned. \n   */\n  public <A extends Attribute> A addAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      if (!(attClass.isInterface() && Attribute.class.isAssignableFrom(attClass))) {\n        throw new IllegalArgumentException(\n          \"addAttribute() only accepts an interface that extends Attribute, but \" +\n          attClass.getName() + \" does not fulfil this contract.\"\n        );\n      }\n      addAttributeImpl(attImpl = this.factory.createAttributeInstance(attClass));\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08d93afaa54986ce3bf1e98013e0f443da042ef7":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["08d93afaa54986ce3bf1e98013e0f443da042ef7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"08d93afaa54986ce3bf1e98013e0f443da042ef7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["08d93afaa54986ce3bf1e98013e0f443da042ef7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}