{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","commits":[{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3306bdef6cff9218671c5972462d4ff115785dd0","date":1524667585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","sourceNew":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    maybeDeletePendingFiles();\n    if (pendingDeletes.remove(dest)) {\n      privateDeleteFile(dest, true); // try again to delete it - this is best effort\n    }\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n  }\n\n","sourceOld":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29de260cd3b302f71077d76bf52667dcbbb475da","date":1526547755,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","sourceNew":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    maybeDeletePendingFiles();\n    if (pendingDeletes.remove(dest)) {\n      privateDeleteFile(dest, true); // try again to delete it - this is best effort\n      pendingDeletes.remove(dest); // watch out if the delete fails it's back in here.\n    }\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n  }\n\n","sourceOld":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    maybeDeletePendingFiles();\n    if (pendingDeletes.remove(dest)) {\n      privateDeleteFile(dest, true); // try again to delete it - this is best effort\n    }\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"214256b5eeeaba88b8293b37d30460b462b19562":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29de260cd3b302f71077d76bf52667dcbbb475da":["3306bdef6cff9218671c5972462d4ff115785dd0"],"3306bdef6cff9218671c5972462d4ff115785dd0":["214256b5eeeaba88b8293b37d30460b462b19562"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","214256b5eeeaba88b8293b37d30460b462b19562"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29de260cd3b302f71077d76bf52667dcbbb475da"]},"commit2Childs":{"214256b5eeeaba88b8293b37d30460b462b19562":["3306bdef6cff9218671c5972462d4ff115785dd0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29de260cd3b302f71077d76bf52667dcbbb475da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3306bdef6cff9218671c5972462d4ff115785dd0":["29de260cd3b302f71077d76bf52667dcbbb475da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["214256b5eeeaba88b8293b37d30460b462b19562","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}