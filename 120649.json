{"path":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String).mjava","commits":[{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}