{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","commits":[{"id":"3b6398c01b0e06ba3aa3a96d549077877414f9f8","date":1429701153,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          int v = 0;\n          Map properties = (Map) fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException bve) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (KeeperException.NodeExistsException nee) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        log.error(\"Error updating path \" + CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6502a4045d17684af5347826b9c6cf24b8beac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          int v = 0;\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException bve) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (KeeperException.NodeExistsException nee) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        log.error(\"Error updating path \" + CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          int v = 0;\n          Map properties = (Map) fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException bve) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (KeeperException.NodeExistsException nee) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        log.error(\"Error updating path \" + CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          int v = 0;\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException bve) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (KeeperException.NodeExistsException nee) {\n        log.warn(\"Race condition while trying to set a new cluster prop on current version \" + s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        log.error(\"Error updating path \" + CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6502a4045d17684af5347826b9c6cf24b8beac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6502a4045d17684af5347826b9c6cf24b8beac","date":1457102520,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","bugFix":["3b6398c01b0e06ba3aa3a96d549077877414f9f8","7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (Exception ex) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, ex);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, ex);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, String propertyValue) throws IOException {\n\n    if (!ZkStateReader.KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, String propertyValue) throws IOException {\n\n    if (!ZkStateReader.KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperty(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   * @throws IOException if there is an error writing data to the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setClusterProperty(String propertyName, String propertyValue) throws IOException {\n\n    if (!ZkStateReader.KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(ZkStateReader.CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              client.setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          client.create(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting cluster property\", SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#setClusterProperty(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method sets a cluster property.\n   *\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   */\n  public void setClusterProperty(String propertyName, String propertyValue) {\n    if (!KNOWN_CLUSTER_PROPS.contains(propertyName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \" + propertyName);\n    }\n\n    for (; ; ) {\n      Stat s = new Stat();\n      try {\n        if (getZkClient().exists(CLUSTER_PROPS, true)) {\n          Map properties = (Map) Utils.fromJSON(getZkClient().getData(CLUSTER_PROPS, null, s, true));\n          if (propertyValue == null) {\n            //Don't update ZK unless absolutely necessary.\n            if (properties.get(propertyName) != null) {\n              properties.remove(propertyName);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            //Don't update ZK unless absolutely necessary.\n            if (!propertyValue.equals(properties.get(propertyName))) {\n              properties.put(propertyName, propertyValue);\n              getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map properties = new LinkedHashMap();\n          properties.put(propertyName, propertyValue);\n          getZkClient().create(CLUSTER_PROPS, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        LOG.warn(\"Race condition while trying to set a new cluster prop on current version [{}]\", s.getVersion());\n        //race condition\n        continue;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Thread Interrupted. Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread Interrupted. Error updating cluster property \" + propertyName, e);\n      } catch (KeeperException e) {\n        LOG.error(\"Error updating path [{}]\", CLUSTER_PROPS, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error updating cluster property \" + propertyName, e);\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5f6502a4045d17684af5347826b9c6cf24b8beac"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["922ddd897402a6df25c766ea8300443be5e82b3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"0ad30c6a479e764150a3316e57263319775f1df2":["922ddd897402a6df25c766ea8300443be5e82b3d","115923bc88e5b1dc4bef049b1ded8486723052ed"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["922ddd897402a6df25c766ea8300443be5e82b3d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["922ddd897402a6df25c766ea8300443be5e82b3d","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["922ddd897402a6df25c766ea8300443be5e82b3d"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["922ddd897402a6df25c766ea8300443be5e82b3d","5f6502a4045d17684af5347826b9c6cf24b8beac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}