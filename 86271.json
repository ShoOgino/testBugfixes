{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["3cc728b07df73b197e6d940d27f9b08b63918f13","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}