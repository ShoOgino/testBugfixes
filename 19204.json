{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader#mark(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader#mark(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuffer, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuffer, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","date":1272391185,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuffer, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}