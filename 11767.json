{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17bb09a766d49e4c0bb1049cebc1cf10236004f7","date":1463076873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field+1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f9051efa0f27a4df852cb8a467f2775fc8eb166","date":1463108612,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field + 1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert field + 1 == Calendar.ERA || ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field+1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field + 1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert field + 1 == Calendar.ERA || ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field + 1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert field + 1 == Calendar.ERA || ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#clearFieldsAfter(Calendar,int).mjava","sourceNew":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    //note: Calendar.ERA == 0;\n    for (int f = field + 1; f <= Calendar.MILLISECOND; f++) {\n      cal.clear(f);\n    }\n    assert field + 1 == Calendar.ERA || ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Calls {@link Calendar#clear(int)} for every field after {@code field}. Beware of Calendar underflow. */\n  public void clearFieldsAfter(Calendar cal, int field) {\n    if (field == -1) {\n      cal.clear();\n      return;\n    }\n    int assertEra = -1;\n    assert (assertEra = (((Calendar)cal.clone()).get(Calendar.ERA))) >= 0;//a trick to only get this if assert enabled\n    for (int f = field+1; f < Calendar.FIELD_COUNT; f++) {\n      cal.clear(f);\n    }\n    assert ((Calendar)cal.clone()).get(Calendar.ERA) == assertEra : \"Calendar underflow\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"3f9051efa0f27a4df852cb8a467f2775fc8eb166":["17bb09a766d49e4c0bb1049cebc1cf10236004f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","3f9051efa0f27a4df852cb8a467f2775fc8eb166"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","17bb09a766d49e4c0bb1049cebc1cf10236004f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f9051efa0f27a4df852cb8a467f2775fc8eb166":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["3f9051efa0f27a4df852cb8a467f2775fc8eb166"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}