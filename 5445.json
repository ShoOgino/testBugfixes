{"path":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","commits":[{"id":"b6826280a52a0051999196c30abd67c1c4b9a0a4","date":1394805949,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test adding managed stopwords to an endpoint defined in the schema,\n   * then adding docs containing a stopword before and after removing\n   * the stopword from the managed stopwords set.\n   */\n  @Test\n  public void testManagedStopwords() throws Exception {\n    // invalid endpoint\n    //// TODO: This returns HTML vs JSON because the exception is thrown\n    ////       from the init method of ManagedEndpoint ... need a better solution\n    // assertJQ(\"/schema/analysis/stopwords/bogus\", \"/error/code==404\");\n    \n    // this endpoint depends on at least one field type containing the following\n    // declaration in the schema-rest.xml:\n    // \n    //   <filter class=\"solr.ManagedStopFilterFactory\" managed=\"english\" />\n    //\n    String endpoint = \"/schema/analysis/stopwords/english\";\n    \n    // test the initial GET request returns the default stopwords settings\n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==false\",\n             \"/wordSet/managedList==[]\");\n          \n    // add some stopwords and verify they were added\n    assertJPut(endpoint, \n               JSONUtil.toJSON(Arrays.asList(\"a\", \"an\", \"the\")),\n               \"/responseHeader/status==0\");\n          \n    // test requesting a specific stop word that exists / does not exist\n    assertJQ(endpoint + \"/the\", \"/the=='the'\");\n    // not exist - 404\n    assertJQ(endpoint + \"/foo\", \"/error/code==404\");\n    // wrong case - 404\n    assertJQ(endpoint + \"/An\", \"/error/code==404\");\n    \n    // update the ignoreCase initArg to true and make sure case is ignored\n    String updateIgnoreCase = \n        \"{ 'initArgs':{ 'ignoreCase':true }, \"\n        + \"'managedList':['A','a','AN','an','THE','the','of','OF'] }\";\n    assertJPut(endpoint, json(updateIgnoreCase), \"/responseHeader/status==0\");\n    \n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of','the']\");\n    \n    // verify ignoreCase applies when requesting a word\n    assertJQ(\"/schema/analysis/stopwords/english/The\", \"/The=='the'\");\n\n    // verify the resource supports XML writer type (wt) as well as JSON\n    assertQ(endpoint,\n            \"count(/response/lst[@name='wordSet']/arr[@name='managedList']/*) = 4\",\n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[1] = 'a'\",     \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[2] = 'an'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[3] = 'of'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[4] = 'the'\");\n\n    restTestHarness.reload();  // make the word set available\n\n    String newFieldName = \"managed_en_field\";\n    // make sure the new field doesn't already exist\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    // add the new field\n    assertJPut(\"/schema/fields/\" + newFieldName, json(\"{'type':'managed_en'}\"),\n               \"/responseHeader/status==0\");\n\n    // make sure the new field exists now\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    assertU(adoc(newFieldName, \"This is the one\", \"id\", \"6\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=\" + newFieldName + \":This\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='6']\");\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    // verify delete works\n    assertJDelete(endpoint + \"/the\", \"/responseHeader/status==0\");\n\n    // verify that removing 'the' is not yet in effect\n    assertU(adoc(newFieldName, \"This is the other one\", \"id\", \"7\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    restTestHarness.reload();\n\n    // verify that after reloading, removing 'the' has taken effect\n    assertU(adoc(newFieldName, \"This is the other other one\", \"id\", \"8\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='8']\");\n\n    assertJQ(endpoint,\n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of']\");\n    \n    // should fail with 404 as foo doesn't exist\n    assertJDelete(endpoint + \"/foo\", \"/error/code==404\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","sourceNew":"  /**\n   * Test adding managed stopwords to an endpoint defined in the schema,\n   * then adding docs containing a stopword before and after removing\n   * the stopword from the managed stopwords set.\n   */\n  @Test\n  public void testManagedStopwords() throws Exception {\n    // invalid endpoint\n    //// TODO: This returns HTML vs JSON because the exception is thrown\n    ////       from the init method of ManagedEndpoint ... need a better solution\n    // assertJQ(\"/schema/analysis/stopwords/bogus\", \"/error/code==404\");\n    \n    // this endpoint depends on at least one field type containing the following\n    // declaration in the schema-rest.xml:\n    // \n    //   <filter class=\"solr.ManagedStopFilterFactory\" managed=\"english\" />\n    //\n    String endpoint = \"/schema/analysis/stopwords/english\";\n    \n    // test the initial GET request returns the default stopwords settings\n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==false\",\n             \"/wordSet/managedList==[]\");\n          \n    // add some stopwords and verify they were added\n    assertJPut(endpoint, \n               JSONUtil.toJSON(Arrays.asList(\"a\", \"an\", \"the\")),\n               \"/responseHeader/status==0\");\n          \n    // test requesting a specific stop word that exists / does not exist\n    assertJQ(endpoint + \"/the\", \"/the=='the'\");\n    // not exist - 404\n    assertJQ(endpoint + \"/foo\", \"/error/code==404\");\n    // wrong case - 404\n    assertJQ(endpoint + \"/An\", \"/error/code==404\");\n    \n    // update the ignoreCase initArg to true and make sure case is ignored\n    String updateIgnoreCase = \n        \"{ 'initArgs':{ 'ignoreCase':true }, \"\n        + \"'managedList':['A','a','AN','an','THE','the','of','OF'] }\";\n    assertJPut(endpoint, json(updateIgnoreCase), \"/responseHeader/status==0\");\n    \n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of','the']\");\n    \n    // verify ignoreCase applies when requesting a word\n    assertJQ(\"/schema/analysis/stopwords/english/The\", \"/The=='the'\");\n\n    // verify the resource supports XML writer type (wt) as well as JSON\n    assertQ(endpoint,\n            \"count(/response/lst[@name='wordSet']/arr[@name='managedList']/*) = 4\",\n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[1] = 'a'\",     \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[2] = 'an'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[3] = 'of'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[4] = 'the'\");\n\n    restTestHarness.reload();  // make the word set available\n\n    String newFieldName = \"managed_en_field\";\n    // make sure the new field doesn't already exist\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    // add the new field\n    assertJPost(\"/schema/fields\", \"{add-field : { name :managed_en_field, type : managed_en}}\",\n               \"/responseHeader/status==0\");\n\n    // make sure the new field exists now\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    assertU(adoc(newFieldName, \"This is the one\", \"id\", \"6\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=\" + newFieldName + \":This\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='6']\");\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    // verify delete works\n    assertJDelete(endpoint + \"/the\", \"/responseHeader/status==0\");\n\n    // verify that removing 'the' is not yet in effect\n    assertU(adoc(newFieldName, \"This is the other one\", \"id\", \"7\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    restTestHarness.reload();\n\n    // verify that after reloading, removing 'the' has taken effect\n    assertU(adoc(newFieldName, \"This is the other other one\", \"id\", \"8\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='8']\");\n\n    assertJQ(endpoint,\n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of']\");\n    \n    // should fail with 404 as foo doesn't exist\n    assertJDelete(endpoint + \"/foo\", \"/error/code==404\");\n  }\n\n","sourceOld":"  /**\n   * Test adding managed stopwords to an endpoint defined in the schema,\n   * then adding docs containing a stopword before and after removing\n   * the stopword from the managed stopwords set.\n   */\n  @Test\n  public void testManagedStopwords() throws Exception {\n    // invalid endpoint\n    //// TODO: This returns HTML vs JSON because the exception is thrown\n    ////       from the init method of ManagedEndpoint ... need a better solution\n    // assertJQ(\"/schema/analysis/stopwords/bogus\", \"/error/code==404\");\n    \n    // this endpoint depends on at least one field type containing the following\n    // declaration in the schema-rest.xml:\n    // \n    //   <filter class=\"solr.ManagedStopFilterFactory\" managed=\"english\" />\n    //\n    String endpoint = \"/schema/analysis/stopwords/english\";\n    \n    // test the initial GET request returns the default stopwords settings\n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==false\",\n             \"/wordSet/managedList==[]\");\n          \n    // add some stopwords and verify they were added\n    assertJPut(endpoint, \n               JSONUtil.toJSON(Arrays.asList(\"a\", \"an\", \"the\")),\n               \"/responseHeader/status==0\");\n          \n    // test requesting a specific stop word that exists / does not exist\n    assertJQ(endpoint + \"/the\", \"/the=='the'\");\n    // not exist - 404\n    assertJQ(endpoint + \"/foo\", \"/error/code==404\");\n    // wrong case - 404\n    assertJQ(endpoint + \"/An\", \"/error/code==404\");\n    \n    // update the ignoreCase initArg to true and make sure case is ignored\n    String updateIgnoreCase = \n        \"{ 'initArgs':{ 'ignoreCase':true }, \"\n        + \"'managedList':['A','a','AN','an','THE','the','of','OF'] }\";\n    assertJPut(endpoint, json(updateIgnoreCase), \"/responseHeader/status==0\");\n    \n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of','the']\");\n    \n    // verify ignoreCase applies when requesting a word\n    assertJQ(\"/schema/analysis/stopwords/english/The\", \"/The=='the'\");\n\n    // verify the resource supports XML writer type (wt) as well as JSON\n    assertQ(endpoint,\n            \"count(/response/lst[@name='wordSet']/arr[@name='managedList']/*) = 4\",\n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[1] = 'a'\",     \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[2] = 'an'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[3] = 'of'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[4] = 'the'\");\n\n    restTestHarness.reload();  // make the word set available\n\n    String newFieldName = \"managed_en_field\";\n    // make sure the new field doesn't already exist\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    // add the new field\n    assertJPut(\"/schema/fields/\" + newFieldName, json(\"{'type':'managed_en'}\"),\n               \"/responseHeader/status==0\");\n\n    // make sure the new field exists now\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    assertU(adoc(newFieldName, \"This is the one\", \"id\", \"6\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=\" + newFieldName + \":This\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='6']\");\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    // verify delete works\n    assertJDelete(endpoint + \"/the\", \"/responseHeader/status==0\");\n\n    // verify that removing 'the' is not yet in effect\n    assertU(adoc(newFieldName, \"This is the other one\", \"id\", \"7\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    restTestHarness.reload();\n\n    // verify that after reloading, removing 'the' has taken effect\n    assertU(adoc(newFieldName, \"This is the other other one\", \"id\", \"8\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='8']\");\n\n    assertJQ(endpoint,\n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of']\");\n    \n    // should fail with 404 as foo doesn't exist\n    assertJDelete(endpoint + \"/foo\", \"/error/code==404\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/analysis/TestManagedStopFilterFactory#testManagedStopwords().mjava","sourceNew":"  /**\n   * Test adding managed stopwords to an endpoint defined in the schema,\n   * then adding docs containing a stopword before and after removing\n   * the stopword from the managed stopwords set.\n   */\n  @Test\n  public void testManagedStopwords() throws Exception {\n    // invalid endpoint\n    //// TODO: This returns HTML vs JSON because the exception is thrown\n    ////       from the init method of ManagedEndpoint ... need a better solution\n    // assertJQ(\"/schema/analysis/stopwords/bogus\", \"/error/code==404\");\n    \n    // this endpoint depends on at least one field type containing the following\n    // declaration in the schema-rest.xml:\n    // \n    //   <filter class=\"solr.ManagedStopFilterFactory\" managed=\"english\" />\n    //\n    String endpoint = \"/schema/analysis/stopwords/english\";\n    \n    // test the initial GET request returns the default stopwords settings\n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==false\",\n             \"/wordSet/managedList==[]\");\n          \n    // add some stopwords and verify they were added\n    assertJPut(endpoint,\n        Utils.toJSONString(Arrays.asList(\"a\", \"an\", \"the\")),\n               \"/responseHeader/status==0\");\n          \n    // test requesting a specific stop word that exists / does not exist\n    assertJQ(endpoint + \"/the\", \"/the=='the'\");\n    // not exist - 404\n    assertJQ(endpoint + \"/foo\", \"/error/code==404\");\n    // wrong case - 404\n    assertJQ(endpoint + \"/An\", \"/error/code==404\");\n    \n    // update the ignoreCase initArg to true and make sure case is ignored\n    String updateIgnoreCase = \n        \"{ 'initArgs':{ 'ignoreCase':true }, \"\n        + \"'managedList':['A','a','AN','an','THE','the','of','OF'] }\";\n    assertJPut(endpoint, json(updateIgnoreCase), \"/responseHeader/status==0\");\n    \n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of','the']\");\n    \n    // verify ignoreCase applies when requesting a word\n    assertJQ(\"/schema/analysis/stopwords/english/The\", \"/The=='the'\");\n\n    // verify the resource supports XML writer type (wt) as well as JSON\n    assertQ(endpoint,\n            \"count(/response/lst[@name='wordSet']/arr[@name='managedList']/*) = 4\",\n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[1] = 'a'\",     \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[2] = 'an'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[3] = 'of'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[4] = 'the'\");\n\n    restTestHarness.reload();  // make the word set available\n\n    String newFieldName = \"managed_en_field\";\n    // make sure the new field doesn't already exist\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    // add the new field\n    assertJPost(\"/schema/fields\", \"{add-field : { name :managed_en_field, type : managed_en}}\",\n               \"/responseHeader/status==0\");\n\n    // make sure the new field exists now\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    assertU(adoc(newFieldName, \"This is the one\", \"id\", \"6\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=\" + newFieldName + \":This\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='6']\");\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    // verify delete works\n    assertJDelete(endpoint + \"/the\", \"/responseHeader/status==0\");\n\n    // verify that removing 'the' is not yet in effect\n    assertU(adoc(newFieldName, \"This is the other one\", \"id\", \"7\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    restTestHarness.reload();\n\n    // verify that after reloading, removing 'the' has taken effect\n    assertU(adoc(newFieldName, \"This is the other other one\", \"id\", \"8\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='8']\");\n\n    assertJQ(endpoint,\n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of']\");\n    \n    // should fail with 404 as foo doesn't exist\n    assertJDelete(endpoint + \"/foo\", \"/error/code==404\");\n  }\n\n","sourceOld":"  /**\n   * Test adding managed stopwords to an endpoint defined in the schema,\n   * then adding docs containing a stopword before and after removing\n   * the stopword from the managed stopwords set.\n   */\n  @Test\n  public void testManagedStopwords() throws Exception {\n    // invalid endpoint\n    //// TODO: This returns HTML vs JSON because the exception is thrown\n    ////       from the init method of ManagedEndpoint ... need a better solution\n    // assertJQ(\"/schema/analysis/stopwords/bogus\", \"/error/code==404\");\n    \n    // this endpoint depends on at least one field type containing the following\n    // declaration in the schema-rest.xml:\n    // \n    //   <filter class=\"solr.ManagedStopFilterFactory\" managed=\"english\" />\n    //\n    String endpoint = \"/schema/analysis/stopwords/english\";\n    \n    // test the initial GET request returns the default stopwords settings\n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==false\",\n             \"/wordSet/managedList==[]\");\n          \n    // add some stopwords and verify they were added\n    assertJPut(endpoint, \n               JSONUtil.toJSON(Arrays.asList(\"a\", \"an\", \"the\")),\n               \"/responseHeader/status==0\");\n          \n    // test requesting a specific stop word that exists / does not exist\n    assertJQ(endpoint + \"/the\", \"/the=='the'\");\n    // not exist - 404\n    assertJQ(endpoint + \"/foo\", \"/error/code==404\");\n    // wrong case - 404\n    assertJQ(endpoint + \"/An\", \"/error/code==404\");\n    \n    // update the ignoreCase initArg to true and make sure case is ignored\n    String updateIgnoreCase = \n        \"{ 'initArgs':{ 'ignoreCase':true }, \"\n        + \"'managedList':['A','a','AN','an','THE','the','of','OF'] }\";\n    assertJPut(endpoint, json(updateIgnoreCase), \"/responseHeader/status==0\");\n    \n    assertJQ(endpoint, \n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of','the']\");\n    \n    // verify ignoreCase applies when requesting a word\n    assertJQ(\"/schema/analysis/stopwords/english/The\", \"/The=='the'\");\n\n    // verify the resource supports XML writer type (wt) as well as JSON\n    assertQ(endpoint,\n            \"count(/response/lst[@name='wordSet']/arr[@name='managedList']/*) = 4\",\n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[1] = 'a'\",     \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[2] = 'an'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[3] = 'of'\",        \n            \"(/response/lst[@name='wordSet']/arr[@name='managedList']/str)[4] = 'the'\");\n\n    restTestHarness.reload();  // make the word set available\n\n    String newFieldName = \"managed_en_field\";\n    // make sure the new field doesn't already exist\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    // add the new field\n    assertJPost(\"/schema/fields\", \"{add-field : { name :managed_en_field, type : managed_en}}\",\n               \"/responseHeader/status==0\");\n\n    // make sure the new field exists now\n    assertQ(\"/schema/fields/\" + newFieldName + \"?indent=on&wt=xml\",\n            \"count(/response/lst[@name='field']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    assertU(adoc(newFieldName, \"This is the one\", \"id\", \"6\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=\" + newFieldName + \":This\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='6']\");\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    // verify delete works\n    assertJDelete(endpoint + \"/the\", \"/responseHeader/status==0\");\n\n    // verify that removing 'the' is not yet in effect\n    assertU(adoc(newFieldName, \"This is the other one\", \"id\", \"7\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='0']\");\n\n    restTestHarness.reload();\n\n    // verify that after reloading, removing 'the' has taken effect\n    assertU(adoc(newFieldName, \"This is the other other one\", \"id\", \"8\"));\n    assertU(commit());\n\n    assertQ(\"/select?q=%7B%21raw%20f=\" + newFieldName + \"%7Dthe\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\",\n            \"/response/result[@name='response'][@numFound='1']\",\n            \"/response/result[@name='response']/doc/str[@name='id'][.='8']\");\n\n    assertJQ(endpoint,\n             \"/wordSet/initArgs/ignoreCase==true\",\n             \"/wordSet/managedList==['a','an','of']\");\n    \n    // should fail with 404 as foo doesn't exist\n    assertJDelete(endpoint + \"/foo\", \"/error/code==404\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["b6826280a52a0051999196c30abd67c1c4b9a0a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"b6826280a52a0051999196c30abd67c1c4b9a0a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6826280a52a0051999196c30abd67c1c4b9a0a4"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6826280a52a0051999196c30abd67c1c4b9a0a4":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}