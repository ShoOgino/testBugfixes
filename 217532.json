{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","commits":[{"id":"734d38d5abe4f98cce936b31450702d597f6fc69","date":1467794285,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public static ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in),\n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public static ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b2329af9080ec86a454c9439598b88e169fc28a","date":1579536707,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","sourceNew":"  private ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      SolrZkClient zkClient = ((ZkSolrResourceLoader) resourceLoader).getZkController().getZkClient();\n      try {\n        if (!zkClient.exists(name, true)) {\n          String backupName = name + ManagedIndexSchemaFactory.UPGRADED_SCHEMA_EXTENSION;\n          if (!zkClient.exists(backupName, true)) {\n            log.warn(\"Unable to retrieve fresh managed schema, neither \" + name + \" nor \" + backupName + \" exist.\");\n            // use current schema\n            return (ManagedIndexSchema) core.getLatestSchema();\n          } else {\n            name = backupName;\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"Unable to retrieve fresh managed schema \" + name, e);\n        // use current schema\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public static ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":["7836353f1354e05cf9a07f5a4d72de32155035e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7836353f1354e05cf9a07f5a4d72de32155035e6","date":1579804392,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","sourceNew":"  private ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)resourceLoader;\n      SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      try {\n        if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + name, true)) {\n          String backupName = name + ManagedIndexSchemaFactory.UPGRADED_SCHEMA_EXTENSION;\n          if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + backupName, true)) {\n            log.warn(\"Unable to retrieve fresh managed schema, neither \" + name + \" nor \" + backupName + \" exist.\");\n            // use current schema\n            return (ManagedIndexSchema) core.getLatestSchema();\n          } else {\n            name = backupName;\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"Unable to retrieve fresh managed schema \" + name, e);\n        // use current schema\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":"  private ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      SolrZkClient zkClient = ((ZkSolrResourceLoader) resourceLoader).getZkController().getZkClient();\n      try {\n        if (!zkClient.exists(name, true)) {\n          String backupName = name + ManagedIndexSchemaFactory.UPGRADED_SCHEMA_EXTENSION;\n          if (!zkClient.exists(backupName, true)) {\n            log.warn(\"Unable to retrieve fresh managed schema, neither \" + name + \" nor \" + backupName + \" exist.\");\n            // use current schema\n            return (ManagedIndexSchema) core.getLatestSchema();\n          } else {\n            name = backupName;\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"Unable to retrieve fresh managed schema \" + name, e);\n        // use current schema\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","bugFix":["8b2329af9080ec86a454c9439598b88e169fc28a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","sourceNew":"  private ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)resourceLoader;\n      SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      try {\n        if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + name, true)) {\n          String backupName = name + ManagedIndexSchemaFactory.UPGRADED_SCHEMA_EXTENSION;\n          if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + backupName, true)) {\n            log.warn(\"Unable to retrieve fresh managed schema, neither {} nor {} exist.\", name, backupName);\n            // use current schema\n            return (ManagedIndexSchema) core.getLatestSchema();\n          } else {\n            name = backupName;\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"Unable to retrieve fresh managed schema {}\", name, e);\n        // use current schema\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":"  private ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)resourceLoader;\n      SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      try {\n        if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + name, true)) {\n          String backupName = name + ManagedIndexSchemaFactory.UPGRADED_SCHEMA_EXTENSION;\n          if (!zkClient.exists(zkLoader.getConfigSetZkPath() + \"/\" + backupName, true)) {\n            log.warn(\"Unable to retrieve fresh managed schema, neither \" + name + \" nor \" + backupName + \" exist.\");\n            // use current schema\n            return (ManagedIndexSchema) core.getLatestSchema();\n          } else {\n            name = backupName;\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"Unable to retrieve fresh managed schema \" + name, e);\n        // use current schema\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7836353f1354e05cf9a07f5a4d72de32155035e6":["8b2329af9080ec86a454c9439598b88e169fc28a"],"8b2329af9080ec86a454c9439598b88e169fc28a":["734d38d5abe4f98cce936b31450702d597f6fc69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"734d38d5abe4f98cce936b31450702d597f6fc69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","734d38d5abe4f98cce936b31450702d597f6fc69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["7836353f1354e05cf9a07f5a4d72de32155035e6"]},"commit2Childs":{"7836353f1354e05cf9a07f5a4d72de32155035e6":["9df8125ba9193a2e2e285ed92157810b1952a244"],"8b2329af9080ec86a454c9439598b88e169fc28a":["7836353f1354e05cf9a07f5a4d72de32155035e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["734d38d5abe4f98cce936b31450702d597f6fc69","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"734d38d5abe4f98cce936b31450702d597f6fc69":["8b2329af9080ec86a454c9439598b88e169fc28a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}