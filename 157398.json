{"path":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","commits":[{"id":"c028362918f0b06bbdb243dfd35486218b89dbde","date":1343391303,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n    \n    if (null == queryAnalyzer) {\n      queryAnalyzer = analyzer;\n      ft.setIsExplicitQueryAnalyzer(false);\n    } else {\n      ft.setIsExplicitQueryAnalyzer(true);\n    }\n    if (null == analyzer) {\n      analyzer = queryAnalyzer;\n      ft.setIsExplicitAnalyzer(false);\n    } else {\n      ft.setIsExplicitAnalyzer(true);\n    }\n\n    if (null != analyzer) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField) {\n        if (null == multiAnalyzer) {\n          multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n        } else {\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n        }\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":["6220329a2333b59a34a9ecf29c003e005c861310"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n    \n    if (null == queryAnalyzer) {\n      queryAnalyzer = analyzer;\n      ft.setIsExplicitQueryAnalyzer(false);\n    } else {\n      ft.setIsExplicitQueryAnalyzer(true);\n    }\n    if (null == analyzer) {\n      analyzer = queryAnalyzer;\n      ft.setIsExplicitAnalyzer(false);\n    } else {\n      ft.setIsExplicitAnalyzer(true);\n    }\n\n    if (null != analyzer) {\n      ft.setIndexAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField) {\n        if (null == multiAnalyzer) {\n          multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n        } else {\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n        }\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n    \n    if (null == queryAnalyzer) {\n      queryAnalyzer = analyzer;\n      ft.setIsExplicitQueryAnalyzer(false);\n    } else {\n      ft.setIsExplicitQueryAnalyzer(true);\n    }\n    if (null == analyzer) {\n      analyzer = queryAnalyzer;\n      ft.setIsExplicitAnalyzer(false);\n    } else {\n      ft.setIsExplicitAnalyzer(true);\n    }\n\n    if (null != analyzer) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField) {\n        if (null == multiAnalyzer) {\n          multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n        } else {\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n        }\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":["6220329a2333b59a34a9ecf29c003e005c861310"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6220329a2333b59a34a9ecf29c003e005c861310","date":1479169077,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Ignoring index-time analyzer for field: \" + name);\n        }\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer \n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n    \n    if (null == queryAnalyzer) {\n      queryAnalyzer = analyzer;\n      ft.setIsExplicitQueryAnalyzer(false);\n    } else {\n      ft.setIsExplicitQueryAnalyzer(true);\n    }\n    if (null == analyzer) {\n      analyzer = queryAnalyzer;\n      ft.setIsExplicitAnalyzer(false);\n    } else {\n      ft.setIsExplicitAnalyzer(true);\n    }\n\n    if (null != analyzer) {\n      ft.setIndexAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField) {\n        if (null == multiAnalyzer) {\n          multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n        } else {\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n        }\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","123698fbe83b595f9e084f0019cd35ab4a01d7f7","f09ac0abea5345f77c4cf8d9f0d531da9139debc","f15795b2193a8dd132f374975d4243687bee9351"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Ignoring index-time analyzer for field: \" + name);\n        }\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer \n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n    \n    if (null == queryAnalyzer) {\n      queryAnalyzer = analyzer;\n      ft.setIsExplicitQueryAnalyzer(false);\n    } else {\n      ft.setIsExplicitQueryAnalyzer(true);\n    }\n    if (null == analyzer) {\n      analyzer = queryAnalyzer;\n      ft.setIsExplicitAnalyzer(false);\n    } else {\n      ft.setIsExplicitAnalyzer(true);\n    }\n\n    if (null != analyzer) {\n      ft.setIndexAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField) {\n        if (null == multiAnalyzer) {\n          multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n        } else {\n          ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n        }\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c24804758d67429e3055070a9fe970d4f159954","date":1565508925,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Ignoring index-time analyzer for field: \" + name);\n        }\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer \n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Ignoring index-time analyzer for field: \" + name);\n        }\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer \n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        log.warn(\"Ignoring index-time analyzer for field: {}\", name);\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer\n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Ignoring index-time analyzer for field: \" + name);\n        }\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer \n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrClassLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrClassLoader loader,\n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        log.warn(\"Ignoring index-time analyzer for field: {}\", name);\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer\n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        log.warn(\"Ignoring index-time analyzer for field: {}\", name);\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer\n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["575e66bd4b2349209027f6801184da7fc3cba13f"],"2c24804758d67429e3055070a9fe970d4f159954":["6220329a2333b59a34a9ecf29c003e005c861310"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c028362918f0b06bbdb243dfd35486218b89dbde"],"c028362918f0b06bbdb243dfd35486218b89dbde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","6220329a2333b59a34a9ecf29c003e005c861310"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c028362918f0b06bbdb243dfd35486218b89dbde"],"575e66bd4b2349209027f6801184da7fc3cba13f":["2c24804758d67429e3055070a9fe970d4f159954"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c028362918f0b06bbdb243dfd35486218b89dbde"],"6220329a2333b59a34a9ecf29c003e005c861310":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c24804758d67429e3055070a9fe970d4f159954":["575e66bd4b2349209027f6801184da7fc3cba13f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c028362918f0b06bbdb243dfd35486218b89dbde":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","c028362918f0b06bbdb243dfd35486218b89dbde","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["21019aa828c8c9b0153877543a8b3f200bf2ca19","6220329a2333b59a34a9ecf29c003e005c861310"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"6220329a2333b59a34a9ecf29c003e005c861310":["2c24804758d67429e3055070a9fe970d4f159954","21019aa828c8c9b0153877543a8b3f200bf2ca19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","21019aa828c8c9b0153877543a8b3f200bf2ca19","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}