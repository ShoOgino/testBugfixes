{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(new FilteredQuery(tq, df), 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    Query query = new BooleanQuery.Builder()\n        .add(tq, Occur.MUST)\n        .add(df, Occur.FILTER)\n        .build();\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(new FilteredQuery(tq, df), 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    Query query = new BooleanQuery.Builder()\n        .add(tq, Occur.MUST)\n        .add(df, Occur.FILTER)\n        .build();\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    Query query = new BooleanQuery.Builder()\n        .add(tq, Occur.MUST)\n        .add(df, Occur.FILTER)\n        .build();\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          MultiFields.getLiveDocs(reader),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfca18b7bfce32a543487fd4b0c11595177e908","date":1435655762,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":null,"sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    Query query = new BooleanQuery.Builder()\n        .add(tq, Occur.MUST)\n        .add(df, Occur.FILTER)\n        .build();\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          KEY_FIELD,\n          new BytesRef(url),\n          null,\n          0);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["1d028314cced5858683a1bb4741423d0f934257b"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["02331260bb246364779cb6f04919ca47900d01bb","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a7e4907084808af8fdb14b9809e6dceaccf6867b","02331260bb246364779cb6f04919ca47900d01bb"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dfca18b7bfce32a543487fd4b0c11595177e908"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1d028314cced5858683a1bb4741423d0f934257b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["4dfca18b7bfce32a543487fd4b0c11595177e908"],"1db68e96dd908fcd79ef809095822736aa601d08":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a7e4907084808af8fdb14b9809e6dceaccf6867b","02331260bb246364779cb6f04919ca47900d01bb"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["1d028314cced5858683a1bb4741423d0f934257b"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"02331260bb246364779cb6f04919ca47900d01bb":["1d028314cced5858683a1bb4741423d0f934257b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}