{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","date":1318183296,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ca474b88b90218279fc4b893727bcefbb1f725":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","34ca474b88b90218279fc4b893727bcefbb1f725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["34ca474b88b90218279fc4b893727bcefbb1f725","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}