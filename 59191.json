{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/DirectSource#getBytes(int,BytesRef).mjava","commits":[{"id":"dbb488b81f8874886ab2f13101412e2548029b9d","date":1323441741,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/DirectSource#getBytes(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/DirectSource#getBytes(int,BytesRef).mjava","sourceNew":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/DirectSource#getBytes(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/DirectSource#getBytes(int,BytesRef).mjava","sourceNew":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/DirectSource#getBytes(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/DirectSource#getBytes(int,BytesRef).mjava","sourceNew":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BytesRef getBytes(int docID, BytesRef ref) {\n    try {\n      final int sizeToRead = position(docID);\n      ref.grow(sizeToRead);\n      data.readBytes(ref.bytes, 0, sizeToRead);\n      ref.length = sizeToRead;\n      ref.offset = 0;\n      return ref;\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"failed to get value for docID: \" + docID, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb488b81f8874886ab2f13101412e2548029b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dbb488b81f8874886ab2f13101412e2548029b9d"]},"commit2Childs":{"dbb488b81f8874886ab2f13101412e2548029b9d":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb488b81f8874886ab2f13101412e2548029b9d","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}