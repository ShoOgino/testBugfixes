{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","commits":[{"id":"e8f450af7a7b034413833ed2a9508f99264ea49a","date":1211042958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"/dev/null","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          balanceRAM();\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          balanceRAM();\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = (byte[]) freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d55ce084f816da26b3f2797175b2d96431111bcd","date":1267721178,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += BYTE_BLOCK_SIZE;\n          b = new byte[BYTE_BLOCK_SIZE];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += BYTE_BLOCK_SIZE;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d55ce084f816da26b3f2797175b2d96431111bcd":["60cdc0e643184821eb066795a8791cd82559f46e"],"8a9e385641d717e641408d8fbbc62be8fc766357":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d55ce084f816da26b3f2797175b2d96431111bcd"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["d55ce084f816da26b3f2797175b2d96431111bcd"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["5350389bf83287111f7760b9e3db3af8e3648474"],"d55ce084f816da26b3f2797175b2d96431111bcd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"5350389bf83287111f7760b9e3db3af8e3648474":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}