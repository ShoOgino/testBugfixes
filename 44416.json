{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.ThreadPumper#start(InputStream,OutputStream).mjava","commits":[{"id":"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b","date":1368612521,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.ThreadPumper#start(InputStream,OutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public static Thread start(final InputStream from, final OutputStream to) {\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            byte [] buffer = new byte [1024];\n            int len;\n            while ((len = from.read(buffer)) != -1) {\n              if (VERBOSE) {\n                to.write(buffer, 0, len);\n              }\n            }\n          } catch (IOException e) {\n            System.err.println(\"Couldn't pipe from the forked process: \" + e.toString());\n          }\n        }\n      };\n      t.start();\n      return t;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d","date":1433692150,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.ThreadPumper#start(InputStream,OutputStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.ThreadPumper#start(InputStream,OutputStream).mjava","sourceNew":"    public static Thread start(final InputStream from, final OutputStream to) {\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            byte[] buffer = new byte [1024];\n            int len;\n            while ((len = from.read(buffer)) != -1) {\n              if (VERBOSE) {\n                to.write(buffer, 0, len);\n              }\n            }\n          } catch (IOException e) {\n            System.err.println(\"Couldn't pipe from the forked process: \" + e.toString());\n          }\n        }\n      };\n      t.start();\n      return t;\n    }\n\n","sourceOld":"    public static Thread start(final InputStream from, final OutputStream to) {\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            byte [] buffer = new byte [1024];\n            int len;\n            while ((len = from.read(buffer)) != -1) {\n              if (VERBOSE) {\n                to.write(buffer, 0, len);\n              }\n            }\n          } catch (IOException e) {\n            System.err.println(\"Couldn't pipe from the forked process: \" + e.toString());\n          }\n        }\n      };\n      t.start();\n      return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"]},"commit2Childs":{"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}