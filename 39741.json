{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final ValueType docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = ValueType.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final ValueType docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = ValueType.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final ValueType docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = ValueType.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert scratch.startsWith(INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final ValueType docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = ValueType.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final ValueType docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = ValueType.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3cc749c053615f5871f3b95715fe292f34e70a53":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}