{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","commits":[{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient =\n          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n      solrParams.add(requestParams);\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["066d5decec918ce5712cf92c3604f2f6356b7d5a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient =\n          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n      solrParams.add(requestParams);\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList<>();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient =\n          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n      solrParams.add(requestParams);\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient =\n          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n      solrParams.add(requestParams);\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"066d5decec918ce5712cf92c3604f2f6356b7d5a","date":1598270438,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext,SolrParams).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList<>();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      SolrClientCache solrClientCache = (streamContext != null ? streamContext.getSolrClientCache() : null);\n      final SolrClientCache localSolrClientCache; // tracks any locally allocated cache that needs to be closed locally\n      if (solrClientCache == null) { // streamContext was null OR streamContext.getSolrClientCache() returned null\n        solrClientCache = localSolrClientCache = new SolrClientCache();\n      } else {\n        localSolrClientCache = null;\n      }\n      CloudSolrClient cloudSolrClient = solrClientCache.getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n      final ModifiableSolrParams solrParams;\n      if (streamContext != null) {\n        solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n        requestReplicaListTransformerGenerator = streamContext.getRequestReplicaListTransformerGenerator();\n      } else {\n        solrParams = new ModifiableSolrParams();\n        requestReplicaListTransformerGenerator = null;\n      }\n      if (requestReplicaListTransformerGenerator == null) {\n        requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n      }\n      solrParams.add(requestParams);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n      if (localSolrClientCache != null) {\n        localSolrClientCache.close();\n      }\n    }\n    if (streamContext != null) {\n      Object core = streamContext.get(\"core\");\n      if (streamContext.isLocal() && core != null) {\n        shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n      }\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext,\n                                       SolrParams requestParams)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList<>();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient =\n          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n      solrParams.add(requestParams);\n\n      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n\n      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);\n\n      for(Slice slice : slices) {\n        List<Replica> sortedReplicas = new ArrayList<>();\n        for(Replica replica : slice.getReplicas()) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            sortedReplicas.add(replica);\n          }\n        }\n\n        replicaListTransformer.transform(sortedReplicas);\n        if (sortedReplicas.size() > 0) {\n          shards.add(sortedReplicas.get(0).getCoreUrl());\n        }\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","bugFix":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066d5decec918ce5712cf92c3604f2f6356b7d5a":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["066d5decec918ce5712cf92c3604f2f6356b7d5a"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"066d5decec918ce5712cf92c3604f2f6356b7d5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["066d5decec918ce5712cf92c3604f2f6356b7d5a"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}