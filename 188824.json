{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","commits":[{"id":"178aff34c3fa746242ad3ce5d169f680f3865b4b","date":1248188879,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void runFullImport(String dataConfig, Map<String ,String > extraParams) throws Exception {\n    NamedList l = new NamedList();\n    l.add(\"command\", \"full-import\");\n    l.add(\"debug\", \"on\");\n    l.add(\"dataConfig\", dataConfig);\n    for (Map.Entry<String, String> e : extraParams.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"004e34373e5a39829c275495601667a309f0e03b","date":1254255075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  protected void runFullImport(String dataConfig, Map<String ,String > extraParams) throws Exception {\n    NamedList l = new NamedList();\n    l.add(\"command\", \"full-import\");\n    l.add(\"debug\", \"on\");\n    l.add(\"dataConfig\", dataConfig);\n    for (Map.Entry<String, String> e : extraParams.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"004e34373e5a39829c275495601667a309f0e03b":["178aff34c3fa746242ad3ce5d169f680f3865b4b"],"178aff34c3fa746242ad3ce5d169f680f3865b4b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["004e34373e5a39829c275495601667a309f0e03b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"004e34373e5a39829c275495601667a309f0e03b":["ad94625fb8d088209f46650c8097196fec67f00c"],"178aff34c3fa746242ad3ce5d169f680f3865b4b":["004e34373e5a39829c275495601667a309f0e03b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["178aff34c3fa746242ad3ce5d169f680f3865b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}