{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.CrossingEdgeIterator#matches(Edge).mjava","commits":[{"id":"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89","date":1461609218,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.CrossingEdgeIterator#matches(Edge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, plane, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff44d836e8863507fa8711d2b1b2dd723516ca0","date":1461653163,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.CrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, plane, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ff44d836e8863507fa8711d2b1b2dd723516ca0":["116824c1b3f14f43f9a77914fbf6f0d70a5b7c89"],"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116824c1b3f14f43f9a77914fbf6f0d70a5b7c89","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff44d836e8863507fa8711d2b1b2dd723516ca0":[],"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89":["8ff44d836e8863507fa8711d2b1b2dd723516ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8ff44d836e8863507fa8711d2b1b2dd723516ca0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}