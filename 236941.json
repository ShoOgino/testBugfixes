{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testEquality().mjava","commits":[{"id":"7760921fe59bc2d64c870c102b3459e85a70f3c5","date":1467193227,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEquality() {\n\n    Explanation e1 = Explanation.match(1f, \"an explanation\");\n    Explanation e2 = Explanation.match(1f, \"an explanation\", Explanation.match(1f, \"a subexplanation\"));\n    Explanation e25 = Explanation.match(1f, \"an explanation\",\n        Explanation.match(1f, \"a subexplanation\", Explanation.match(1f, \"a subsubexplanation\")));\n    Explanation e3 = Explanation.match(1f, \"an explanation\");\n    Explanation e4 = Explanation.match(2f, \"an explanation\");\n    Explanation e5 = Explanation.noMatch(\"an explanation\");\n    Explanation e6 = Explanation.noMatch(\"an explanation\", Explanation.match(1f, \"a subexplanation\"));\n    Explanation e7 = Explanation.noMatch(\"an explanation\");\n    Explanation e8 = Explanation.match(1f, \"another explanation\");\n\n    assertEquals(e1, e3);\n    assertFalse(e1.equals(e2));\n    assertFalse(e2.equals(e25));\n    assertFalse(e1.equals(e4));\n    assertFalse(e1.equals(e5));\n    assertEquals(e5, e7);\n    assertFalse(e5.equals(e6));\n    assertFalse(e1.equals(e8));\n\n    assertEquals(e1.hashCode(), e3.hashCode());\n    assertEquals(e5.hashCode(), e7.hashCode());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEquality() {\n\n    Explanation e1 = Explanation.match(1f, \"an explanation\");\n    Explanation e2 = Explanation.match(1f, \"an explanation\", Explanation.match(1f, \"a subexplanation\"));\n    Explanation e25 = Explanation.match(1f, \"an explanation\",\n        Explanation.match(1f, \"a subexplanation\", Explanation.match(1f, \"a subsubexplanation\")));\n    Explanation e3 = Explanation.match(1f, \"an explanation\");\n    Explanation e4 = Explanation.match(2f, \"an explanation\");\n    Explanation e5 = Explanation.noMatch(\"an explanation\");\n    Explanation e6 = Explanation.noMatch(\"an explanation\", Explanation.match(1f, \"a subexplanation\"));\n    Explanation e7 = Explanation.noMatch(\"an explanation\");\n    Explanation e8 = Explanation.match(1f, \"another explanation\");\n\n    assertEquals(e1, e3);\n    assertFalse(e1.equals(e2));\n    assertFalse(e2.equals(e25));\n    assertFalse(e1.equals(e4));\n    assertFalse(e1.equals(e5));\n    assertEquals(e5, e7);\n    assertFalse(e5.equals(e6));\n    assertFalse(e1.equals(e8));\n\n    assertEquals(e1.hashCode(), e3.hashCode());\n    assertEquals(e5.hashCode(), e7.hashCode());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7760921fe59bc2d64c870c102b3459e85a70f3c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7760921fe59bc2d64c870c102b3459e85a70f3c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7760921fe59bc2d64c870c102b3459e85a70f3c5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7760921fe59bc2d64c870c102b3459e85a70f3c5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7760921fe59bc2d64c870c102b3459e85a70f3c5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}