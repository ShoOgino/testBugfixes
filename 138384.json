{"path":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public final Scorer scorer(LeafReaderContext context) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        return matchingDocs.get(doc);\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","sourceOld":"  @Override\n  public final Scorer scorer(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        if (acceptDocs != null && acceptDocs.get(doc) == false) {\n          return false;\n        }\n\n        return matchingDocs.get(doc);\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public final Scorer scorer(LeafReaderContext context) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        return matchingDocs.get(doc);\n      }\n\n      @Override\n      public float matchCost() {\n        return 10; // TODO: use some cost of matchingDocs\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","sourceOld":"  @Override\n  public final Scorer scorer(LeafReaderContext context) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        return matchingDocs.get(doc);\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec","date":1479218146,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Scorer scorer(LeafReaderContext context) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        return matchingDocs.get(doc);\n      }\n\n      @Override\n      public float matchCost() {\n        return 10; // TODO: use some cost of matchingDocs\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight#scorer(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Scorer scorer(LeafReaderContext context) throws IOException {\n    final Bits matchingDocs = getMatchingDocs(context);\n    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {\n      return null;\n    }\n    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = approximation.docID();\n\n        return matchingDocs.get(doc);\n      }\n\n      @Override\n      public float matchCost() {\n        return 10; // TODO: use some cost of matchingDocs\n      }\n    };\n\n    return new ConstantScoreScorer(this, score(), twoPhase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["d277693481ea6007c1d83cd503d0859bb3b64d20","e59d3612d24b4c29c5affe50a48f7fa0e342d4ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e59d3612d24b4c29c5affe50a48f7fa0e342d4ec"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["e59d3612d24b4c29c5affe50a48f7fa0e342d4ec","21019aa828c8c9b0153877543a8b3f200bf2ca19"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}