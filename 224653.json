{"path":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","commits":[{"id":"eaed68e725df990738b5c5674509158dac82dcf8","date":1433667275,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","pathOld":"/dev/null","sourceNew":"  // this method is called in a spawned process:\n  public static void main(final String... args) throws Exception {\n    final String codecName = args[0];\n    final String pfName = args[1];\n    final String dvfName = args[2];\n    final int numThreads = 14; // two times the modulo in switch statement below\n    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"deadlockchecker\"));\n    final CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {\n      try {\n        barrier.await();\n        switch (taskNo % 7) {\n          case 0:\n            Codec.getDefault();\n            break;\n          case 1:\n            Codec.forName(codecName);\n            break;\n          case 2:\n            PostingsFormat.forName(pfName);\n            break;\n          case 3:\n            DocValuesFormat.forName(dvfName);\n            break;\n          case 4:\n            Codec.availableCodecs();\n            break;\n          case 5:\n            PostingsFormat.availablePostingsFormats();\n            break;\n          case 6:\n            DocValuesFormat.availableDocValuesFormats();\n            break;\n          default:\n            throw new AssertionError();\n        }\n      } catch (Throwable t) {\n        synchronized(args) {\n          System.err.println(Thread.currentThread().getName() + \" failed to lookup codec service:\");\n          t.printStackTrace(System.err);\n        }\n        Runtime.getRuntime().halt(1); // signal failure to caller\n      }\n    }));\n    pool.shutdown();\n    while (!pool.awaitTermination(1, TimeUnit.MINUTES));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd","date":1520935290,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","sourceNew":"  // This method is called in a spawned process.\n  public static void main(final String... args) throws Exception {\n    final String codecName = args[0];\n    final String pfName = args[1];\n    final String dvfName = args[2];\n\n    System.out.println(String.format(Locale.ROOT,\n        \"codec: %s, pf: %s, dvf: %s\", codecName, pfName, dvfName));\n\n    final int numThreads = 14; // two times the modulo in switch statement below\n    final CopyOnWriteArrayList<Thread> allThreads = new CopyOnWriteArrayList<>();\n    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"deadlockchecker\") {\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t = super.newThread(r);\n        allThreads.add(t);\n        return t;\n      }\n    });\n\n    final CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {\n      try {\n        // Await a common barrier point for all threads and then\n        // run racy code. This is intentional.\n        barrier.await();\n        switch (taskNo % 7) {\n          case 0:\n            Codec.getDefault();\n            break;\n          case 1:\n            Codec.forName(codecName);\n            break;\n          case 2:\n            PostingsFormat.forName(pfName);\n            break;\n          case 3:\n            DocValuesFormat.forName(dvfName);\n            break;\n          case 4:\n            Codec.availableCodecs();\n            break;\n          case 5:\n            PostingsFormat.availablePostingsFormats();\n            break;\n          case 6:\n            DocValuesFormat.availableDocValuesFormats();\n            break;\n          default:\n            throw new AssertionError();\n        }\n      } catch (Throwable t) {\n        synchronized(args) {\n          System.err.println(Thread.currentThread().getName() + \" failed to lookup codec service:\");\n          t.printStackTrace(System.err);\n        }\n        Runtime.getRuntime().halt(1); // signal failure to caller\n      }\n    }));\n\n    pool.shutdown();\n\n    if (!pool.awaitTermination(MAX_TIME_SECONDS, TimeUnit.SECONDS)) {\n      // Try to collect stacks so that we can better diagnose the failure.\n      System.err.println(\"Pool didn't return after \" + MAX_TIME_SECONDS +\n          \" seconds, classloader deadlock? Dumping stack traces.\");\n\n      for (Thread t : allThreads) {\n        System.err.println(\n            \"# Thread: \" + t + \", \" +\n            \"state: \" + t.getState() + \", \" +\n            \"stack:\\n\\t\" + Arrays.stream(t.getStackTrace()).map(Object::toString)\n                .collect(Collectors.joining(\"\\t\")) + \"\\n\");\n      }\n      Runtime.getRuntime().halt(1); // signal failure to caller\n    }\n  }\n\n","sourceOld":"  // this method is called in a spawned process:\n  public static void main(final String... args) throws Exception {\n    final String codecName = args[0];\n    final String pfName = args[1];\n    final String dvfName = args[2];\n    final int numThreads = 14; // two times the modulo in switch statement below\n    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"deadlockchecker\"));\n    final CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {\n      try {\n        barrier.await();\n        switch (taskNo % 7) {\n          case 0:\n            Codec.getDefault();\n            break;\n          case 1:\n            Codec.forName(codecName);\n            break;\n          case 2:\n            PostingsFormat.forName(pfName);\n            break;\n          case 3:\n            DocValuesFormat.forName(dvfName);\n            break;\n          case 4:\n            Codec.availableCodecs();\n            break;\n          case 5:\n            PostingsFormat.availablePostingsFormats();\n            break;\n          case 6:\n            DocValuesFormat.availableDocValuesFormats();\n            break;\n          default:\n            throw new AssertionError();\n        }\n      } catch (Throwable t) {\n        synchronized(args) {\n          System.err.println(Thread.currentThread().getName() + \" failed to lookup codec service:\");\n          t.printStackTrace(System.err);\n        }\n        Runtime.getRuntime().halt(1); // signal failure to caller\n      }\n    }));\n    pool.shutdown();\n    while (!pool.awaitTermination(1, TimeUnit.MINUTES));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b3f81aec687227f78f115327c1a50a262df2cff","date":1522871667,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#main(String...).mjava","sourceNew":"  // This method is called in a spawned process.\n  public static void main(final String... args) throws Exception {\n    final String codecName = args[0];\n    final String pfName = args[1];\n    final String dvfName = args[2];\n\n    final int numThreads = 14; // two times the modulo in switch statement below\n    final CopyOnWriteArrayList<Thread> allThreads = new CopyOnWriteArrayList<>();\n    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"deadlockchecker\") {\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t = super.newThread(r);\n        allThreads.add(t);\n        return t;\n      }\n    });\n\n    final CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {\n      try {\n        // Await a common barrier point for all threads and then\n        // run racy code. This is intentional.\n        barrier.await();\n        switch (taskNo % 7) {\n          case 0:\n            Codec.getDefault();\n            break;\n          case 1:\n            Codec.forName(codecName);\n            break;\n          case 2:\n            PostingsFormat.forName(pfName);\n            break;\n          case 3:\n            DocValuesFormat.forName(dvfName);\n            break;\n          case 4:\n            Codec.availableCodecs();\n            break;\n          case 5:\n            PostingsFormat.availablePostingsFormats();\n            break;\n          case 6:\n            DocValuesFormat.availableDocValuesFormats();\n            break;\n          default:\n            throw new AssertionError();\n        }\n      } catch (Throwable t) {\n        synchronized(args) {\n          System.err.println(Thread.currentThread().getName() + \" failed to lookup codec service:\");\n          t.printStackTrace(System.err);\n        }\n        Runtime.getRuntime().halt(1); // signal failure to caller\n      }\n    }));\n\n    pool.shutdown();\n\n    if (!pool.awaitTermination(MAX_TIME_SECONDS, TimeUnit.SECONDS)) {\n      // Try to collect stacks so that we can better diagnose the failure.\n      System.err.println(\"Pool didn't return after \" + MAX_TIME_SECONDS +\n          \" seconds, classloader deadlock? Dumping stack traces.\");\n\n      for (Thread t : allThreads) {\n        System.err.println(\n            \"# Thread: \" + t + \", \" +\n            \"state: \" + t.getState() + \", \" +\n            \"stack:\\n\\t\" + Arrays.stream(t.getStackTrace()).map(Object::toString)\n                .collect(Collectors.joining(\"\\t\")) + \"\\n\");\n      }\n      Runtime.getRuntime().halt(1); // signal failure to caller\n    }\n  }\n\n","sourceOld":"  // This method is called in a spawned process.\n  public static void main(final String... args) throws Exception {\n    final String codecName = args[0];\n    final String pfName = args[1];\n    final String dvfName = args[2];\n\n    System.out.println(String.format(Locale.ROOT,\n        \"codec: %s, pf: %s, dvf: %s\", codecName, pfName, dvfName));\n\n    final int numThreads = 14; // two times the modulo in switch statement below\n    final CopyOnWriteArrayList<Thread> allThreads = new CopyOnWriteArrayList<>();\n    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"deadlockchecker\") {\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t = super.newThread(r);\n        allThreads.add(t);\n        return t;\n      }\n    });\n\n    final CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {\n      try {\n        // Await a common barrier point for all threads and then\n        // run racy code. This is intentional.\n        barrier.await();\n        switch (taskNo % 7) {\n          case 0:\n            Codec.getDefault();\n            break;\n          case 1:\n            Codec.forName(codecName);\n            break;\n          case 2:\n            PostingsFormat.forName(pfName);\n            break;\n          case 3:\n            DocValuesFormat.forName(dvfName);\n            break;\n          case 4:\n            Codec.availableCodecs();\n            break;\n          case 5:\n            PostingsFormat.availablePostingsFormats();\n            break;\n          case 6:\n            DocValuesFormat.availableDocValuesFormats();\n            break;\n          default:\n            throw new AssertionError();\n        }\n      } catch (Throwable t) {\n        synchronized(args) {\n          System.err.println(Thread.currentThread().getName() + \" failed to lookup codec service:\");\n          t.printStackTrace(System.err);\n        }\n        Runtime.getRuntime().halt(1); // signal failure to caller\n      }\n    }));\n\n    pool.shutdown();\n\n    if (!pool.awaitTermination(MAX_TIME_SECONDS, TimeUnit.SECONDS)) {\n      // Try to collect stacks so that we can better diagnose the failure.\n      System.err.println(\"Pool didn't return after \" + MAX_TIME_SECONDS +\n          \" seconds, classloader deadlock? Dumping stack traces.\");\n\n      for (Thread t : allThreads) {\n        System.err.println(\n            \"# Thread: \" + t + \", \" +\n            \"state: \" + t.getState() + \", \" +\n            \"stack:\\n\\t\" + Arrays.stream(t.getStackTrace()).map(Object::toString)\n                .collect(Collectors.joining(\"\\t\")) + \"\\n\");\n      }\n      Runtime.getRuntime().halt(1); // signal failure to caller\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b3f81aec687227f78f115327c1a50a262df2cff":["3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd"],"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd":["eaed68e725df990738b5c5674509158dac82dcf8"],"eaed68e725df990738b5c5674509158dac82dcf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b3f81aec687227f78f115327c1a50a262df2cff"]},"commit2Childs":{"9b3f81aec687227f78f115327c1a50a262df2cff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd":["9b3f81aec687227f78f115327c1a50a262df2cff"],"eaed68e725df990738b5c5674509158dac82dcf8":["3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaed68e725df990738b5c5674509158dac82dcf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}