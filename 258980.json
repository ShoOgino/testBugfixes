{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","commits":[{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof NumericTokenStream);\n    NumericTermAttribute numericAtt = ts.getAttribute(NumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof NumericTokenStream);\n    NumericTermAttribute numericAtt = ts.getAttribute(NumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyFieldReuse#assertNumericContents(int,TokenStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#assertNumericContents(int,TokenStream).mjava","sourceNew":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","sourceOld":"  private void assertNumericContents(int value, TokenStream ts) throws IOException {\n    assertTrue(ts instanceof LegacyNumericTokenStream);\n    LegacyNumericTermAttribute numericAtt = ts.getAttribute(LegacyNumericTermAttribute.class);\n    ts.reset();\n    boolean seen = false;\n    while (ts.incrementToken()) {\n      if (numericAtt.getShift() == 0) {\n        assertEquals(value, numericAtt.getRawValue());\n        seen = true;\n      }\n    }\n    ts.end();\n    ts.close();\n    assertTrue(seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}