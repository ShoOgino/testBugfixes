{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd06ecad11382d5e22750492518d05942405fb07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd06ecad11382d5e22750492518d05942405fb07","date":1510136235,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTime();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":["7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTime();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTime();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerIntegrationTest.MetricAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        triggerFiredLatch.countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":6,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        triggerFiredLatch.countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerIntegrationTest.MetricAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        triggerFiredLatch.countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":6,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestSearchRateAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        triggerFiredLatch.countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext context) throws Exception {\n      try {\n        events.add(event);\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(event.source + \" was fired before the configured waitFor period\");\n        }\n        getTriggerFiredLatch().countDown();\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd06ecad11382d5e22750492518d05942405fb07":["7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd06ecad11382d5e22750492518d05942405fb07"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"]},"commit2Childs":{"fd06ecad11382d5e22750492518d05942405fb07":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["fd06ecad11382d5e22750492518d05942405fb07"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}