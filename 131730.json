{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for(String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    // nocommit if one replica is very slow then it dos's all other replicas?\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","sourceNew":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for(String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","sourceOld":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for(String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    // nocommit if one replica is very slow then it dos's all other replicas?\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for(String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dcdf0501ecb64dde73646fe1f7533c1586deac1","date":1507107556,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PreCopyMergedSegmentWarmer#warm(LeafReader).mjava","sourceNew":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for (String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","sourceOld":"  @Override\n  public void warm(LeafReader reader) throws IOException {\n    long startNS = System.nanoTime();\n    final SegmentCommitInfo info = ((SegmentReader) reader).getSegmentInfo();\n    //System.out.println(\"TEST: warm merged segment files \" + info);\n    Map<String,FileMetaData> filesMetaData = new HashMap<>();\n    for(String fileName : info.files()) {\n      FileMetaData metaData = primary.readLocalFileMetaData(fileName);\n      assert metaData != null;\n      assert filesMetaData.containsKey(fileName) == false;\n      filesMetaData.put(fileName, metaData);\n    }\n\n    primary.preCopyMergedSegmentFiles(info, filesMetaData);\n    primary.message(String.format(Locale.ROOT, \"top: done warm merge \" + info + \": took %.3f sec, %.1f MB\", (System.nanoTime()-startNS)/1000000000., info.sizeInBytes()/1024/1024.));\n    primary.finishedMergedFiles.addAll(filesMetaData.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["68496c2200e559fb7802f7575427b7a482659afb"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}