{"path":"src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","commits":[{"id":"6cc744e0727692162a19824a8dfdd8e9f1ae6e30","date":1266977575,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n    populate();\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                ,\"debugQuery\", \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n    populate();\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                ,\"debugQuery\", \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n    populate();\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                ,\"debugQuery\", \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cc744e0727692162a19824a8dfdd8e9f1ae6e30":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6cc744e0727692162a19824a8dfdd8e9f1ae6e30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6cc744e0727692162a19824a8dfdd8e9f1ae6e30":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6cc744e0727692162a19824a8dfdd8e9f1ae6e30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}