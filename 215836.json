{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","commits":[{"id":"e3123be0c46a5ed1c1a40d102db7c24106694c35","date":1355608257,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = dataDir + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    createTempDir();\n    tmpSolrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = dataDir + File.separator + TestNonWritablePersistFile.class.getSimpleName() + System.currentTimeMillis();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b9c209edef136014b06483ce2e29a9116276cf","date":1521830037,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n    \n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n    assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n    assumeFalse(\"dataimport.properties is still writable even though \" + \n                \"marked readonly - test running as superuser?\", f.canWrite());\n    assumeTrue(\"\", false);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d0949db24d69fecbd33c5672d17136fd78ec77","date":1521830301,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n    \n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n    assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n    assumeFalse(\"dataimport.properties is still writable even though \" + \n                \"marked readonly - test running as superuser?\", f.canWrite());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n    \n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n    assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n    assumeFalse(\"dataimport.properties is still writable even though \" + \n                \"marked readonly - test running as superuser?\", f.canWrite());\n    assumeTrue(\"\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n    \n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n    assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n    assumeFalse(\"dataimport.properties is still writable even though \" + \n                \"marked readonly - test running as superuser?\", f.canWrite());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#createTempSolrHomeAndCore().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void createTempSolrHomeAndCore() throws Exception {\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n    FileUtils.copyDirectory(getFile(\"dih/solr\"), new File(tmpSolrHome).getAbsoluteFile());\n    initCore(\"dataimport-solrconfig.xml\", \"dataimport-schema.xml\", \n             new File(tmpSolrHome).getAbsolutePath());\n    \n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n    assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n    assumeFalse(\"dataimport.properties is still writable even though \" + \n                \"marked readonly - test running as superuser?\", f.canWrite());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["e3123be0c46a5ed1c1a40d102db7c24106694c35"],"31d0949db24d69fecbd33c5672d17136fd78ec77":["96b9c209edef136014b06483ce2e29a9116276cf"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["f4abec28b874149a7223e32cc7a01704c27790de","31d0949db24d69fecbd33c5672d17136fd78ec77"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["e3123be0c46a5ed1c1a40d102db7c24106694c35"],"96b9c209edef136014b06483ce2e29a9116276cf":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","96b9c209edef136014b06483ce2e29a9116276cf"],"31d0949db24d69fecbd33c5672d17136fd78ec77":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"96b9c209edef136014b06483ce2e29a9116276cf":["31d0949db24d69fecbd33c5672d17136fd78ec77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}