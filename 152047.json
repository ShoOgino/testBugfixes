{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","commits":[{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.info(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.info(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.info(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.info(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.info(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.info(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.info(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.info(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.info(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.info(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          LOG.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          LOG.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = (Map<String, Object>) Utils.fromJSON(data);\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener: clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener: clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          Stat stat = new Stat();\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, stat, true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          this.clusterPropsVersion = stat.getVersion();\n          log.debug(\"Loaded cluster properties: {} to version {}\", this.clusterProperties, clusterPropsVersion);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          this.clusterPropsVersion = -1;\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          Stat stat = new Stat();\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, stat, true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          this.clusterPropsVersion = stat.getVersion();\n          log.debug(\"Loaded cluster properties: {} to version {}\", this.clusterProperties, clusterPropsVersion);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          this.clusterPropsVersion = -1;\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#loadClusterProperties().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, new Stat(), true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          log.debug(\"Loaded cluster properties: {}\", this.clusterProperties);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadClusterProperties() {\n    try {\n      while (true) {\n        try {\n          Stat stat = new Stat();\n          byte[] data = zkClient.getData(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, stat, true);\n          this.clusterProperties = ClusterProperties.convertCollectionDefaultsToNestedFormat((Map<String, Object>) Utils.fromJSON(data));\n          this.clusterPropsVersion = stat.getVersion();\n          log.debug(\"Loaded cluster properties: {} to version {}\", this.clusterProperties, clusterPropsVersion);\n\n          for (ClusterPropertiesListener listener : clusterPropertiesListeners) {\n            listener.onChange(getClusterProperties());\n          }\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          this.clusterProperties = Collections.emptyMap();\n          this.clusterPropsVersion = -1;\n          log.debug(\"Loaded empty cluster properties\");\n          // set an exists watch, and if the node has been created since the last call,\n          // read the data again\n          if (zkClient.exists(ZkStateReader.CLUSTER_PROPS, clusterPropertiesWatcher, true) == null)\n            return;\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.error(\"Error reading cluster properties from zookeeper\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","115923bc88e5b1dc4bef049b1ded8486723052ed"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"033183e9e2da4609614733f0226a38c88c49ed36":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["033183e9e2da4609614733f0226a38c88c49ed36"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","962cd4f5e313777f35da8f521265323e84184929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["033183e9e2da4609614733f0226a38c88c49ed36"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"033183e9e2da4609614733f0226a38c88c49ed36":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","115923bc88e5b1dc4bef049b1ded8486723052ed"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}