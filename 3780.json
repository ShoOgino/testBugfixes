{"path":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<T>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<T>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<T>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}