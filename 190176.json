{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#enumerate(int,int,String,List[WordPart],Set[String],StringBuilder).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#enumerate(int,int,String,List[WordPart],Set[String],StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Recursively enumerates all paths through the word parts */\n  private void enumerate(int flags, int upto, String text, List<WordPart> wordParts, Set<String> paths, StringBuilder path) {\n    if (upto == wordParts.size()) {\n      if (path.length() > 0) {\n        paths.add(path.toString());\n      }\n    } else {\n      int savLength = path.length();\n      int end = endOfRun(wordParts, upto);\n\n      if (wordParts.get(upto).type == NUMBER) {\n        // always output single word, optionally surrounded by delims:\n        if (has(flags, GENERATE_NUMBER_PARTS) || wordParts.size() == 1) {\n          addWithSpaces(path, wordParts, upto, end);\n          if (has(flags, CATENATE_NUMBERS)) {\n            // recurse first with the parts\n            enumerate(flags, end, text, wordParts, paths, path);\n            path.setLength(savLength);\n            // .. and second with the concat\n            add(path, wordParts, upto, end);\n          }\n        } else if (has(flags, CATENATE_NUMBERS)) {\n          add(path, wordParts, upto, end);\n        }\n        enumerate(flags, end, text, wordParts, paths, path);\n        path.setLength(savLength);\n      } else {\n        assert wordParts.get(upto).type == LETTER;\n        // always output single word, optionally surrounded by delims:\n        if (has(flags, GENERATE_WORD_PARTS) || wordParts.size() == 1) {\n          addWithSpaces(path, wordParts, upto, end);\n          if (has(flags, CATENATE_WORDS)) {\n            // recurse first with the parts\n            enumerate(flags, end, text, wordParts, paths, path);\n            path.setLength(savLength);\n            // .. and second with the concat\n            add(path, wordParts, upto, end);\n          }\n        } else if (has(flags, CATENATE_WORDS)) {\n          add(path, wordParts, upto, end);\n        }\n        enumerate(flags, end, text, wordParts, paths, path);\n        path.setLength(savLength);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#enumerate(int,int,String,List[WordPart],Set[String],StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Recursively enumerates all paths through the word parts */\n  private void enumerate(int flags, int upto, String text, List<WordPart> wordParts, Set<String> paths, StringBuilder path) {\n    if (upto == wordParts.size()) {\n      if (path.length() > 0) {\n        paths.add(path.toString());\n      }\n    } else {\n      int savLength = path.length();\n      int end = endOfRun(wordParts, upto);\n\n      if (wordParts.get(upto).type == NUMBER) {\n        // always output single word, optionally surrounded by delims:\n        if (has(flags, GENERATE_NUMBER_PARTS) || wordParts.size() == 1) {\n          addWithSpaces(path, wordParts, upto, end);\n          if (has(flags, CATENATE_NUMBERS)) {\n            // recurse first with the parts\n            enumerate(flags, end, text, wordParts, paths, path);\n            path.setLength(savLength);\n            // .. and second with the concat\n            add(path, wordParts, upto, end);\n          }\n        } else if (has(flags, CATENATE_NUMBERS)) {\n          add(path, wordParts, upto, end);\n        }\n        enumerate(flags, end, text, wordParts, paths, path);\n        path.setLength(savLength);\n      } else {\n        assert wordParts.get(upto).type == LETTER;\n        // always output single word, optionally surrounded by delims:\n        if (has(flags, GENERATE_WORD_PARTS) || wordParts.size() == 1) {\n          addWithSpaces(path, wordParts, upto, end);\n          if (has(flags, CATENATE_WORDS)) {\n            // recurse first with the parts\n            enumerate(flags, end, text, wordParts, paths, path);\n            path.setLength(savLength);\n            // .. and second with the concat\n            add(path, wordParts, upto, end);\n          }\n        } else if (has(flags, CATENATE_WORDS)) {\n          add(path, wordParts, upto, end);\n        }\n        enumerate(flags, end, text, wordParts, paths, path);\n        path.setLength(savLength);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}