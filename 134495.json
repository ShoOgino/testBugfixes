{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#toNode(Map[String,#]).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#toNode(Map[String,#]).mjava","pathOld":"/dev/null","sourceNew":"  public static Node toNode(Map<String,?> json) {\n    DocumentBuilder docBuilder;\n    try {\n      docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    } catch (ParserConfigurationException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    \n    Document doc = docBuilder.newDocument();    \n    Element fieldType = doc.createElement(IndexSchema.FIELD_TYPE);\n    appendAttrs(fieldType, json);\n    \n    // transform the analyzer definitions into XML elements\n    Element analyzer = transformAnalyzer(doc, json, \"analyzer\", null);\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"indexAnalyzer\", \"index\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"queryAnalyzer\", \"query\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"multiTermAnalyzer\", \"multiterm\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n        \n    return fieldType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a4cf8d543027e3357024f7005523976bd6a0dfc","date":1434743090,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#toNode(Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#toNode(Map[String,#]).mjava","sourceNew":"  public static Node toNode(Map<String,?> json) {\n    DocumentBuilder docBuilder;\n    try {\n      docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    } catch (ParserConfigurationException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    \n    Document doc = docBuilder.newDocument();    \n    Element fieldType = doc.createElement(IndexSchema.FIELD_TYPE);\n    appendAttrs(fieldType, json);\n    \n    // transform the analyzer definitions into XML elements\n    Element analyzer = transformAnalyzer(doc, json, \"analyzer\", null);\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"indexAnalyzer\", \"index\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"queryAnalyzer\", \"query\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"multiTermAnalyzer\", \"multiterm\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    Element similarity = transformSimilarity(doc, json, \"similarity\");\n    if (similarity != null)\n      fieldType.appendChild(similarity);\n        \n    return fieldType;\n  }\n\n","sourceOld":"  public static Node toNode(Map<String,?> json) {\n    DocumentBuilder docBuilder;\n    try {\n      docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    } catch (ParserConfigurationException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    \n    Document doc = docBuilder.newDocument();    \n    Element fieldType = doc.createElement(IndexSchema.FIELD_TYPE);\n    appendAttrs(fieldType, json);\n    \n    // transform the analyzer definitions into XML elements\n    Element analyzer = transformAnalyzer(doc, json, \"analyzer\", null);\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"indexAnalyzer\", \"index\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"queryAnalyzer\", \"query\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n\n    analyzer = transformAnalyzer(doc, json, \"multiTermAnalyzer\", \"multiterm\");\n    if (analyzer != null)\n      fieldType.appendChild(analyzer);\n        \n    return fieldType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}