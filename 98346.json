{"path":"lucene/src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","sourceNew":"  public void testGeneral() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n  }\n\n","sourceOld":"  public void testGeneral() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","sourceNew":"  public void testGeneral() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n  }\n\n","sourceOld":"  public void testGeneral() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}