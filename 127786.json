{"path":"src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","commits":[{"id":"397b7824aaf879192d0061b65c59916b5ba9b969","date":1253111320,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnicode() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    \n    // chinese text value\n    Collection<Token> tokens = converter.convert(\"text_field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_购field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_field:我购xyz买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a43cde8ff18132d448d6a3ef99ea851d6ee784b","date":1253176001,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","pathOld":"src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","sourceNew":"  @Test\n  public void testUnicode() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    \n    // chinese text value\n    Collection<Token> tokens = converter.convert(\"text_field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_购field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_field:我购xyz买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUnicode() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    \n    // chinese text value\n    Collection<Token> tokens = converter.convert(\"text_field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_购field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_field:我购xyz买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    Assert.assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","pathOld":"src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testUnicode().mjava","sourceNew":"  @Test\n  public void testUnicode() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    \n    // chinese text value\n    Collection<Token> tokens = converter.convert(\"text_field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_购field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_field:我购xyz买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUnicode() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    \n    // chinese text value\n    Collection<Token> tokens = converter.convert(\"text_field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_购field:我购买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n\n    tokens = converter.convert(\"text_field:我购xyz买了道具和服装。\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertEquals(\"tokens Size: \" + tokens.size() + \" is not 1\", 1, tokens.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"397b7824aaf879192d0061b65c59916b5ba9b969":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5a43cde8ff18132d448d6a3ef99ea851d6ee784b"],"5a43cde8ff18132d448d6a3ef99ea851d6ee784b":["397b7824aaf879192d0061b65c59916b5ba9b969"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"397b7824aaf879192d0061b65c59916b5ba9b969":["5a43cde8ff18132d448d6a3ef99ea851d6ee784b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["397b7824aaf879192d0061b65c59916b5ba9b969"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5a43cde8ff18132d448d6a3ef99ea851d6ee784b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}