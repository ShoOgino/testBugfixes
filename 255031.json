{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/parser/Tokenizer#isNameChar(int).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/parser/Tokenizer#isNameChar(int).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     *  public static void main(String[])\n     *  {\n     *  System.out.println(\"private static final boolean[] isCtlOrTSpecial = \\n{\");  // bzw. isNameChar\n     *  for(int i=0; i<256; i++)\n     *  {\n     *  if(i>0)\n     *  System.out.print(\", \");\n     *  if(i % 14 == 0)\n     *  {\n     *  System.out.print(\"\\n/* \" + i + \" *\" + \"/   \");\n     *  }\n     *  if(Tokenizer.isCtlOrTspecial(i))  // bzw. isNameChar(i)\n     *  {\n     *  System.out.print(\"true \");\n     *  }\n     *  else\n     *  {\n     *  System.out.print(\"false\");\n     *  }\n     *  }\n     *  System.out.print(\"};\\n\\n\");\n     *  }\n     */\n//    public static final boolean isCtlOrTspecial(int c)\n//    {\n//        return (c < 256 ? isCtlOrTSpecial[c] : false);\n//    }\n//\n//    private static final boolean[] isNameChar =\n//    {\n//        /* 0 */     false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 14 */    false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 28 */    false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 42 */    false, false, false, true , true , false, true , true , true , true , true , true , true , true ,\n//        /* 56 */    true , true , false, false, false, false, false, false, false, true , true , true , true , true ,\n//        /* 70 */    true , true , true , true , true , true , true , true , true , true , true , true , true , true ,\n//        /* 84 */    true , true , true , true , true , true , true , false, false, false, false, true , false, true ,\n//        /* 98 */    true , true , true , true , true , true , true , true , true , true , true , true , true , true ,\n//        /* 112 */   true , true , true , true , true , true , true , true , true , true , true , false, false, false,\n//        /* 126 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 140 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 154 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 168 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 182 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 196 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 210 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 224 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 238 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 252 */   false, false, false, false\n//    };\n//    public static final boolean isNameChar(int c)\n//    {\n//        return (c < 256 ? isNameChar[c] : false);\n//    }\n//\n    /*\n     *  / I don't think this is a very standard definition of what can\n     *  / go into tag and attribute names.\n     */\n    /**\n     * Gets the nameChar attribute of the Tokenizer class\n     *\n     * @param c  Description of the Parameter\n     * @return   The nameChar value\n     */\n    public final static boolean isNameChar(int c)\n    {\n        return ('a' <= c && c <= 'z') ||\n                ('A' <= c && c <= 'Z') ||\n                ('0' <= c && c <= '9') ||\n                c == '.' || c == '-' || c == '_';\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/parser/Tokenizer#isNameChar(int).mjava","sourceNew":null,"sourceOld":"    /*\n     *  public static void main(String[])\n     *  {\n     *  System.out.println(\"private static final boolean[] isCtlOrTSpecial = \\n{\");  // bzw. isNameChar\n     *  for(int i=0; i<256; i++)\n     *  {\n     *  if(i>0)\n     *  System.out.print(\", \");\n     *  if(i % 14 == 0)\n     *  {\n     *  System.out.print(\"\\n/* \" + i + \" *\" + \"/   \");\n     *  }\n     *  if(Tokenizer.isCtlOrTspecial(i))  // bzw. isNameChar(i)\n     *  {\n     *  System.out.print(\"true \");\n     *  }\n     *  else\n     *  {\n     *  System.out.print(\"false\");\n     *  }\n     *  }\n     *  System.out.print(\"};\\n\\n\");\n     *  }\n     */\n//    public static final boolean isCtlOrTspecial(int c)\n//    {\n//        return (c < 256 ? isCtlOrTSpecial[c] : false);\n//    }\n//\n//    private static final boolean[] isNameChar =\n//    {\n//        /* 0 */     false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 14 */    false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 28 */    false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 42 */    false, false, false, true , true , false, true , true , true , true , true , true , true , true ,\n//        /* 56 */    true , true , false, false, false, false, false, false, false, true , true , true , true , true ,\n//        /* 70 */    true , true , true , true , true , true , true , true , true , true , true , true , true , true ,\n//        /* 84 */    true , true , true , true , true , true , true , false, false, false, false, true , false, true ,\n//        /* 98 */    true , true , true , true , true , true , true , true , true , true , true , true , true , true ,\n//        /* 112 */   true , true , true , true , true , true , true , true , true , true , true , false, false, false,\n//        /* 126 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 140 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 154 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 168 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 182 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 196 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 210 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 224 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 238 */   false, false, false, false, false, false, false, false, false, false, false, false, false, false,\n//        /* 252 */   false, false, false, false\n//    };\n//    public static final boolean isNameChar(int c)\n//    {\n//        return (c < 256 ? isNameChar[c] : false);\n//    }\n//\n    /*\n     *  / I don't think this is a very standard definition of what can\n     *  / go into tag and attribute names.\n     */\n    /**\n     * Gets the nameChar attribute of the Tokenizer class\n     *\n     * @param c  Description of the Parameter\n     * @return   The nameChar value\n     */\n    public final static boolean isNameChar(int c)\n    {\n        return ('a' <= c && c <= 'z') ||\n                ('A' <= c && c <= 'Z') ||\n                ('0' <= c && c <= '9') ||\n                c == '.' || c == '-' || c == '_';\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}