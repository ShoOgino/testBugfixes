{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb2411226bebe23191dc34a8e8252a936a7261a8","date":1557853382,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","sourceNew":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","sourceOld":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","sourceNew":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    if (!treeOne.equals(treeTwo)) {\n      List<String> t1 = new ArrayList<>(treeOne);\n      t1.removeAll(treeTwo);\n      log.warn(\"Only in tree one: \" + t1);\n      List<String> t2 = new ArrayList<>(treeTwo);\n      t2.removeAll(treeOne);\n      log.warn(\"Only in tree two: \" + t2);\n    }\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","sourceOld":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","sourceNew":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    if (!treeOne.equals(treeTwo)) {\n      List<String> t1 = new ArrayList<>(treeOne);\n      t1.removeAll(treeTwo);\n      log.warn(\"Only in tree one: {}\", t1);\n      List<String> t2 = new ArrayList<>(treeTwo);\n      t2.removeAll(treeOne);\n      log.warn(\"Only in tree two: {}\", t2);\n    }\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","sourceOld":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    if (!treeOne.equals(treeTwo)) {\n      List<String> t1 = new ArrayList<>(treeOne);\n      t1.removeAll(treeTwo);\n      log.warn(\"Only in tree one: \" + t1);\n      List<String> t2 = new ArrayList<>(treeTwo);\n      t2.removeAll(treeOne);\n      log.warn(\"Only in tree two: \" + t2);\n    }\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertDistribStateManager(DistribStateManager,DistribStateManager).mjava","sourceNew":null,"sourceOld":"  private static void assertDistribStateManager(DistribStateManager one, DistribStateManager two) throws Exception {\n    List<String> treeOne = new ArrayList<>(one.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    List<String> treeTwo = new ArrayList<>(two.listTree(\"/\").stream()\n        .filter(STATE_FILTER_FUN).collect(Collectors.toList()));\n    Collections.sort(treeOne);\n    Collections.sort(treeTwo);\n    if (!treeOne.equals(treeTwo)) {\n      List<String> t1 = new ArrayList<>(treeOne);\n      t1.removeAll(treeTwo);\n      log.warn(\"Only in tree one: {}\", t1);\n      List<String> t2 = new ArrayList<>(treeTwo);\n      t2.removeAll(treeOne);\n      log.warn(\"Only in tree two: {}\", t2);\n    }\n    assertEquals(treeOne, treeTwo);\n    for (String path : treeOne) {\n      VersionedData vd1 = one.getData(path);\n      VersionedData vd2 = two.getData(path);\n      assertEquals(path, vd1, vd2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3f504512a03d978990cbff30db0522b354e846db":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["3f504512a03d978990cbff30db0522b354e846db"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}