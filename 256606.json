{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader = \n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrServer leaderSolr = getHttpSolrServer(leader, testCollectionName);\n    List<HttpSolrServer> replicas = \n        new ArrayList<HttpSolrServer>(notLeaders.size());\n    \n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrServer(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrServer replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.shutdown();\n      }\n      for (HttpSolrServer replicaSolr : replicas) {\n        replicaSolr.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","sourceNew":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader = \n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);\n    List<HttpSolrClient> replicas =\n        new ArrayList<HttpSolrClient>(notLeaders.size());\n    \n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrClient(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrClient replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.shutdown();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader = \n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrServer leaderSolr = getHttpSolrServer(leader, testCollectionName);\n    List<HttpSolrServer> replicas = \n        new ArrayList<HttpSolrServer>(notLeaders.size());\n    \n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrServer(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrServer replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.shutdown();\n      }\n      for (HttpSolrServer replicaSolr : replicas) {\n        replicaSolr.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","sourceNew":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);\n    List<HttpSolrClient> replicas =\n        new ArrayList<HttpSolrClient>(notLeaders.size());\n\n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrClient(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrClient replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader = \n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);\n    List<HttpSolrClient> replicas =\n        new ArrayList<HttpSolrClient>(notLeaders.size());\n    \n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrClient(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrClient replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.shutdown();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"574b23492dfd71945e5c252e0527a138d216a9d3","date":1551961121,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocsExistInAllReplicas(List[Replica],String,int,int).mjava","sourceNew":"  /**\n   * Assert docs exists in {@code notLeaders} replicas, docs must also exist in the shard1 leader as well.\n   * This method uses RTG for validation therefore it must work for asserting both TLOG and NRT replicas.\n   */\n  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);\n    List<HttpSolrClient> replicas =\n        new ArrayList<HttpSolrClient>(notLeaders.size());\n\n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrClient(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrClient replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n      String testCollectionName, int firstDocId, int lastDocId)\n      throws Exception {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);\n    List<HttpSolrClient> replicas =\n        new ArrayList<HttpSolrClient>(notLeaders.size());\n\n    for (Replica r : notLeaders) {\n      replicas.add(getHttpSolrClient(r, testCollectionName));\n    }\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(leaderSolr, testCollectionName, docId);\n        for (HttpSolrClient replicaSolr : replicas) {\n          assertDocExists(replicaSolr, testCollectionName, docId);\n        }\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"574b23492dfd71945e5c252e0527a138d216a9d3":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["574b23492dfd71945e5c252e0527a138d216a9d3"]},"commit2Childs":{"574b23492dfd71945e5c252e0527a138d216a9d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["574b23492dfd71945e5c252e0527a138d216a9d3"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}