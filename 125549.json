{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#outOfOrderDBQWithInPlaceUpdatesTest().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", Long.MAX_VALUE-100)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", Long.MAX_VALUE-98));\n    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", Long.MAX_VALUE-99));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, COLLECTION);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"2\"))\n        .commit(cluster.getSolrClient(), COLLECTION);\n    checkShardConsistency(2,20);\n    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c61b53ac917c240593803ca928b383da9a4cd7","date":1508728783,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName, (liveNodes, collectionState) ->\n        !collectionState.getLeader(\"shard1\").getNodeName().equals(oldLeaderNodeName)\n    );\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a07902b1c1c59fc427a6c838837621c148f53c3","date":1509332648,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName, (liveNodes, collectionState) ->\n        !collectionState.getLeader(\"shard1\").getNodeName().equals(oldLeaderNodeName)\n    );\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f43ec94a8dd9ee8d862fee49bc3124423c77142b","date":1550813629,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5b93713fb0adca4f2a88e0a629554bf1ac2866","date":1571852796,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOutOfOrderDBQWithInPlaceUpdates().mjava","sourceNew":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForLeaderChange(oldLeaderJetty, \"shard1\");\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","sourceOld":"  public void testOutOfOrderDBQWithInPlaceUpdates() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").indexed());\n    assertFalse(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").stored());\n    assertTrue(getSolrCore(true).get(0).getLatestSchema().getField(\"inplace_updatable_int\").hasDocValues());\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 1, \"title_s\", \"title0_new\", \"inplace_updatable_int\", 5, \"_version_\", 1L)); // full update\n    updates.add(simulatedDBQ(\"inplace_updatable_int:5\", 3L));\n    updates.add(simulatedUpdateRequest(1L, \"id\", 1, \"inplace_updatable_int\", 6, \"_version_\", 2L));\n    for (JettySolrRunner solrRunner: getSolrRunner(false)) {\n      try (SolrClient client = solrRunner.newClient()) {\n        for (UpdateRequest up : updates) {\n          up.process(client, collectionName);\n        }\n      }\n    }\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    String oldLeaderNodeName = oldLeaderJetty.getNodeName();\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    waitForState(\"Expect new leader\", collectionName,\n        (liveNodes, collectionState) -> {\n          Replica leader = collectionState.getLeader(\"shard1\");\n          if (leader == null) return false;\n          return !leader.getNodeName().equals(oldLeaderNodeName);\n        }\n    );\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,1, cluster.getJettySolrRunners());\n    SolrDocument doc = cluster.getSolrClient().getById(collectionName,\"1\");\n    assertNotNull(doc.get(\"title_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4a07902b1c1c59fc427a6c838837621c148f53c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"77c61b53ac917c240593803ca928b383da9a4cd7":["61c45e99cf6676da48f19d7511c73712ad39402b"],"4a07902b1c1c59fc427a6c838837621c148f53c3":["77c61b53ac917c240593803ca928b383da9a4cd7"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f43ec94a8dd9ee8d862fee49bc3124423c77142b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","77c61b53ac917c240593803ca928b383da9a4cd7"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f43ec94a8dd9ee8d862fee49bc3124423c77142b","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77c61b53ac917c240593803ca928b383da9a4cd7":["4a07902b1c1c59fc427a6c838837621c148f53c3"],"4a07902b1c1c59fc427a6c838837621c148f53c3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}