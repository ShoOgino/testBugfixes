{"path":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","commits":[{"id":"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","date":1332689453,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(toBitSet(other));\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    FixedBitSet bs1 = this.getBits();\n    FixedBitSet bs2 = toBitSet(other);\n\n// resize both BitSets to make sure they have the same amount of zero padding\n\n    int maxNumBits = bs1.length() > bs2.length() ? bs1.length() : bs2.length();\n    bs1 = FixedBitSet.ensureCapacity(bs1, maxNumBits);\n    bs2 = FixedBitSet.ensureCapacity(bs2, maxNumBits);\n\n    // if (this.size() != other.size()) return false;\n    return bs1.equals(bs2);\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(toBitSet(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    FixedBitSet bs1 = this.getBits();\n    FixedBitSet bs2 = toBitSet(other);\n\n// resize both BitSets to make sure they have the same amount of zero padding\n\n    int maxNumBits = bs1.length() > bs2.length() ? bs1.length() : bs2.length();\n    bs1 = FixedBitSet.ensureCapacity(bs1, maxNumBits);\n    bs2 = FixedBitSet.ensureCapacity(bs2, maxNumBits);\n\n    // if (this.size() != other.size()) return false;\n    return bs1.equals(bs2);\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(toBitSet(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#equals(Object).mjava","sourceNew":null,"sourceOld":"  // Not implemented efficiently... for testing purposes only\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    FixedBitSet bs1 = this.getBits();\n    FixedBitSet bs2 = toBitSet(other);\n\n// resize both BitSets to make sure they have the same amount of zero padding\n\n    int maxNumBits = bs1.length() > bs2.length() ? bs1.length() : bs2.length();\n    bs1 = FixedBitSet.ensureCapacity(bs1, maxNumBits);\n    bs2 = FixedBitSet.ensureCapacity(bs2, maxNumBits);\n\n    // if (this.size() != other.size()) return false;\n    return bs1.equals(bs2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}