{"path":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59fc0e55b44c555c39d950def9414b5596c6ebe2","date":1327620010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(new SlowMultiReaderWrapper(searcher.getIndexReader()), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(new SlowMultiReaderWrapper(searcher.getIndexReader()), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(new SlowMultiReaderWrapper(searcher.getIndexReader()), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getAtomicReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(new SlowMultiReaderWrapper(searcher.getIndexReader()), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getAtomicReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(new SlowMultiReaderWrapper(searcher.getIndexReader()), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60daad1187870cb8dea2344dcd50c29136546f18","date":1361389468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getAtomicReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c","date":1378490020,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    isPlaceholder = false;\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e5082b22185dc45d91bf92af6c331b02409dad","date":1405981771,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    isPlaceholder = false;\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      LeafReader r = searcher.getLeafReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      AtomicReader r = searcher.getAtomicReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n        // threshold, over which we use set intersections instead of counting\n        // to (1) save memory, and (2) speed up faceting.\n        // Add 2 for testing purposes so that there will always be some terms under\n        // the threshold even when the index is very\n        // small.\n        searcher.maxDoc()/20 + 2,\n        DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      // TODO: it's wasteful to create one of these each time\n      // but DocTermOrds will throw an exception if it thinks the field has doc values (which is faked by UnInvertingReader)\n      LeafReader r = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise);\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      LeafReader r = searcher.getLeafReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      LeafReader r = searcher.getLeafReader();\n      uninvert(r, r.getLiveDocs(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["c26f00b574427b55127e869b935845554afde1fa","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["60daad1187870cb8dea2344dcd50c29136546f18","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"23e5082b22185dc45d91bf92af6c331b02409dad":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["60daad1187870cb8dea2344dcd50c29136546f18"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["23e5082b22185dc45d91bf92af6c331b02409dad"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["59fc0e55b44c555c39d950def9414b5596c6ebe2","96d207426bd26fa5c1014e26d21d87603aea68b7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60daad1187870cb8dea2344dcd50c29136546f18":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["96d207426bd26fa5c1014e26d21d87603aea68b7"],"23e5082b22185dc45d91bf92af6c331b02409dad":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["60daad1187870cb8dea2344dcd50c29136546f18"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"60daad1187870cb8dea2344dcd50c29136546f18":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["23e5082b22185dc45d91bf92af6c331b02409dad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}