{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","commits":[{"id":"6d826728f3843425e335d7f7c856971067540dc3","date":1321315952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    //doc.add(newField(\"f7\", \"doc1 field7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    //doc.add(newField(\"f7\", \"doc2 field7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    System.out.println(\"r1=\" + r1);\n    System.out.println(\"r2=\" + r2);\n    System.out.println(\"r3=\" + r3);\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":["a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae","d4681a68f42605af5014dd08a03a253e804a4d80","04f07771a2a7dd3a395700665ed839c3dae2def2","0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae","date":1321453714,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    //doc.add(newField(\"f7\", \"doc1 field7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    //doc.add(newField(\"f7\", \"doc2 field7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    System.out.println(\"r1=\" + r1);\n    System.out.println(\"r2=\" + r2);\n    System.out.println(\"r3=\" + r3);\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","bugFix":["6d826728f3843425e335d7f7c856971067540dc3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4af732a9bb4cfe62634ba159e581c6eb45ceb280","date":1323232497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4681a68f42605af5014dd08a03a253e804a4d80","date":1323260341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","bugFix":["6d826728f3843425e335d7f7c856971067540dc3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","date":1323283758,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae":["6d826728f3843425e335d7f7c856971067540dc3"],"6d826728f3843425e335d7f7c856971067540dc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4681a68f42605af5014dd08a03a253e804a4d80"],"d4681a68f42605af5014dd08a03a253e804a4d80":["a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":["a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae","d4681a68f42605af5014dd08a03a253e804a4d80"],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":["a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae":["d4681a68f42605af5014dd08a03a253e804a4d80","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","4af732a9bb4cfe62634ba159e581c6eb45ceb280"],"6d826728f3843425e335d7f7c856971067540dc3":["a93dcac2b582e6efd4beed5ae1a0e69504e9f5ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4681a68f42605af5014dd08a03a253e804a4d80":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d826728f3843425e335d7f7c856971067540dc3"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":[],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","4af732a9bb4cfe62634ba159e581c6eb45ceb280","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}