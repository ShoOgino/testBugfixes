{"path":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":null,"sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#encoderTest(IntEncoder,IntsRef,IntsRef).mjava","sourceNew":null,"sourceOld":"  private static void encoderTest(IntEncoder encoder, IntsRef data, IntsRef expected) throws IOException {\n    // ensure toString is implemented\n    String toString = encoder.toString();\n    assertFalse(toString.startsWith(encoder.getClass().getName() + \"@\"));\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    toString = decoder.toString();\n    assertFalse(toString.startsWith(decoder.getClass().getName() + \"@\"));\n    \n    BytesRef bytes = new BytesRef(100); // some initial capacity - encoders should grow the byte[]\n    IntsRef values = new IntsRef(100); // some initial capacity - decoders should grow the int[]\n    for (int i = 0; i < 2; i++) {\n      // run 2 iterations to catch encoders/decoders which don't reset properly\n      encoding(encoder, data, bytes);\n      decoding(bytes, values, encoder.createMatchingDecoder());\n      assertTrue(expected.intsEquals(values));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}