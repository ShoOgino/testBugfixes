{"path":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(LeafReaderContext context, int[] logic, int[] index)\n      throws IOException {\n    if (logic.length != chain.length) {\n      throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n    }\n\n    FixedBitSet result = initialResult(context, logic[0], index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","sourceNew":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context LeafReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(LeafReaderContext context, int[] logic, int[] index)\n      throws IOException {\n    if (logic.length != chain.length) {\n      throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n    }\n\n    FixedBitSet result = initialResult(context, logic[0], index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(LeafReaderContext context, int[] logic, int[] index)\n      throws IOException {\n    if (logic.length != chain.length) {\n      throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n    }\n\n    FixedBitSet result = initialResult(context, logic[0], index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78e5763f288fef7c1cc1ebd2530195ce46b5b28","date":1412245226,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context LeafReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(LeafReaderContext context, int[] logic, int[] index)\n      throws IOException {\n    if (logic.length != chain.length) {\n      throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n    }\n\n    FixedBitSet result = initialResult(context, logic[0], index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(LeafReaderContext,int[],int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context LeafReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(LeafReaderContext context, int[] logic, int[] index)\n      throws IOException {\n    if (logic.length != chain.length) {\n      throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n    }\n\n    FixedBitSet result = initialResult(context, logic[0], index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9644a32526f2e2ae87543b00e8be543aa25f29c","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f78e5763f288fef7c1cc1ebd2530195ce46b5b28"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}