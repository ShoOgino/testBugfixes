{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","commits":[{"id":"d3c9c955664ed32e2bf97b3da26467354673ea18","date":1522944427,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","sourceNew":"    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,\n      final Plane travelPlane, final Plane travelAbovePlane, final Plane travelBelowPlane,\n      final double thePointX, final double thePointY, final double thePointZ, final GeoPoint intersectionPoint) {\n      this.testPointPlane = testPointPlane;\n      this.testPointAbovePlane = testPointAbovePlane;\n      this.testPointBelowPlane = testPointBelowPlane;\n      this.travelPlane = travelPlane;\n      this.travelAbovePlane = travelAbovePlane;\n      this.travelBelowPlane = travelBelowPlane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      this.intersectionPoint = intersectionPoint;\n      \n      //System.out.println(\"Intersection point = \"+intersectionPoint);\n        \n      assert travelPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on travel plane\";\n      assert testPointPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on test point plane\";\n        \n      assert !testPoint.isNumericallyIdentical(intersectionPoint) : \"test point is the same as intersection point\";\n      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ) : \"check point is same is intersection point\";\n\n      this.testPointCutoffPlane = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\n      this.checkPointCutoffPlane = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\n      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\n      this.checkPointOtherCutoffPlane = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\n\n      // Sanity check\n      assert testPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointCutoffPlane\";\n      assert testPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointOtherCutoffPlane\";\n      assert checkPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointCutoffPlane\";\n      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointOtherCutoffPlane\";\n      \n    }\n\n","sourceOld":"    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,\n      final Plane travelPlane, final double thePointX, final double thePointY, final double thePointZ, final GeoPoint intersectionPoint) {\n      this.testPointPlane = testPointPlane;\n      this.testPointAbovePlane = testPointAbovePlane;\n      this.testPointBelowPlane = testPointBelowPlane;\n      this.travelPlane = travelPlane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      this.intersectionPoint = intersectionPoint;\n      \n      //System.out.println(\"Intersection point = \"+intersectionPoint);\n        \n      assert travelPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on travel plane\";\n      assert testPointPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on test point plane\";\n        \n      assert !testPoint.isNumericallyIdentical(intersectionPoint) : \"test point is the same as intersection point\";\n      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ) : \"check point is same is intersection point\";\n\n      this.testPointCutoffPlane = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\n      this.checkPointCutoffPlane = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\n      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\n      this.checkPointOtherCutoffPlane = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\n\n      // Sanity check\n      assert testPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointCutoffPlane\";\n      assert testPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointOtherCutoffPlane\";\n      assert checkPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointCutoffPlane\";\n      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointOtherCutoffPlane\";\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61208df9977bdd3054d6b9792eb6a18be9d32837","date":1523626771,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","sourceNew":"    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,\n      final Plane travelPlane, final Plane travelAbovePlane, final Plane travelBelowPlane,\n      final double thePointX, final double thePointY, final double thePointZ, final GeoPoint intersectionPoint) {\n      this.testPointPlane = testPointPlane;\n      this.testPointAbovePlane = testPointAbovePlane;\n      this.testPointBelowPlane = testPointBelowPlane;\n      this.travelPlane = travelPlane;\n      this.travelAbovePlane = travelAbovePlane;\n      this.travelBelowPlane = travelBelowPlane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      this.intersectionPoint = intersectionPoint;\n      \n      //System.out.println(\"Intersection point = \"+intersectionPoint);\n      //System.out.println(\"TestPoint plane: \"+testPoint+\" -> \"+intersectionPoint);\n      //System.out.println(\"Travel plane: [\"+thePointX+\",\"+thePointY+\",\"+thePointZ+\"] -> \"+intersectionPoint);\n      \n      assert travelPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on travel plane\";\n      assert testPointPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on test point plane\";\n      \n      //System.out.println(\"Test point distance to intersection point: \"+intersectionPoint.linearDistance(testPoint));\n      //System.out.println(\"Check point distance to intersection point: \"+intersectionPoint.linearDistance(thePointX, thePointY, thePointZ));\n\n      assert !testPoint.isNumericallyIdentical(intersectionPoint) : \"test point is the same as intersection point\";\n      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ) : \"check point is same as intersection point\";\n\n      this.testPointCutoffPlane = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\n      this.checkPointCutoffPlane = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\n      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\n      this.checkPointOtherCutoffPlane = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\n\n      // Sanity check\n      assert testPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointCutoffPlane\";\n      assert testPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointOtherCutoffPlane\";\n      assert checkPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointCutoffPlane\";\n      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointOtherCutoffPlane\";\n      \n    }\n\n","sourceOld":"    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,\n      final Plane travelPlane, final Plane travelAbovePlane, final Plane travelBelowPlane,\n      final double thePointX, final double thePointY, final double thePointZ, final GeoPoint intersectionPoint) {\n      this.testPointPlane = testPointPlane;\n      this.testPointAbovePlane = testPointAbovePlane;\n      this.testPointBelowPlane = testPointBelowPlane;\n      this.travelPlane = travelPlane;\n      this.travelAbovePlane = travelAbovePlane;\n      this.travelBelowPlane = travelBelowPlane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      this.intersectionPoint = intersectionPoint;\n      \n      //System.out.println(\"Intersection point = \"+intersectionPoint);\n        \n      assert travelPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on travel plane\";\n      assert testPointPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on test point plane\";\n        \n      assert !testPoint.isNumericallyIdentical(intersectionPoint) : \"test point is the same as intersection point\";\n      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ) : \"check point is same is intersection point\";\n\n      this.testPointCutoffPlane = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\n      this.checkPointCutoffPlane = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\n      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\n      this.checkPointOtherCutoffPlane = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\n\n      // Sanity check\n      assert testPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointCutoffPlane\";\n      assert testPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointOtherCutoffPlane\";\n      assert checkPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointCutoffPlane\";\n      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointOtherCutoffPlane\";\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#DualCrossingEdgeIterator(Plane,Plane,Plane,Plane,Plane,Plane,double,double,double,GeoPoint).mjava","sourceNew":null,"sourceOld":"    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,\n      final Plane travelPlane, final Plane travelAbovePlane, final Plane travelBelowPlane,\n      final double thePointX, final double thePointY, final double thePointZ, final GeoPoint intersectionPoint) {\n      this.testPointPlane = testPointPlane;\n      this.testPointAbovePlane = testPointAbovePlane;\n      this.testPointBelowPlane = testPointBelowPlane;\n      this.travelPlane = travelPlane;\n      this.travelAbovePlane = travelAbovePlane;\n      this.travelBelowPlane = travelBelowPlane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      this.intersectionPoint = intersectionPoint;\n      \n      //System.out.println(\"Intersection point = \"+intersectionPoint);\n      //System.out.println(\"TestPoint plane: \"+testPoint+\" -> \"+intersectionPoint);\n      //System.out.println(\"Travel plane: [\"+thePointX+\",\"+thePointY+\",\"+thePointZ+\"] -> \"+intersectionPoint);\n      \n      assert travelPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on travel plane\";\n      assert testPointPlane.evaluateIsZero(intersectionPoint) : \"intersection point must be on test point plane\";\n      \n      //System.out.println(\"Test point distance to intersection point: \"+intersectionPoint.linearDistance(testPoint));\n      //System.out.println(\"Check point distance to intersection point: \"+intersectionPoint.linearDistance(thePointX, thePointY, thePointZ));\n\n      assert !testPoint.isNumericallyIdentical(intersectionPoint) : \"test point is the same as intersection point\";\n      assert !intersectionPoint.isNumericallyIdentical(thePointX, thePointY, thePointZ) : \"check point is same as intersection point\";\n\n      this.testPointCutoffPlane = new SidedPlane(intersectionPoint, testPointPlane, testPoint);\n      this.checkPointCutoffPlane = new SidedPlane(intersectionPoint, travelPlane, thePointX, thePointY, thePointZ);\n      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoint);\n      this.checkPointOtherCutoffPlane = new SidedPlane(thePointX, thePointY, thePointZ, travelPlane, intersectionPoint);\n\n      // Sanity check\n      assert testPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointCutoffPlane\";\n      assert testPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within testPointOtherCutoffPlane\";\n      assert checkPointCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointCutoffPlane\";\n      assert checkPointOtherCutoffPlane.isWithin(intersectionPoint) : \"intersection must be within checkPointOtherCutoffPlane\";\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3c9c955664ed32e2bf97b3da26467354673ea18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61208df9977bdd3054d6b9792eb6a18be9d32837":["d3c9c955664ed32e2bf97b3da26467354673ea18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039615f2ceafe5881c61222281f45a0631b90174":["61208df9977bdd3054d6b9792eb6a18be9d32837"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["039615f2ceafe5881c61222281f45a0631b90174"]},"commit2Childs":{"d3c9c955664ed32e2bf97b3da26467354673ea18":["61208df9977bdd3054d6b9792eb6a18be9d32837"],"61208df9977bdd3054d6b9792eb6a18be9d32837":["039615f2ceafe5881c61222281f45a0631b90174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c9c955664ed32e2bf97b3da26467354673ea18"],"039615f2ceafe5881c61222281f45a0631b90174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}