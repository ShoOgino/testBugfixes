{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController.UnloadCoreOnDeletedWatcher#onStateChanged(DocCollection).mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.UnloadCoreOnDeletedWatcher#onStateChanged(DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.UnloadCoreOnDeletedWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"    @Override\n    // synchronized due to SOLR-11535\n    public synchronized boolean onStateChanged(DocCollection collectionState) {\n      if (getCoreContainer().getCoreDescriptor(coreName) == null) return true;\n\n      boolean replicaRemoved = getReplicaOrNull(collectionState, shard, coreNodeName) == null;\n      if (replicaRemoved) {\n        try {\n          log.info(\"Replica {} removed from clusterstate, remove it.\", coreName);\n          getCoreContainer().unload(coreName, true, true, true);\n        } catch (SolrException e) {\n          if (!e.getMessage().contains(\"Cannot unload non-existent core\")) {\n            // no need to log if the core was already unloaded\n            log.warn(\"Failed to unregister core:{}\", coreName, e);\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to unregister core:{}\", coreName, e);\n        }\n      }\n      return replicaRemoved;\n    }\n\n","sourceOld":"    @Override\n    // synchronized due to SOLR-11535\n    public synchronized boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n      if (getCoreContainer().getCoreDescriptor(coreName) == null) return true;\n\n      boolean replicaRemoved = getReplicaOrNull(collectionState, shard, coreNodeName) == null;\n      if (replicaRemoved) {\n        try {\n          log.info(\"Replica {} removed from clusterstate, remove it.\", coreName);\n          getCoreContainer().unload(coreName, true, true, true);\n        } catch (SolrException e) {\n          if (!e.getMessage().contains(\"Cannot unload non-existent core\")) {\n            // no need to log if the core was already unloaded\n            log.warn(\"Failed to unregister core:{}\", coreName, e);\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to unregister core:{}\", coreName, e);\n        }\n      }\n      return replicaRemoved;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}