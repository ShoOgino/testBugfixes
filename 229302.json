{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Tuple tuple = new Tuple();\n    tuple.put(\"max\", descriptiveStatistics.getMax());\n    tuple.put(\"mean\", descriptiveStatistics.getMean());\n    tuple.put(\"min\", descriptiveStatistics.getMin());\n    tuple.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    tuple.put(\"sum\", descriptiveStatistics.getSum());\n    tuple.put(\"N\", descriptiveStatistics.getN());\n    tuple.put(\"var\", descriptiveStatistics.getVariance());\n    tuple.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    tuple.put(\"skewness\", descriptiveStatistics.getSkewness());\n    tuple.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    tuple.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    tuple.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return tuple;\n  }  \n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    \n    if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a numeric list but found %s\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    // we know each value is a BigDecimal or a list of BigDecimals\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n    ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).forEach(innerValue -> descriptiveStatistics.addValue(innerValue));\n\n    Map<String,Number> map = new HashMap<>();\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["804a8d5358fe7b7563b85ee7838714d720b89272"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}