{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","commits":[{"id":"aca9a18be9d7251531953284ee8d8012b022cbc7","date":1519116407,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6edfc2dfac665ac59cb5f5335512bea5456d1dc3","date":1519140363,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873efcdf87d1e2a7c3014c56779fec9967a3ec9f","date":1519279726,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b857dd3d30acf3541d2bf24a619d81effc9c11d","date":1519436286,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1a927b2bca4e3939de1ef05d142c13cee9c1245","date":1520231792,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#createClient(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create Solr client\n   */\n  private static SolrClient createClient(String connStr) {\n    SolrClient solrClient;\n\n    Pattern baseUrlPattern = Pattern.compile(\"^https?:\\\\/\\\\/[\\\\w\\\\/:%#\\\\$&\\\\?\\\\(\\\\)~\\\\.=\\\\+\\\\-]+$\");\n    Pattern zkHostPattern = Pattern.compile(\"^(?<host>[^\\\\/]+)(?<chroot>|(?:\\\\/.*))$\");\n    Matcher matcher;\n\n    matcher = baseUrlPattern.matcher(connStr);\n    if (matcher.matches()) {\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();\n      builder.withBaseSolrUrl(connStr);\n\n      HttpSolrClient httpSolrClient = builder.build();\n      httpSolrClient.setParser(responseParser);\n\n      solrClient = httpSolrClient;\n    } else {\n      String host = \"\";\n      String chroot = \"\";\n\n      matcher = zkHostPattern.matcher(connStr);\n      if (matcher.matches()) {\n        host = matcher.group(\"host\") != null ? matcher.group(\"host\") : \"\";\n        chroot = matcher.group(\"chroot\") != null ? matcher.group(\"chroot\") : \"\";\n      }\n\n      NoOpResponseParser responseParser = new NoOpResponseParser();\n      responseParser.setWriterType(\"json\");\n\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();\n      if (host.contains(\",\")) {\n        List<String> hosts = new ArrayList<>();\n        for (String h : host.split(\",\")) {\n          if (h != null && !h.equals(\"\")) {\n            hosts.add(h.trim());\n          }\n        }\n        builder.withZkHost(hosts);\n      } else {\n        builder.withZkHost(host);\n      }\n      if (chroot.equals(\"\")) {\n        builder.withZkChroot(\"/\");\n      } else {\n        builder.withZkChroot(chroot);\n      }\n\n      CloudSolrClient cloudSolrClient = builder.build();\n      cloudSolrClient.setParser(responseParser);\n\n      solrClient = cloudSolrClient;\n    }\n\n    return solrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"]},"commit2Childs":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}