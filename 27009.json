{"path":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","commits":[{"id":"4cb48b0969187aad3e0c6befa65e4421e1e1f667","date":1399982311,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector);\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector);\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector);\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector + \" docValsImpl: \" + sortedSet.toString());\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector);\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else {\n      switch(selector) {\n        case MIN: return new MinValue(sortedSet);\n        case MAX: return new MaxValue(sortedSet);\n        case MIDDLE_MIN: return new MiddleMinValue(sortedSet);\n        case MIDDLE_MAX: return new MiddleMaxValue(sortedSet);\n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector + \" docValsImpl: \" + sortedSet.toString());\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else {\n      switch(selector) {\n        case MIN: return new MinValue(sortedSet);\n        case MAX: return new MaxValue(sortedSet);\n        case MIDDLE_MIN: return new MiddleMinValue(sortedSet);\n        case MIDDLE_MAX: return new MiddleMaxValue(sortedSet);\n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector + \" docValsImpl: \" + sortedSet.toString());\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedSetSelector#wrap(SortedSetDocValues,Type).mjava","sourceNew":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else {\n      switch(selector) {\n        case MIN: return new MinValue(sortedSet);\n        case MAX: return new MaxValue(sortedSet);\n        case MIDDLE_MIN: return new MiddleMinValue(sortedSet);\n        case MIDDLE_MAX: return new MiddleMaxValue(sortedSet);\n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  /** Wraps a multi-valued SortedSetDocValues as a single-valued view, using the specified selector */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selector) {\n    if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"fields containing more than \" + (Integer.MAX_VALUE-1) + \" unique terms are unsupported\");\n    }\n    \n    SortedDocValues singleton = DocValues.unwrapSingleton(sortedSet);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      return singleton;\n    } else if (selector == Type.MIN) {\n      return new MinValue(sortedSet);\n    } else {\n      if (sortedSet instanceof RandomAccessOrds == false) {\n        throw new UnsupportedOperationException(\"codec does not support random access ordinals, cannot use selector: \" + selector + \" docValsImpl: \" + sortedSet.toString());\n      }\n      RandomAccessOrds randomOrds = (RandomAccessOrds) sortedSet;\n      switch(selector) {\n        case MAX: return new MaxValue(randomOrds);\n        case MIDDLE_MIN: return new MiddleMinValue(randomOrds);\n        case MIDDLE_MAX: return new MiddleMaxValue(randomOrds);\n        case MIN: \n        default: \n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f192203c3feece147e3227c2446101d33858d81":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cb48b0969187aad3e0c6befa65e4421e1e1f667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1f192203c3feece147e3227c2446101d33858d81","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["1f192203c3feece147e3227c2446101d33858d81"],"4cb48b0969187aad3e0c6befa65e4421e1e1f667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1f192203c3feece147e3227c2446101d33858d81","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"1f192203c3feece147e3227c2446101d33858d81":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["1f192203c3feece147e3227c2446101d33858d81","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","4cb48b0969187aad3e0c6befa65e4421e1e1f667","56572ec06f1407c066d6b7399413178b33176cd8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cb48b0969187aad3e0c6befa65e4421e1e1f667":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}