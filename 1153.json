{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","commits":[{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Check preconditions for all factory methods */\n  private static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Check preconditions for all factory methods */\n  private static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","sourceNew":"  /** \n   * Check preconditions for all factory methods\n   * @throws IllegalArgumentException if {@code field}, {@code lowerPoint} or {@code upperPoint} are null.\n   */\n  public static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","sourceOld":"  /** Check preconditions for all factory methods */\n  private static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","sourceNew":"  /** \n   * Check preconditions for all factory methods\n   * @throws IllegalArgumentException if {@code field}, {@code lowerPoint} or {@code upperPoint} are null.\n   */\n  public static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","sourceOld":"  /** Check preconditions for all factory methods */\n  private static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#checkArgs(String,Object,Object).mjava","sourceNew":"  /** \n   * Check preconditions for all factory methods\n   * @throws IllegalArgumentException if {@code field}, {@code lowerPoint} or {@code upperPoint} are null.\n   */\n  public static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","sourceOld":"  /** Check preconditions for all factory methods */\n  private static void checkArgs(String field, Object lowerPoint, Object upperPoint) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"86cab68ee900a31d093b114182b488ea8e85c59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"]},"commit2Childs":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}