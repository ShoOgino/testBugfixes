{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","commits":[{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a55d7ebf9e9ced797f40d5154d602029a9791d","date":1561151156,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components) {\n    // We don't know enough about the query to do this confidently\n    if (components.getTerms() == null || components.getAutomata() == null) {\n      return null;\n    }\n\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents).mjava","sourceNew":"  /**\n   * Build one {@link CharArrayMatcher} matching any term the query might match.\n   */\n  private static CharArrayMatcher buildCombinedAutomaton(UHComponents components) {\n    // We don't know enough about the query to do this confidently\n    if (components.getTerms() == null || components.getAutomata() == null) {\n      return null;\n    }\n\n    List<CharArrayMatcher> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(CharArrayMatcher.fromTerms(Arrays.asList(components.getTerms())));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharArrayMatcher of others\n    return (chars, offset, length) -> {\n      for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n        if (allAutomata.get(i).match(chars, offset, length)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components) {\n    // We don't know enough about the query to do this confidently\n    if (components.getTerms() == null || components.getAutomata() == null) {\n      return null;\n    }\n\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}