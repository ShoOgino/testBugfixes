{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n\n    payloadCollector.reset();\n    spans.collect(payloadCollector);\n\n    Collection<byte[]> candidate = payloadCollector.getPayloads();\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2","date":1432114286,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#acceptPosition(Spans,SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {\n\n    PayloadSpanCollector payloadCollector = (PayloadSpanCollector) collector;\n\n    payloadCollector.reset();\n    spans.collect(payloadCollector);\n\n    Collection<byte[]> candidate = payloadCollector.getPayloads();\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n\n    payloadCollector.reset();\n    spans.collect(payloadCollector);\n\n    Collection<byte[]> candidate = payloadCollector.getPayloads();\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}