{"path":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#testSplitFuzz().mjava","commits":[{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#testSplitFuzz().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitFuzz() throws Exception {\n    String collectionName = \"splitFuzzCollection\";\n    CollectionAdminRequest\n        .createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(100)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitFuzz(0.5f)\n        .setShardName(\"shard1\");\n    splitShard.process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for sub shards to be active. Number of active shards=\" +\n            cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName).getActiveSlices().size(),\n        collectionName, activeClusterShape(3, 4));\n    DocCollection coll = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName);\n    Slice s1_0 = coll.getSlice(\"shard1_0\");\n    Slice s1_1 = coll.getSlice(\"shard1_1\");\n    long fuzz = ((long)Integer.MAX_VALUE >> 3) + 1L;\n    long delta0 = s1_0.getRange().max - s1_0.getRange().min;\n    long delta1 = s1_1.getRange().max - s1_1.getRange().min;\n    long expected0 = (Integer.MAX_VALUE >> 1) + fuzz;\n    long expected1 = (Integer.MAX_VALUE >> 1) - fuzz;\n    assertEquals(\"wrong range in s1_0\", expected0, delta0);\n    assertEquals(\"wrong range in s1_1\", expected1, delta1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#testSplitFuzz().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SplitShardTest#testSplitFuzz().mjava","sourceNew":"  @Test\n  public void testSplitFuzz() throws Exception {\n    String collectionName = \"splitFuzzCollection\";\n    CollectionAdminRequest\n        .createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitFuzz(0.5f)\n        .setShardName(\"shard1\");\n    splitShard.process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for sub shards to be active. Number of active shards=\" +\n            cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName).getActiveSlices().size(),\n        collectionName, activeClusterShape(3, 4));\n    DocCollection coll = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName);\n    Slice s1_0 = coll.getSlice(\"shard1_0\");\n    Slice s1_1 = coll.getSlice(\"shard1_1\");\n    long fuzz = ((long)Integer.MAX_VALUE >> 3) + 1L;\n    long delta0 = s1_0.getRange().max - s1_0.getRange().min;\n    long delta1 = s1_1.getRange().max - s1_1.getRange().min;\n    long expected0 = (Integer.MAX_VALUE >> 1) + fuzz;\n    long expected1 = (Integer.MAX_VALUE >> 1) - fuzz;\n    assertEquals(\"wrong range in s1_0\", expected0, delta0);\n    assertEquals(\"wrong range in s1_1\", expected1, delta1);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitFuzz() throws Exception {\n    String collectionName = \"splitFuzzCollection\";\n    CollectionAdminRequest\n        .createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(100)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitFuzz(0.5f)\n        .setShardName(\"shard1\");\n    splitShard.process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for sub shards to be active. Number of active shards=\" +\n            cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName).getActiveSlices().size(),\n        collectionName, activeClusterShape(3, 4));\n    DocCollection coll = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(collectionName);\n    Slice s1_0 = coll.getSlice(\"shard1_0\");\n    Slice s1_1 = coll.getSlice(\"shard1_1\");\n    long fuzz = ((long)Integer.MAX_VALUE >> 3) + 1L;\n    long delta0 = s1_0.getRange().max - s1_0.getRange().min;\n    long delta1 = s1_1.getRange().max - s1_1.getRange().min;\n    long expected0 = (Integer.MAX_VALUE >> 1) + fuzz;\n    long expected1 = (Integer.MAX_VALUE >> 1) - fuzz;\n    assertEquals(\"wrong range in s1_0\", expected0, delta0);\n    assertEquals(\"wrong range in s1_1\", expected1, delta1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cac1f2920f8057198f04505797cbabf74dd9a97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"7cac1f2920f8057198f04505797cbabf74dd9a97":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}